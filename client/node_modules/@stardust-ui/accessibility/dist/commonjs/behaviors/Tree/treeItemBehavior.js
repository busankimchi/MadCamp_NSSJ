"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var keyboardKey = _interopRequireWildcard(require("keyboard-key"));

var _attributes = require("../../attributes");

var _treeTitleBehavior = _interopRequireDefault(require("./treeTitleBehavior"));

/**
 * @description
 * Adds role 'treeitem' to a non-leaf item and 'none' to a leaf item.
 * Adds 'aria-expanded' with a value based on the 'open' prop if item is not a leaf.
 * Adds 'tabIndex' as '-1' if the item is not a leaf.
 *
 * @specification
 * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.
 * Triggers 'focusParent' action with 'ArrowLeft' on 'root', when has a closed subtree.
 * Triggers 'collapse' action with 'ArrowLeft' on 'root', when has an opened subtree.
 * Triggers 'expand' action with 'ArrowRight' on 'root', when has a closed subtree.
 * Triggers 'focusFirstChild' action with 'ArrowRight' on 'root', when has an opened subtree.
 */
var treeItemBehavior = function treeItemBehavior(props) {
  var _ref;

  return {
    attributes: {
      root: Object.assign({
        role: 'none'
      }, props.hasSubtree && (_ref = {
        'aria-expanded': props.open,
        tabIndex: -1
      }, (0, _defineProperty2.default)(_ref, _attributes.IS_FOCUSABLE_ATTRIBUTE, true), (0, _defineProperty2.default)(_ref, "role", 'treeitem'), (0, _defineProperty2.default)(_ref, 'aria-setsize', props.treeSize), (0, _defineProperty2.default)(_ref, 'aria-posinset', props.index), (0, _defineProperty2.default)(_ref, 'aria-level', props.level), _ref))
    },
    keyActions: {
      root: Object.assign({
        performClick: {
          keyCombinations: [{
            keyCode: keyboardKey.Enter
          }, {
            keyCode: keyboardKey.Spacebar
          }]
        }
      }, isSubtreeOpen(props) && {
        collapse: {
          keyCombinations: [{
            keyCode: keyboardKey.ArrowLeft
          }]
        },
        focusFirstChild: {
          keyCombinations: [{
            keyCode: keyboardKey.ArrowRight
          }]
        }
      }, !isSubtreeOpen(props) && {
        expand: {
          keyCombinations: [{
            keyCode: keyboardKey.ArrowRight
          }]
        },
        focusParent: {
          keyCombinations: [{
            keyCode: keyboardKey.ArrowLeft
          }]
        }
      }, {
        expandSiblings: {
          keyCombinations: [{
            keyCode: keyboardKey['*']
          }]
        }
      })
    },
    childBehaviors: {
      title: _treeTitleBehavior.default
    }
  };
};

/** Checks if current tree item has a subtree and it is opened */
var isSubtreeOpen = function isSubtreeOpen(props) {
  var hasSubtree = props.hasSubtree,
      open = props.open;
  return !!(hasSubtree && open);
};

var _default = treeItemBehavior;
exports.default = _default;