import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import * as customPropTypes from '@stardust-ui/react-proptypes';
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { withSafeTypeForAs } from '../../types';
import { childrenExist, createShorthandFactory, UIComponent, commonPropTypes, rtlTextContainer, getElementProp } from '../../lib';
import Box from '../Box/Box';
import ChatMessage from './ChatMessage';

var ChatItem =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(ChatItem, _UIComponent);

  function ChatItem() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ChatItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ChatItem)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "setAttachedPropValueForChatMessage", function (styles) {
      var _this$props = _this.props,
          message = _this$props.message,
          attached = _this$props.attached;
      var messageElement = Box.create(message, {
        defaultProps: function defaultProps() {
          return {
            className: ChatItem.slotClassNames.message,
            styles: styles.message
          };
        }
      }); // the element is ChatMessage

      if (ChatMessage.isTypeOfElement(messageElement)) {
        return _this.cloneElementWithCustomProps(messageElement, {
          attached: attached
        });
      } // the children is ChatMessage


      if (ChatMessage.isTypeOfElement(getElementProp(messageElement, 'children'))) {
        return _this.cloneElementWithCustomProps(messageElement, {
          attached: attached
        }, 'children');
      } // the content is ChatMessage


      if (ChatMessage.isTypeOfElement(getElementProp(messageElement, 'content'))) {
        return _this.cloneElementWithCustomProps(messageElement, {
          attached: attached
        }, 'content');
      }

      return messageElement;
    });

    _defineProperty(_assertThisInitialized(_this), "cloneElementWithCustomProps", function (element, props, prop) {
      if (!prop) {
        return React.cloneElement(element, props);
      }

      return React.cloneElement(element, _defineProperty({}, prop, React.cloneElement(getElementProp(element, prop), props)));
    });

    return _this;
  }

  _createClass(ChatItem, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var accessibility = _ref.accessibility,
          ElementType = _ref.ElementType,
          classes = _ref.classes,
          unhandledProps = _ref.unhandledProps,
          styles = _ref.styles;
      var children = this.props.children;
      return React.createElement(ElementType, _extends({}, rtlTextContainer.getAttributes({
        forElements: [children]
      }), accessibility.attributes.root, unhandledProps, {
        className: classes.root
      }), childrenExist(children) ? children : this.renderChatItem(styles));
    }
  }, {
    key: "renderChatItem",
    value: function renderChatItem(styles) {
      var _this$props2 = this.props,
          gutter = _this$props2.gutter,
          contentPosition = _this$props2.contentPosition;
      var gutterElement = gutter && Box.create(gutter, {
        defaultProps: function defaultProps() {
          return {
            className: ChatItem.slotClassNames.gutter,
            styles: styles.gutter
          };
        }
      });
      var messageElement = this.setAttachedPropValueForChatMessage(styles);
      return React.createElement(React.Fragment, null, contentPosition === 'start' && gutterElement, messageElement, contentPosition === 'end' && gutterElement);
    }
  }]);

  return ChatItem;
}(UIComponent);

_defineProperty(ChatItem, "className", 'ui-chat__item');

_defineProperty(ChatItem, "create", void 0);

_defineProperty(ChatItem, "displayName", 'ChatItem');

_defineProperty(ChatItem, "slotClassNames", void 0);

_defineProperty(ChatItem, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  content: false
}), {
  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),
  gutter: customPropTypes.itemShorthand,
  contentPosition: PropTypes.oneOf(['start', 'end']),
  message: customPropTypes.itemShorthand
}));

_defineProperty(ChatItem, "defaultProps", {
  as: 'li',
  contentPosition: 'start',
  attached: false
});

ChatItem.create = createShorthandFactory({
  Component: ChatItem,
  mappedProp: 'message'
});
ChatItem.slotClassNames = {
  message: "".concat(ChatItem.className, "__message"),
  gutter: "".concat(ChatItem.className, "__gutter")
  /**
   * A ChatItem is container for single entity in Chat (e.g. message, notification, etc).
   */

};
export default withSafeTypeForAs(ChatItem);