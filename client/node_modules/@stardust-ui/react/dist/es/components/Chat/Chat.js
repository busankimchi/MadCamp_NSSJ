import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _map from "lodash/map";
import { chatBehavior } from '@stardust-ui/accessibility';
import * as customPropTypes from '@stardust-ui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { childrenExist, UIComponent, commonPropTypes, rtlTextContainer, applyAccessibilityKeyHandlers } from '../../lib';
import ChatItem from './ChatItem';
import ChatMessage from './ChatMessage';
import { withSafeTypeForAs } from '../../types';

var Chat =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(Chat, _UIComponent);

  function Chat() {
    _classCallCheck(this, Chat);

    return _possibleConstructorReturn(this, _getPrototypeOf(Chat).apply(this, arguments));
  }

  _createClass(Chat, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          accessibility = _ref.accessibility,
          unhandledProps = _ref.unhandledProps;
      var _this$props = this.props,
          children = _this$props.children,
          items = _this$props.items;
      return React.createElement(ElementType, _extends({
        className: classes.root
      }, accessibility.attributes.root, rtlTextContainer.getAttributes({
        forElements: [children]
      }), unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)), childrenExist(children) ? children : _map(items, function (item) {
        return ChatItem.create(item, {
          defaultProps: function defaultProps() {
            return {
              className: Chat.slotClassNames.item
            };
          }
        });
      }));
    }
  }]);

  return Chat;
}(UIComponent);
/**
 * A Chat displays messages from a conversation between multiple users.
 */


_defineProperty(Chat, "displayName", 'Chat');

_defineProperty(Chat, "className", 'ui-chat');

_defineProperty(Chat, "slotClassNames", {
  item: "".concat(Chat.className, "__item")
});

_defineProperty(Chat, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  content: false
}), {
  items: PropTypes.arrayOf(customPropTypes.itemShorthand)
}));

_defineProperty(Chat, "defaultProps", {
  accessibility: chatBehavior,
  as: 'ul'
});

_defineProperty(Chat, "Item", ChatItem);

_defineProperty(Chat, "Message", ChatMessage);

export default withSafeTypeForAs(Chat);