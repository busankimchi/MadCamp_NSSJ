import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { imageBehavior } from '@stardust-ui/accessibility';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { createShorthandFactory, UIComponent, commonPropTypes } from '../../lib';
import { withSafeTypeForAs } from '../../types';

var Image =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(Image, _UIComponent);

  function Image() {
    _classCallCheck(this, Image);

    return _possibleConstructorReturn(this, _getPrototypeOf(Image).apply(this, arguments));
  }

  _createClass(Image, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          accessibility = _ref.accessibility,
          unhandledProps = _ref.unhandledProps;
      return React.createElement(ElementType, _extends({}, accessibility.attributes.root, unhandledProps, {
        className: classes.root
      }));
    }
  }]);

  return Image;
}(UIComponent);

_defineProperty(Image, "create", void 0);

_defineProperty(Image, "className", 'ui-image');

_defineProperty(Image, "displayName", 'Image');

_defineProperty(Image, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  children: false,
  content: false
}), {
  avatar: PropTypes.bool,
  circular: PropTypes.bool,
  fluid: PropTypes.bool
}));

_defineProperty(Image, "defaultProps", {
  as: 'img',
  accessibility: imageBehavior
});

Image.create = createShorthandFactory({
  Component: Image,
  mappedProp: 'src',
  allowsJSX: false
});
/**
 * An Image is a graphic representation of something.
 *
 * @accessibility
 * If image should be visible to screen readers, textual representation needs to be provided in 'alt' property.
 *
 * Other considerations:
 *  - when alt property is empty, then Narrator in scan mode navigates to image and narrates it as empty paragraph.
 *  - when image has role='presentation' then screen readers navigate to the element in scan/virtual mode. To avoid this, the attribute "aria-hidden='true'" is applied by the default image behavior.
 *  - when alt property is used in combination with aria-label, arialabbeledby or title, additional screen readers verification is needed as each screen reader handles this combination differently.
 */

export default withSafeTypeForAs(Image);