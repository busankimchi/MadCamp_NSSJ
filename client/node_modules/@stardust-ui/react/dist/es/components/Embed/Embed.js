import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _invoke from "lodash/invoke";
import _isNil from "lodash/isNil";
import { embedBehavior } from '@stardust-ui/accessibility';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import * as customPropTypes from '@stardust-ui/react-proptypes';
import { createShorthandFactory, applyAccessibilityKeyHandlers, commonPropTypes, AutoControlledComponent } from '../../lib';
import Icon from '../Icon/Icon';
import Image from '../Image/Image';
import Video from '../Video/Video';
import Box from '../Box/Box';
import { withSafeTypeForAs } from '../../types';
import { Ref } from '@stardust-ui/react-component-ref';

var Embed =
/*#__PURE__*/
function (_AutoControlledCompon) {
  _inherits(Embed, _AutoControlledCompon);

  function Embed() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Embed);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Embed)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "actionHandlers", {
      performClick: function performClick(event) {
        return _this.handleClick(event);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "frameRef", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "handleClick", function (e) {
      e.stopPropagation();
      e.preventDefault();

      var iframeNil = _isNil(_this.props.iframe);

      if (iframeNil || !iframeNil && !_this.state.active) {
        _this.setState({
          active: !_this.state.active
        });

        _invoke(_this.props, 'onActiveChanged', e, Object.assign({}, _this.props, {
          active: !_this.state.active
        }));
      }

      _invoke(_this.props, 'onClick', e, Object.assign({}, _this.props, {
        active: !_this.state.active
      }));
    });

    _defineProperty(_assertThisInitialized(_this), "handleFrameOverrides", function (predefinedProps) {
      return {
        onLoad: function onLoad(e) {
          _invoke(predefinedProps, 'onLoad', e);

          _this.setState({
            iframeLoaded: true
          });

          _this.frameRef.current.contentWindow.focus();
        }
      };
    });

    return _this;
  }

  _createClass(Embed, [{
    key: "getInitialAutoControlledState",
    value: function getInitialAutoControlledState() {
      return {
        active: false,
        iframeLoaded: false
      };
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          accessibility = _ref.accessibility,
          unhandledProps = _ref.unhandledProps,
          styles = _ref.styles,
          variables = _ref.variables;
      var _this$props = this.props,
          control = _this$props.control,
          iframe = _this$props.iframe,
          placeholder = _this$props.placeholder,
          video = _this$props.video;
      var _this$state = this.state,
          active = _this$state.active,
          iframeLoaded = _this$state.iframeLoaded;
      var placeholderElement = placeholder ? React.createElement(Image, {
        src: placeholder,
        styles: styles.image,
        variables: {
          width: variables.width,
          height: variables.height
        }
      }) : null;
      var hasIframe = !_isNil(iframe);
      var hasVideo = !_isNil(video);
      var controlVisible = !active || hasVideo;
      var placeholderVisible = !active || hasIframe && active && !iframeLoaded;
      return React.createElement(ElementType, _extends({
        className: classes.root,
        onClick: this.handleClick
      }, accessibility.attributes.root, unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)), active && React.createElement(React.Fragment, null, Video.create(video, {
        defaultProps: function defaultProps() {
          return {
            autoPlay: true,
            controls: false,
            loop: true,
            muted: true,
            poster: placeholder,
            styles: styles.video,
            variables: {
              width: variables.width,
              height: variables.height
            }
          };
        }
      }), iframe && React.createElement(Ref, {
        innerRef: this.frameRef
      }, Box.create(iframe, {
        defaultProps: function defaultProps() {
          return {
            as: 'iframe',
            styles: styles.iframe
          };
        },
        overrideProps: this.handleFrameOverrides
      }))), placeholderVisible && placeholderElement, controlVisible && Icon.create(control, {
        defaultProps: function defaultProps() {
          return {
            className: Embed.slotClassNames.control,
            circular: true,
            name: active ? 'stardust-pause' : 'stardust-play',
            size: 'largest',
            styles: styles.control
          };
        }
      }));
    }
  }]);

  return Embed;
}(AutoControlledComponent);

_defineProperty(Embed, "create", void 0);

_defineProperty(Embed, "className", 'ui-embed');

_defineProperty(Embed, "displayName", 'Embed');

_defineProperty(Embed, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  children: false,
  content: false
}), {
  active: PropTypes.bool,
  defaultActive: PropTypes.bool,
  control: customPropTypes.itemShorthand,
  iframe: customPropTypes.every([customPropTypes.disallow(['video']), customPropTypes.itemShorthand]),
  onActiveChanged: PropTypes.func,
  onClick: PropTypes.func,
  placeholder: PropTypes.string,
  video: customPropTypes.every([customPropTypes.disallow(['iframe']), customPropTypes.itemShorthand])
}));

_defineProperty(Embed, "defaultProps", {
  as: 'span',
  accessibility: embedBehavior,
  control: {}
});

_defineProperty(Embed, "autoControlledProps", ['active']);

_defineProperty(Embed, "slotClassNames", {
  control: "".concat(Embed.className, "__control")
});

Embed.create = createShorthandFactory({
  Component: Embed
});
/**
 * An Embed displays content from external websites, like a post from external social network.
 *
 * @accessibility
 * A `placeholder` slot represents an [`Image`](/components/image/definition) component, please follow recommendations from its
 * accessibility section.
 */

export default withSafeTypeForAs(Embed);