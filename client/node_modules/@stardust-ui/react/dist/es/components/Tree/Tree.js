import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _invoke from "lodash/invoke";
import _reduce from "lodash/reduce";
import { treeBehavior } from '@stardust-ui/accessibility';
import { getNextElement } from '@stardust-ui/react-bindings';
import * as customPropTypes from '@stardust-ui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { Ref } from '@stardust-ui/react-component-ref';
import TreeItem from './TreeItem';
import { childrenExist, commonPropTypes, createShorthandFactory, rtlTextContainer, applyAccessibilityKeyHandlers, AutoControlledComponent } from '../../lib';
import { withSafeTypeForAs } from '../../types';
import { hasSubtree, removeItemAtIndex } from './lib';

var Tree =
/*#__PURE__*/
function (_AutoControlledCompon) {
  _inherits(Tree, _AutoControlledCompon);

  function Tree() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Tree);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Tree)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "treeRef", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "handleTreeItemOverrides", function (predefinedProps) {
      return {
        onTitleClick: function onTitleClick(e, treeItemProps) {
          if (!hasSubtree(treeItemProps)) {
            return;
          }

          var activeItemIds = _this.state.activeItemIds;
          var id = treeItemProps.id,
              siblings = treeItemProps.siblings;
          var exclusive = _this.props.exclusive;
          var activeItemIdIndex = activeItemIds.indexOf(id);

          if (activeItemIdIndex > -1) {
            activeItemIds = removeItemAtIndex(activeItemIds, activeItemIdIndex);
          } else {
            if (exclusive) {
              siblings.some(function (sibling) {
                var activeSiblingIdIndex = activeItemIds.indexOf(sibling['id']);

                if (activeSiblingIdIndex > -1) {
                  activeItemIds = removeItemAtIndex(activeItemIds, activeSiblingIdIndex);
                  return true;
                }

                return false;
              });
            }

            activeItemIds = [].concat(_toConsumableArray(activeItemIds), [id]);
          }

          _this.setState({
            activeItemIds: activeItemIds
          });

          _invoke(predefinedProps, 'onTitleClick', e, treeItemProps);
        },
        onFocusParent: function onFocusParent(e, treeItemProps) {
          var parent = treeItemProps.parent;

          if (!parent) {
            return;
          }

          var itemsForRender = _this.state.itemsForRender;
          var parentItemForRender = itemsForRender[parent['id']];

          if (!parentItemForRender || !parentItemForRender.elementRef || !parentItemForRender.elementRef.current) {
            return;
          }

          parentItemForRender.elementRef.current.focus();

          _invoke(predefinedProps, 'onFocusParent', e, treeItemProps);
        },
        onFocusFirstChild: function onFocusFirstChild(e, treeItemProps) {
          var id = treeItemProps.id;
          var itemsForRender = _this.state.itemsForRender;
          var currentElement = itemsForRender[id].elementRef;

          if (!currentElement || !currentElement.current) {
            return;
          }

          var elementToBeFocused = getNextElement(_this.treeRef.current, currentElement.current);

          if (!elementToBeFocused) {
            return;
          }

          elementToBeFocused.focus();

          _invoke(predefinedProps, 'onFocusFirstChild', e, treeItemProps);
        },
        onSiblingsExpand: function onSiblingsExpand(e, treeItemProps) {
          if (_this.props.exclusive) {
            return;
          }

          var id = treeItemProps.id,
              siblings = treeItemProps.siblings;
          var activeItemIds = _this.state.activeItemIds;
          siblings.forEach(function (sibling) {
            if (hasSubtree(sibling) && !_this.isActiveItem(sibling['id'])) {
              activeItemIds.push(sibling['id']);
            }
          });

          if (hasSubtree(treeItemProps) && !_this.isActiveItem(id)) {
            activeItemIds.push(id);
          }

          _this.setState({
            activeItemIds: activeItemIds
          });

          _invoke(predefinedProps, 'onSiblingsExpand', e, treeItemProps);
        }
      };
    });

    _defineProperty(_assertThisInitialized(_this), "isActiveItem", function (id) {
      var activeItemIds = _this.state.activeItemIds;
      return activeItemIds.indexOf(id) > -1;
    });

    return _this;
  }

  _createClass(Tree, [{
    key: "getInitialAutoControlledState",
    value: function getInitialAutoControlledState() {
      return {
        activeItemIds: []
      };
    }
  }, {
    key: "renderContent",
    value: function renderContent(accessibility) {
      var _this2 = this;

      var itemsForRender = this.state.itemsForRender;
      var _this$props = this.props,
          items = _this$props.items,
          renderItemTitle = _this$props.renderItemTitle;
      if (!items) return null;

      var renderItems = function renderItems(items) {
        return items.reduce(function (renderedItems, item) {
          var itemForRender = itemsForRender[item['id']];

          var elementRef = itemForRender.elementRef,
              restItemForRender = _objectWithoutProperties(itemForRender, ["elementRef"]);

          var isSubtree = hasSubtree(item);

          var isSubtreeOpen = isSubtree && _this2.isActiveItem(item['id']);

          var renderedItem = TreeItem.create(item, {
            defaultProps: function defaultProps() {
              return Object.assign({
                accessibility: accessibility.childBehaviors ? accessibility.childBehaviors.item : undefined,
                className: Tree.slotClassNames.item,
                open: isSubtreeOpen,
                renderItemTitle: renderItemTitle,
                key: item['id'],
                contentRef: elementRef
              }, restItemForRender);
            },
            overrideProps: _this2.handleTreeItemOverrides
          });
          return [].concat(_toConsumableArray(renderedItems), [renderedItem], _toConsumableArray(isSubtreeOpen ? renderItems(item['items']) : []));
        }, []);
      };

      return renderItems(items);
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          accessibility = _ref.accessibility,
          unhandledProps = _ref.unhandledProps;
      var _this$props2 = this.props,
          children = _this$props2.children,
          renderedItems = _this$props2.renderedItems;
      return React.createElement(Ref, {
        innerRef: this.treeRef
      }, React.createElement(ElementType, _extends({
        className: classes.root
      }, accessibility.attributes.root, rtlTextContainer.getAttributes({
        forElements: [children]
      }), unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)), childrenExist(children) ? children : renderedItems ? renderedItems(this.renderContent(accessibility)) : this.renderContent(accessibility)));
    }
  }], [{
    key: "getAutoControlledStateFromProps",
    value: function getAutoControlledStateFromProps(nextProps, prevState) {
      var itemsForRender = Tree.getItemsForRender(nextProps.items);
      return {
        itemsForRender: itemsForRender
      };
    }
  }]);

  return Tree;
}(AutoControlledComponent);

_defineProperty(Tree, "create", void 0);

_defineProperty(Tree, "displayName", 'Tree');

_defineProperty(Tree, "className", 'ui-tree');

_defineProperty(Tree, "slotClassNames", {
  item: "".concat(Tree.className, "__item")
});

_defineProperty(Tree, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  content: false
}), {
  activeItemIds: customPropTypes.collectionShorthand,
  defaultActiveItemIds: customPropTypes.collectionShorthand,
  exclusive: PropTypes.bool,
  items: customPropTypes.collectionShorthand,
  renderItemTitle: PropTypes.func,
  renderedItems: PropTypes.func
}));

_defineProperty(Tree, "defaultProps", {
  as: 'div',
  accessibility: treeBehavior
});

_defineProperty(Tree, "autoControlledProps", ['activeItemIds']);

_defineProperty(Tree, "getItemsForRender", function (itemsFromProps) {
  var itemsForRenderGenerator = function itemsForRenderGenerator() {
    var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : itemsFromProps;
    var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var parent = arguments.length > 2 ? arguments[2] : undefined;
    return _reduce(items, function (acc, item, index) {
      var id = item['id'];
      var isSubtree = hasSubtree(item);
      acc[id] = {
        elementRef: React.createRef(),
        level: level,
        index: index + 1,
        // Used for aria-posinset and it's 1-based.
        parent: parent,
        siblings: items.filter(function (currentItem) {
          return currentItem !== item;
        })
      };
      return Object.assign({}, acc, isSubtree ? itemsForRenderGenerator(item['items'], level + 1, item) : {});
    }, {});
  };

  return itemsForRenderGenerator(itemsFromProps);
});

Tree.create = createShorthandFactory({
  Component: Tree,
  mappedArrayProp: 'items'
});
/**
 * A Tree displays data organised in tree hierarchy.
 *
 * @accessibility
 * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.
 */

export default withSafeTypeForAs(Tree);