import { Accessibility } from '@stardust-ui/accessibility';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { TreeItemProps } from './TreeItem';
import { UIComponentProps, ChildrenComponentProps, AutoControlledComponent, ShorthandFactory } from '../../lib';
import { ShorthandRenderFunction, WithAsProp, ShorthandCollection, ShorthandValue } from '../../types';
import { TreeTitleProps } from './TreeTitle';
import { ReactAccessibilityBehavior } from '../../lib/accessibility/reactTypes';
export interface TreeSlotClassNames {
    item: string;
}
export interface TreeProps extends UIComponentProps, ChildrenComponentProps {
    /** Accessibility behavior if overridden by the user. */
    accessibility?: Accessibility;
    /** Ids of opened items. */
    activeItemIds?: string[];
    /** Initial activeItemIds value. */
    defaultActiveItemIds?: string[];
    /** Only allow one subtree to be open at a time. */
    exclusive?: boolean;
    /** Shorthand array of props for Tree. */
    items?: ShorthandCollection<TreeItemProps>;
    /**
     * A custom render function for the title slot.
     *
     * @param {React.ReactType} Component - The computed component for this slot.
     * @param {object} props - The computed props for this slot.
     * @param {ReactNode|ReactNodeArray} children - The computed children for this slot.
     */
    renderItemTitle?: ShorthandRenderFunction<TreeTitleProps>;
    /**
     * Callback that provides rendered tree items to be used by react-virtualized for instance.
     * Acts as a render prop, with the rendered tree items being the re-used logic.
     *
     * @param {React.ReactElement[]} renderedItem The array of rendered items.
     * @return {React.ReactNode} The render prop result.
     */
    renderedItems?: (renderedItems: React.ReactElement[]) => React.ReactNode;
}
export interface TreeItemForRenderProps {
    elementRef: React.RefObject<HTMLElement>;
    id: string;
    index: number;
    level: number;
    parent: ShorthandValue<TreeItemProps>;
    siblings: ShorthandCollection<TreeItemProps>;
}
export interface TreeState {
    activeItemIds: string[];
    itemsForRender: Record<string, TreeItemForRenderProps>;
}
declare class Tree extends AutoControlledComponent<WithAsProp<TreeProps>, TreeState> {
    static create: ShorthandFactory<TreeProps>;
    static displayName: string;
    static className: string;
    static slotClassNames: TreeSlotClassNames;
    static propTypes: {
        activeItemIds: (props: Record<string, any>, propName: string, componentName: string, ...args: any[]) => any;
        defaultActiveItemIds: (props: Record<string, any>, propName: string, componentName: string, ...args: any[]) => any;
        exclusive: PropTypes.Requireable<boolean>;
        items: (props: Record<string, any>, propName: string, componentName: string, ...args: any[]) => any;
        renderItemTitle: PropTypes.Requireable<(...args: any[]) => any>;
        renderedItems: PropTypes.Requireable<(...args: any[]) => any>;
        styles: PropTypes.Requireable<object>;
        variables: PropTypes.Requireable<object>;
        design: PropTypes.Requireable<PropTypes.InferProps<{
            position: PropTypes.Requireable<string>;
            display: PropTypes.Requireable<string>;
            top: PropTypes.Requireable<string>;
            right: PropTypes.Requireable<string>;
            bottom: PropTypes.Requireable<string>;
            left: PropTypes.Requireable<string>;
            padding: PropTypes.Requireable<string>;
            paddingTop: PropTypes.Requireable<string>;
            paddingRight: PropTypes.Requireable<string>;
            paddingBottom: PropTypes.Requireable<string>;
            paddingLeft: PropTypes.Requireable<string>;
            margin: PropTypes.Requireable<string>;
            marginTop: PropTypes.Requireable<string>;
            marginRight: PropTypes.Requireable<string>;
            marginBottom: PropTypes.Requireable<string>;
            marginLeft: PropTypes.Requireable<string>;
            width: PropTypes.Requireable<string>;
            height: PropTypes.Requireable<string>;
            minWidth: PropTypes.Requireable<string>;
            maxWidth: PropTypes.Requireable<string>;
            minHeight: PropTypes.Requireable<string>;
            maxHeight: PropTypes.Requireable<string>;
        }>>;
        content: (props: Record<string, any>, propName: string, componentName: string, ...args: any[]) => any;
        color: PropTypes.Requireable<string>;
        className: PropTypes.Requireable<string>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        as: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        animation: PropTypes.Requireable<any>;
        accessibility: PropTypes.Requireable<object>;
    };
    static defaultProps: {
        as: string;
        accessibility: Accessibility<any>;
    };
    static autoControlledProps: string[];
    static getItemsForRender: (itemsFromProps: ShorthandValue<TreeItemProps & {
        kind?: never;
    }>[]) => any;
    static getAutoControlledStateFromProps(nextProps: TreeProps, prevState: TreeState): {
        itemsForRender: any;
    };
    getInitialAutoControlledState(): {
        activeItemIds: any[];
    };
    treeRef: React.RefObject<HTMLElement>;
    handleTreeItemOverrides: (predefinedProps: TreeItemProps) => {
        onTitleClick: (e: React.SyntheticEvent<Element, Event>, treeItemProps: TreeItemProps) => void;
        onFocusParent: (e: React.SyntheticEvent<Element, Event>, treeItemProps: TreeItemProps) => void;
        onFocusFirstChild: (e: React.SyntheticEvent<Element, Event>, treeItemProps: TreeItemProps) => void;
        onSiblingsExpand: (e: React.SyntheticEvent<Element, Event>, treeItemProps: TreeItemProps) => void;
    };
    renderContent(accessibility: ReactAccessibilityBehavior): React.ReactElement[];
    renderComponent({ ElementType, classes, accessibility, unhandledProps }: {
        ElementType: any;
        classes: any;
        accessibility: any;
        unhandledProps: any;
    }): JSX.Element;
    isActiveItem: (id: string) => boolean;
}
declare const _default: {
    <Tag>(x: {
        as: Tag;
    } & TreeProps & {
        [K: string]: any;
    }): JSX.Element;
    (x: {
        accessibility?: Accessibility<any>;
        activeItemIds?: string[];
        defaultActiveItemIds?: string[];
        exclusive?: boolean;
        items?: ShorthandValue<TreeItemProps & {
            kind?: never;
        }>[];
        renderItemTitle?: ShorthandRenderFunction<TreeTitleProps>;
        renderedItems?: (renderedItems: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>[]) => React.ReactNode;
        className?: string;
        design?: import("../..").ComponentDesign;
        styles?: import("../..").ComponentSlotStyle<any, any>;
        variables?: any;
        animation?: import("../..").AnimationProp;
        children?: React.ReactNode;
        ref?: React.LegacyRef<HTMLUListElement>;
        key?: string | number;
        defaultChecked?: boolean;
        defaultValue?: string | string[];
        suppressContentEditableWarning?: boolean;
        suppressHydrationWarning?: boolean;
        accessKey?: string;
        contentEditable?: boolean;
        contextMenu?: string;
        dir?: string;
        draggable?: boolean;
        hidden?: boolean;
        id?: string;
        lang?: string;
        placeholder?: string;
        slot?: string;
        spellCheck?: boolean;
        style?: React.CSSProperties;
        tabIndex?: number;
        title?: string;
        inputMode?: string;
        is?: string;
        radioGroup?: string;
        role?: string;
        about?: string;
        datatype?: string;
        inlist?: any;
        prefix?: string;
        property?: string;
        resource?: string;
        typeof?: string;
        vocab?: string;
        autoCapitalize?: string;
        autoCorrect?: string;
        autoSave?: string;
        color?: string;
        itemProp?: string;
        itemScope?: boolean;
        itemType?: string;
        itemID?: string;
        itemRef?: string;
        results?: number;
        security?: string;
        unselectable?: "on" | "off";
        'aria-activedescendant'?: string;
        'aria-atomic'?: boolean | "false" | "true";
        'aria-autocomplete'?: "none" | "both" | "inline" | "list";
        'aria-busy'?: boolean | "false" | "true";
        'aria-checked'?: boolean | "mixed" | "false" | "true";
        'aria-colcount'?: number;
        'aria-colindex'?: number;
        'aria-colspan'?: number;
        'aria-controls'?: string;
        'aria-current'?: boolean | "time" | "page" | "false" | "true" | "step" | "location" | "date";
        'aria-describedby'?: string;
        'aria-details'?: string;
        'aria-disabled'?: boolean | "false" | "true";
        'aria-dropeffect'?: "link" | "none" | "copy" | "move" | "execute" | "popup";
        'aria-errormessage'?: string;
        'aria-expanded'?: boolean | "false" | "true";
        'aria-flowto'?: string;
        'aria-grabbed'?: boolean | "false" | "true";
        'aria-haspopup'?: boolean | "dialog" | "menu" | "grid" | "listbox" | "false" | "true" | "tree";
        'aria-hidden'?: boolean | "false" | "true";
        'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling";
        'aria-keyshortcuts'?: string;
        'aria-label'?: string;
        'aria-labelledby'?: string;
        'aria-level'?: number;
        'aria-live'?: "off" | "assertive" | "polite";
        'aria-modal'?: boolean | "false" | "true";
        'aria-multiline'?: boolean | "false" | "true";
        'aria-multiselectable'?: boolean | "false" | "true";
        'aria-orientation'?: "horizontal" | "vertical";
        'aria-owns'?: string;
        'aria-placeholder'?: string;
        'aria-posinset'?: number;
        'aria-pressed'?: boolean | "mixed" | "false" | "true";
        'aria-readonly'?: boolean | "false" | "true";
        'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals";
        'aria-required'?: boolean | "false" | "true";
        'aria-roledescription'?: string;
        'aria-rowcount'?: number;
        'aria-rowindex'?: number;
        'aria-rowspan'?: number;
        'aria-selected'?: boolean | "false" | "true";
        'aria-setsize'?: number;
        'aria-sort'?: "none" | "ascending" | "descending" | "other";
        'aria-valuemax'?: number;
        'aria-valuemin'?: number;
        'aria-valuenow'?: number;
        'aria-valuetext'?: string;
        dangerouslySetInnerHTML?: {
            __html: string;
        };
        onCopy?: (event: React.ClipboardEvent<HTMLUListElement>) => void;
        onCopyCapture?: (event: React.ClipboardEvent<HTMLUListElement>) => void;
        onCut?: (event: React.ClipboardEvent<HTMLUListElement>) => void;
        onCutCapture?: (event: React.ClipboardEvent<HTMLUListElement>) => void;
        onPaste?: (event: React.ClipboardEvent<HTMLUListElement>) => void;
        onPasteCapture?: (event: React.ClipboardEvent<HTMLUListElement>) => void;
        onCompositionEnd?: (event: React.CompositionEvent<HTMLUListElement>) => void;
        onCompositionEndCapture?: (event: React.CompositionEvent<HTMLUListElement>) => void;
        onCompositionStart?: (event: React.CompositionEvent<HTMLUListElement>) => void;
        onCompositionStartCapture?: (event: React.CompositionEvent<HTMLUListElement>) => void;
        onCompositionUpdate?: (event: React.CompositionEvent<HTMLUListElement>) => void;
        onCompositionUpdateCapture?: (event: React.CompositionEvent<HTMLUListElement>) => void;
        onFocus?: (event: React.FocusEvent<HTMLUListElement>) => void;
        onFocusCapture?: (event: React.FocusEvent<HTMLUListElement>) => void;
        onBlur?: (event: React.FocusEvent<HTMLUListElement>) => void;
        onBlurCapture?: (event: React.FocusEvent<HTMLUListElement>) => void;
        onChange?: (event: React.FormEvent<HTMLUListElement>) => void;
        onChangeCapture?: (event: React.FormEvent<HTMLUListElement>) => void;
        onBeforeInput?: (event: React.FormEvent<HTMLUListElement>) => void;
        onBeforeInputCapture?: (event: React.FormEvent<HTMLUListElement>) => void;
        onInput?: (event: React.FormEvent<HTMLUListElement>) => void;
        onInputCapture?: (event: React.FormEvent<HTMLUListElement>) => void;
        onReset?: (event: React.FormEvent<HTMLUListElement>) => void;
        onResetCapture?: (event: React.FormEvent<HTMLUListElement>) => void;
        onSubmit?: (event: React.FormEvent<HTMLUListElement>) => void;
        onSubmitCapture?: (event: React.FormEvent<HTMLUListElement>) => void;
        onInvalid?: (event: React.FormEvent<HTMLUListElement>) => void;
        onInvalidCapture?: (event: React.FormEvent<HTMLUListElement>) => void;
        onLoad?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onLoadCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onError?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onErrorCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onKeyDown?: (event: React.KeyboardEvent<HTMLUListElement>) => void;
        onKeyDownCapture?: (event: React.KeyboardEvent<HTMLUListElement>) => void;
        onKeyPress?: (event: React.KeyboardEvent<HTMLUListElement>) => void;
        onKeyPressCapture?: (event: React.KeyboardEvent<HTMLUListElement>) => void;
        onKeyUp?: (event: React.KeyboardEvent<HTMLUListElement>) => void;
        onKeyUpCapture?: (event: React.KeyboardEvent<HTMLUListElement>) => void;
        onAbort?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onAbortCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onCanPlay?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onCanPlayCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onCanPlayThrough?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onCanPlayThroughCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onDurationChange?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onDurationChangeCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onEmptied?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onEmptiedCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onEncrypted?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onEncryptedCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onEnded?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onEndedCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onLoadedData?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onLoadedDataCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onLoadedMetadata?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onLoadedMetadataCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onLoadStart?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onLoadStartCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onPause?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onPauseCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onPlay?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onPlayCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onPlaying?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onPlayingCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onProgress?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onProgressCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onRateChange?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onRateChangeCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onSeeked?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onSeekedCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onSeeking?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onSeekingCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onStalled?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onStalledCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onSuspend?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onSuspendCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onTimeUpdate?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onTimeUpdateCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onVolumeChange?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onVolumeChangeCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onWaiting?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onWaitingCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onClick?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onClickCapture?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onContextMenu?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onContextMenuCapture?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onDoubleClick?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onDoubleClickCapture?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onDrag?: (event: React.DragEvent<HTMLUListElement>) => void;
        onDragCapture?: (event: React.DragEvent<HTMLUListElement>) => void;
        onDragEnd?: (event: React.DragEvent<HTMLUListElement>) => void;
        onDragEndCapture?: (event: React.DragEvent<HTMLUListElement>) => void;
        onDragEnter?: (event: React.DragEvent<HTMLUListElement>) => void;
        onDragEnterCapture?: (event: React.DragEvent<HTMLUListElement>) => void;
        onDragExit?: (event: React.DragEvent<HTMLUListElement>) => void;
        onDragExitCapture?: (event: React.DragEvent<HTMLUListElement>) => void;
        onDragLeave?: (event: React.DragEvent<HTMLUListElement>) => void;
        onDragLeaveCapture?: (event: React.DragEvent<HTMLUListElement>) => void;
        onDragOver?: (event: React.DragEvent<HTMLUListElement>) => void;
        onDragOverCapture?: (event: React.DragEvent<HTMLUListElement>) => void;
        onDragStart?: (event: React.DragEvent<HTMLUListElement>) => void;
        onDragStartCapture?: (event: React.DragEvent<HTMLUListElement>) => void;
        onDrop?: (event: React.DragEvent<HTMLUListElement>) => void;
        onDropCapture?: (event: React.DragEvent<HTMLUListElement>) => void;
        onMouseDown?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onMouseDownCapture?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onMouseEnter?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onMouseLeave?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onMouseMove?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onMouseMoveCapture?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onMouseOut?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onMouseOutCapture?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onMouseOver?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onMouseOverCapture?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onMouseUp?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onMouseUpCapture?: (event: React.MouseEvent<HTMLUListElement, MouseEvent>) => void;
        onSelect?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onSelectCapture?: (event: React.SyntheticEvent<HTMLUListElement, Event>) => void;
        onTouchCancel?: (event: React.TouchEvent<HTMLUListElement>) => void;
        onTouchCancelCapture?: (event: React.TouchEvent<HTMLUListElement>) => void;
        onTouchEnd?: (event: React.TouchEvent<HTMLUListElement>) => void;
        onTouchEndCapture?: (event: React.TouchEvent<HTMLUListElement>) => void;
        onTouchMove?: (event: React.TouchEvent<HTMLUListElement>) => void;
        onTouchMoveCapture?: (event: React.TouchEvent<HTMLUListElement>) => void;
        onTouchStart?: (event: React.TouchEvent<HTMLUListElement>) => void;
        onTouchStartCapture?: (event: React.TouchEvent<HTMLUListElement>) => void;
        onPointerDown?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onPointerDownCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onPointerMove?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onPointerMoveCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onPointerUp?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onPointerUpCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onPointerCancel?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onPointerCancelCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onPointerEnter?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onPointerEnterCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onPointerLeave?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onPointerLeaveCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onPointerOver?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onPointerOverCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onPointerOut?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onPointerOutCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onGotPointerCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onGotPointerCaptureCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onLostPointerCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onLostPointerCaptureCapture?: (event: React.PointerEvent<HTMLUListElement>) => void;
        onScroll?: (event: React.UIEvent<HTMLUListElement>) => void;
        onScrollCapture?: (event: React.UIEvent<HTMLUListElement>) => void;
        onWheel?: (event: React.WheelEvent<HTMLUListElement>) => void;
        onWheelCapture?: (event: React.WheelEvent<HTMLUListElement>) => void;
        onAnimationStart?: (event: React.AnimationEvent<HTMLUListElement>) => void;
        onAnimationStartCapture?: (event: React.AnimationEvent<HTMLUListElement>) => void;
        onAnimationEnd?: (event: React.AnimationEvent<HTMLUListElement>) => void;
        onAnimationEndCapture?: (event: React.AnimationEvent<HTMLUListElement>) => void;
        onAnimationIteration?: (event: React.AnimationEvent<HTMLUListElement>) => void;
        onAnimationIterationCapture?: (event: React.AnimationEvent<HTMLUListElement>) => void;
        onTransitionEnd?: (event: React.TransitionEvent<HTMLUListElement>) => void;
        onTransitionEndCapture?: (event: React.TransitionEvent<HTMLUListElement>) => void;
    }): JSX.Element;
} & {
    contextType: any;
    displayName: string;
    getDerivedStateFromProps: React.GetDerivedStateFromProps<any, any>;
    className: string;
    handledProps: string[];
    autoControlledProps: string[];
    getAutoControlledStateFromProps: typeof Tree.getAutoControlledStateFromProps;
    unhandledProps: string[];
    create: ShorthandFactory<TreeProps>;
    _handledPropsCache: string[];
    slotClassNames: TreeSlotClassNames;
    getItemsForRender: (itemsFromProps: ShorthandValue<TreeItemProps & {
        kind?: never;
    }>[]) => any;
};
/**
 * A Tree displays data organised in tree hierarchy.
 *
 * @accessibility
 * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.
 */
export default _default;
