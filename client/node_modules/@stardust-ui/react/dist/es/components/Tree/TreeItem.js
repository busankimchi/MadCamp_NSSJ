import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _invoke from "lodash/invoke";
import { treeItemBehavior } from '@stardust-ui/accessibility';
import * as customPropTypes from '@stardust-ui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { Ref } from '@stardust-ui/react-component-ref';
import TreeTitle from './TreeTitle';
import { UIComponent, childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer, applyAccessibilityKeyHandlers } from '../../lib';
import { withSafeTypeForAs } from '../../types';
import { hasSubtree } from './lib';

var TreeItem =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(TreeItem, _UIComponent);

  function TreeItem() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, TreeItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TreeItem)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      hasSubtree: false,
      treeSize: 0
    });

    _defineProperty(_assertThisInitialized(_this), "actionHandlers", {
      performClick: function performClick(e) {
        e.preventDefault();
        e.stopPropagation();

        _this.handleTitleClick(e);
      },
      focusParent: function focusParent(e) {
        e.preventDefault();
        e.stopPropagation();

        _invoke(_this.props, 'onFocusParent', e, _this.props);
      },
      collapse: function collapse(e) {
        e.preventDefault();
        e.stopPropagation();

        _this.handleTitleClick(e);
      },
      expand: function expand(e) {
        e.preventDefault();
        e.stopPropagation();

        _this.handleTitleClick(e);
      },
      focusFirstChild: function focusFirstChild(e) {
        e.preventDefault();
        e.stopPropagation();

        _invoke(_this.props, 'onFocusFirstChild', e, _this.props);
      },
      expandSiblings: function expandSiblings(e) {
        e.preventDefault();
        e.stopPropagation();

        _invoke(_this.props, 'onSiblingsExpand', e, _this.props);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleTitleClick", function (e) {
      _invoke(_this.props, 'onTitleClick', e, _this.props);
    });

    _defineProperty(_assertThisInitialized(_this), "handleTitleOverrides", function (predefinedProps) {
      return {
        onClick: function onClick(e, titleProps) {
          _this.handleTitleClick(e);

          _invoke(predefinedProps, 'onClick', e, titleProps);
        }
      };
    });

    return _this;
  }

  _createClass(TreeItem, [{
    key: "renderContent",
    value: function renderContent(accessibility) {
      var _this$props = this.props,
          title = _this$props.title,
          renderItemTitle = _this$props.renderItemTitle,
          open = _this$props.open,
          level = _this$props.level,
          index = _this$props.index;
      var _this$state = this.state,
          hasSubtree = _this$state.hasSubtree,
          treeSize = _this$state.treeSize;
      return TreeTitle.create(title, {
        defaultProps: function defaultProps() {
          return {
            className: TreeItem.slotClassNames.title,
            open: open,
            hasSubtree: hasSubtree,
            as: hasSubtree ? 'span' : 'a',
            level: level,
            treeSize: treeSize,
            index: index,
            accessibility: accessibility.childBehaviors ? accessibility.childBehaviors.title : undefined
          };
        },
        render: renderItemTitle,
        overrideProps: this.handleTitleOverrides
      });
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          accessibility = _ref.accessibility,
          classes = _ref.classes,
          unhandledProps = _ref.unhandledProps;
      var _this$props2 = this.props,
          children = _this$props2.children,
          contentRef = _this$props2.contentRef;
      var element = React.createElement(ElementType, _extends({
        className: classes.root
      }, accessibility.attributes.root, rtlTextContainer.getAttributes({
        forElements: [children]
      }), unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)), childrenExist(children) ? children : this.renderContent(accessibility));
      return contentRef ? React.createElement(Ref, {
        innerRef: contentRef
      }, element) : element;
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props) {
      return {
        hasSubtree: hasSubtree(props),
        treeSize: props.siblings.length + 1
      };
    }
  }]);

  return TreeItem;
}(UIComponent);

_defineProperty(TreeItem, "create", void 0);

_defineProperty(TreeItem, "displayName", 'TreeItem');

_defineProperty(TreeItem, "className", 'ui-tree__item');

_defineProperty(TreeItem, "slotClassNames", {
  title: "".concat(TreeItem.className, "__title"),
  subtree: "".concat(TreeItem.className, "__subtree")
});

_defineProperty(TreeItem, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  content: false
}), {
  contentRef: customPropTypes.ref,
  id: PropTypes.string.isRequired,
  index: PropTypes.number,
  items: customPropTypes.collectionShorthand,
  level: PropTypes.number,
  onTitleClick: PropTypes.func,
  onFocusFirstChild: PropTypes.func,
  onFocusParent: PropTypes.func,
  onSiblingsExpand: PropTypes.func,
  open: PropTypes.bool,
  parent: customPropTypes.itemShorthand,
  renderItemTitle: PropTypes.func,
  siblings: customPropTypes.collectionShorthand,
  title: customPropTypes.itemShorthand
}));

_defineProperty(TreeItem, "defaultProps", {
  as: 'div',
  accessibility: treeItemBehavior
});

TreeItem.create = createShorthandFactory({
  Component: TreeItem,
  mappedProp: 'title'
});
/**
 * A TreeItem renders an item of a Tree.
 *
 * @accessibility
 * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.
 */

export default withSafeTypeForAs(TreeItem);