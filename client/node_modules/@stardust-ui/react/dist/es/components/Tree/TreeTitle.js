import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _invoke from "lodash/invoke";
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { UIComponent, childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer, applyAccessibilityKeyHandlers } from '../../lib';
import { treeTitleBehavior } from '@stardust-ui/accessibility';
import { withSafeTypeForAs } from '../../types';

var TreeTitle =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(TreeTitle, _UIComponent);

  function TreeTitle() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, TreeTitle);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TreeTitle)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "actionHandlers", {
      performClick: function performClick(e) {
        e.preventDefault();

        _this.handleClick(e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleClick", function (e) {
      _invoke(_this.props, 'onClick', e, _this.props);
    });

    return _this;
  }

  _createClass(TreeTitle, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          accessibility = _ref.accessibility,
          unhandledProps = _ref.unhandledProps;
      var _this$props = this.props,
          children = _this$props.children,
          content = _this$props.content;
      return React.createElement(ElementType, _extends({
        className: classes.root,
        onClick: this.handleClick
      }, accessibility.attributes.root, rtlTextContainer.getAttributes({
        forElements: [children, content]
      }), unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)), childrenExist(children) ? children : content);
    }
  }]);

  return TreeTitle;
}(UIComponent);

_defineProperty(TreeTitle, "create", void 0);

_defineProperty(TreeTitle, "className", 'ui-tree__title');

_defineProperty(TreeTitle, "displayName", 'TreeTitle');

_defineProperty(TreeTitle, "propTypes", Object.assign({}, commonPropTypes.createCommon(), {
  hasSubtree: PropTypes.bool,
  index: PropTypes.number,
  level: PropTypes.number,
  onClick: PropTypes.func,
  open: PropTypes.bool,
  treeSize: PropTypes.number
}));

_defineProperty(TreeTitle, "defaultProps", {
  as: 'a',
  accessibility: treeTitleBehavior
});

TreeTitle.create = createShorthandFactory({
  Component: TreeTitle,
  mappedProp: 'content'
});
/**
 * A TreeTitle renders a title of TreeItem.
 */

export default withSafeTypeForAs(TreeTitle);