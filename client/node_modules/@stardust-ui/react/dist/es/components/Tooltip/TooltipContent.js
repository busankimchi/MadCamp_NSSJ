import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import * as React from 'react';
import * as PropTypes from 'prop-types';
import * as customPropTypes from '@stardust-ui/react-proptypes';
import { childrenExist, createShorthandFactory, UIComponent, commonPropTypes, rtlTextContainer } from '../../lib';
import { withSafeTypeForAs } from '../../types';

var TooltipContent =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(TooltipContent, _UIComponent);

  function TooltipContent() {
    _classCallCheck(this, TooltipContent);

    return _possibleConstructorReturn(this, _getPrototypeOf(TooltipContent).apply(this, arguments));
  }

  _createClass(TooltipContent, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var accessibility = _ref.accessibility,
          ElementType = _ref.ElementType,
          classes = _ref.classes,
          unhandledProps = _ref.unhandledProps,
          styles = _ref.styles;
      var _this$props = this.props,
          children = _this$props.children,
          content = _this$props.content,
          open = _this$props.open,
          pointing = _this$props.pointing,
          pointerRef = _this$props.pointerRef;
      return React.createElement(ElementType, _extends({
        className: classes.root
      }, rtlTextContainer.getAttributes({
        forElements: [children, content]
      }), accessibility.attributes.root, unhandledProps), open && pointing && React.createElement("div", {
        className: classes.pointer,
        ref: pointerRef
      }), React.createElement("div", {
        className: classes.content
      }, childrenExist(children) ? children : content));
    }
  }]);

  return TooltipContent;
}(UIComponent);

_defineProperty(TooltipContent, "create", void 0);

_defineProperty(TooltipContent, "displayName", 'TooltipContent');

_defineProperty(TooltipContent, "className", 'ui-tooltip__content');

_defineProperty(TooltipContent, "propTypes", Object.assign({}, commonPropTypes.createCommon(), {
  placement: PropTypes.string,
  pointing: PropTypes.bool,
  pointerRef: customPropTypes.ref
}));

TooltipContent.create = createShorthandFactory({
  Component: TooltipContent,
  mappedProp: 'content'
});
/**
 * A TooltipContent contains the content of a Tooltip component.
 */

export default withSafeTypeForAs(TooltipContent);