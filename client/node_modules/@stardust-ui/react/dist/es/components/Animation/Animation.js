import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import * as PropTypes from 'prop-types';
import * as React from 'react';
import cx from 'classnames';
import { UIComponent, childrenExist, commonPropTypes } from '../../lib';
import { withSafeTypeForAs } from '../../types';

var Animation =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(Animation, _UIComponent);

  function Animation() {
    _classCallCheck(this, Animation);

    return _possibleConstructorReturn(this, _getPrototypeOf(Animation).apply(this, arguments));
  }

  _createClass(Animation, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          unhandledProps = _ref.unhandledProps;
      var children = this.props.children;
      var child = childrenExist(children) && React.Children.only(children);
      var result = child ? React.cloneElement(child, {
        className: cx(child.props.className, classes.children)
      }) : '';
      return React.createElement(ElementType, _extends({
        className: classes.root
      }, unhandledProps), result);
    }
  }]);

  return Animation;
}(UIComponent);
/**
 * An Animation provides animation effects to rendered elements.
 */


_defineProperty(Animation, "create", void 0);

_defineProperty(Animation, "className", 'ui-animation');

_defineProperty(Animation, "displayName", 'Animation');

_defineProperty(Animation, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  accessibility: false,
  animated: false,
  content: false,
  children: 'element'
}), {
  name: PropTypes.string,
  delay: PropTypes.string,
  direction: PropTypes.string,
  duration: PropTypes.string,
  fillMode: PropTypes.string,
  iterationCount: PropTypes.string,
  keyframeParams: PropTypes.object,
  playState: PropTypes.string,
  timingFunction: PropTypes.string
}));

export default withSafeTypeForAs(Animation);