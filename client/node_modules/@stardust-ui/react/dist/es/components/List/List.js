import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _pick from "lodash/pick";
import _map from "lodash/map";
import _invoke from "lodash/invoke";
import { listBehavior } from '@stardust-ui/accessibility';
import * as customPropTypes from '@stardust-ui/react-proptypes';
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { childrenExist, AutoControlledComponent, commonPropTypes, rtlTextContainer, applyAccessibilityKeyHandlers } from '../../lib';
import ListItem from './ListItem';
import { withSafeTypeForAs } from '../../types';

var List =
/*#__PURE__*/
function (_AutoControlledCompon) {
  _inherits(List, _AutoControlledCompon);

  function List() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, List);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(List)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "handleItemOverrides", function (predefinedProps) {
      var selectable = _this.props.selectable;
      return {
        onClick: function onClick(e, itemProps) {
          _invoke(predefinedProps, 'onClick', e, itemProps);

          if (selectable) {
            _this.setState({
              selectedIndex: itemProps.index
            });

            _invoke(_this.props, 'onSelectedIndexChange', e, Object.assign({}, _this.props, {
              selectedIndex: itemProps.index
            }));
          }
        }
      };
    });

    return _this;
  }

  _createClass(List, [{
    key: "getInitialAutoControlledState",
    value: function getInitialAutoControlledState() {
      return {
        selectedIndex: -1
      };
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          accessibility = _ref.accessibility,
          unhandledProps = _ref.unhandledProps;
      var children = this.props.children;
      return React.createElement(ElementType, _extends({}, accessibility.attributes.root, rtlTextContainer.getAttributes({
        forElements: [children]
      }), unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps), {
        className: classes.root
      }), childrenExist(children) ? children : this.renderItems());
    }
  }, {
    key: "renderItems",
    value: function renderItems() {
      var _this2 = this;

      var _this$props = this.props,
          items = _this$props.items,
          selectable = _this$props.selectable;
      var selectedIndex = this.state.selectedIndex;
      return _map(items, function (item, index) {
        var maybeSelectableItemProps = {};

        if (selectable) {
          maybeSelectableItemProps.selected = index === selectedIndex;
        }

        var itemProps = function itemProps() {
          return Object.assign({
            className: List.slotClassNames.item
          }, _pick(_this2.props, List.itemProps), maybeSelectableItemProps, {
            index: index
          });
        };

        return ListItem.create(item, {
          defaultProps: itemProps,
          overrideProps: _this2.handleItemOverrides
        });
      });
    }
  }]);

  return List;
}(AutoControlledComponent);
/**
 * A List displays a group of related sequential items.
 *
 * @accessibility
 * List may follow one of the following accessibility semantics:
 * - Static non-navigable list. Implements [ARIA list](https://www.w3.org/TR/wai-aria-1.1/#list) role.
 * - Selectable list: allows the user to select item from a list of choices. Implements [ARIA Listbox](https://www.w3.org/TR/wai-aria-practices-1.1/#Listbox) design pattern.
 */


_defineProperty(List, "displayName", 'List');

_defineProperty(List, "className", 'ui-list');

_defineProperty(List, "slotClassNames", {
  item: "".concat(List.className, "__item")
});

_defineProperty(List, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  content: false
}), {
  debug: PropTypes.bool,
  items: customPropTypes.collectionShorthand,
  selectable: customPropTypes.every([customPropTypes.disallow(['navigable']), PropTypes.bool]),
  navigable: customPropTypes.every([customPropTypes.disallow(['selectable']), PropTypes.bool]),
  truncateContent: PropTypes.bool,
  truncateHeader: PropTypes.bool,
  selectedIndex: PropTypes.number,
  defaultSelectedIndex: PropTypes.number,
  onSelectedIndexChange: PropTypes.func,
  horizontal: PropTypes.bool
}));

_defineProperty(List, "defaultProps", {
  as: 'ul',
  accessibility: listBehavior
});

_defineProperty(List, "autoControlledProps", ['selectedIndex']);

_defineProperty(List, "Item", ListItem);

_defineProperty(List, "itemProps", ['debug', 'selectable', 'navigable', 'truncateContent', 'truncateHeader', 'variables']);

export default withSafeTypeForAs(List);