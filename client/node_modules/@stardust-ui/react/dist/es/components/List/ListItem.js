import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _invoke from "lodash/invoke";
import { listItemBehavior } from '@stardust-ui/accessibility';
import cx from 'classnames';
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { createShorthandFactory, UIComponent, commonPropTypes, applyAccessibilityKeyHandlers } from '../../lib';
import { withSafeTypeForAs } from '../../types';
import Box from '../Box/Box';

var ListItem =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(ListItem, _UIComponent);

  function ListItem() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ListItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ListItem)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "actionHandlers", {
      performClick: function performClick(event) {
        _this.handleClick(event);

        event.preventDefault();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleClick", function (e) {
      _invoke(_this.props, 'onClick', e, _this.props);
    });

    return _this;
  }

  _createClass(ListItem, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          accessibility = _ref.accessibility,
          unhandledProps = _ref.unhandledProps,
          styles = _ref.styles;
      var _this$props = this.props,
          endMedia = _this$props.endMedia,
          media = _this$props.media,
          content = _this$props.content,
          contentMedia = _this$props.contentMedia,
          header = _this$props.header,
          headerMedia = _this$props.headerMedia;
      var contentElement = Box.create(content, {
        defaultProps: function defaultProps() {
          return {
            className: ListItem.slotClassNames.content,
            styles: styles.content
          };
        }
      });
      var contentMediaElement = Box.create(contentMedia, {
        defaultProps: function defaultProps() {
          return {
            className: ListItem.slotClassNames.contentMedia,
            styles: styles.contentMedia
          };
        }
      });
      var headerElement = Box.create(header, {
        defaultProps: function defaultProps() {
          return {
            className: ListItem.slotClassNames.header,
            styles: styles.header
          };
        }
      });
      var headerMediaElement = Box.create(headerMedia, {
        defaultProps: function defaultProps() {
          return {
            className: ListItem.slotClassNames.headerMedia,
            styles: styles.headerMedia
          };
        }
      });
      var endMediaElement = Box.create(endMedia, {
        defaultProps: function defaultProps() {
          return {
            className: ListItem.slotClassNames.endMedia,
            styles: styles.endMedia
          };
        }
      });
      var mediaElement = Box.create(media, {
        defaultProps: function defaultProps() {
          return {
            className: ListItem.slotClassNames.media,
            styles: styles.media
          };
        }
      });
      return React.createElement(ElementType, _extends({
        className: classes.root,
        onClick: this.handleClick
      }, accessibility.attributes.root, unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)), mediaElement, React.createElement("div", {
        className: cx(ListItem.slotClassNames.main, classes.main)
      }, (headerElement || headerMediaElement) && React.createElement("div", {
        className: cx(ListItem.slotClassNames.headerWrapper, classes.headerWrapper)
      }, headerElement, headerMediaElement), (contentElement || contentMediaElement) && React.createElement("div", {
        className: cx(ListItem.slotClassNames.contentWrapper, classes.contentWrapper)
      }, contentElement, contentMediaElement)), endMediaElement);
    }
  }]);

  return ListItem;
}(UIComponent);

_defineProperty(ListItem, "create", void 0);

_defineProperty(ListItem, "displayName", 'ListItem');

_defineProperty(ListItem, "className", 'ui-list__item');

_defineProperty(ListItem, "slotClassNames", void 0);

_defineProperty(ListItem, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  content: false
}), {
  contentMedia: PropTypes.any,
  content: PropTypes.any,
  debug: PropTypes.bool,
  header: PropTypes.any,
  endMedia: PropTypes.any,
  headerMedia: PropTypes.any,
  important: PropTypes.bool,
  media: PropTypes.any,
  selectable: PropTypes.bool,
  navigable: PropTypes.bool,
  index: PropTypes.number,
  selected: PropTypes.bool,
  truncateContent: PropTypes.bool,
  truncateHeader: PropTypes.bool,
  onClick: PropTypes.func
}));

_defineProperty(ListItem, "defaultProps", {
  as: 'li',
  accessibility: listItemBehavior
});

ListItem.create = createShorthandFactory({
  Component: ListItem,
  mappedProp: 'content'
});
ListItem.slotClassNames = {
  header: "".concat(ListItem.className, "__header"),
  headerMedia: "".concat(ListItem.className, "__headerMedia"),
  headerWrapper: "".concat(ListItem.className, "__headerWrapper"),
  main: "".concat(ListItem.className, "__main"),
  content: "".concat(ListItem.className, "__content"),
  contentMedia: "".concat(ListItem.className, "__contentMedia"),
  contentWrapper: "".concat(ListItem.className, "__contentWrapper"),
  media: "".concat(ListItem.className, "__media"),
  endMedia: "".concat(ListItem.className, "__endMedia")
  /**
   * A ListItem contains a single piece of content within a List.
   */

};
export default withSafeTypeForAs(ListItem);