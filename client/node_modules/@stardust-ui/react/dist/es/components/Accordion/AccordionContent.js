import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _invoke from "lodash/invoke";
import { accordionContentBehavior } from '@stardust-ui/accessibility';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { childrenExist, createShorthandFactory, UIComponent, commonPropTypes, rtlTextContainer } from '../../lib';
import { withSafeTypeForAs } from '../../types';

var AccordionContent =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(AccordionContent, _UIComponent);

  function AccordionContent() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, AccordionContent);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AccordionContent)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "handleClick", function (e) {
      _invoke(_this.props, 'onClick', e, _this.props);
    });

    return _this;
  }

  _createClass(AccordionContent, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          unhandledProps = _ref.unhandledProps,
          accessibility = _ref.accessibility;
      var _this$props = this.props,
          children = _this$props.children,
          content = _this$props.content;
      return React.createElement(ElementType, _extends({
        onClick: this.handleClick
      }, rtlTextContainer.getAttributes({
        forElements: [children, content]
      }), accessibility.attributes.root, unhandledProps, {
        className: classes.root
      }), childrenExist(children) ? children : content);
    }
  }]);

  return AccordionContent;
}(UIComponent);

_defineProperty(AccordionContent, "displayName", 'AccordionContent');

_defineProperty(AccordionContent, "create", void 0);

_defineProperty(AccordionContent, "className", 'ui-accordion__content');

_defineProperty(AccordionContent, "propTypes", Object.assign({}, commonPropTypes.createCommon(), {
  accordionTitleId: PropTypes.string,
  active: PropTypes.bool,
  onClick: PropTypes.func
}));

_defineProperty(AccordionContent, "defaultProps", {
  accessibility: accordionContentBehavior,
  as: 'dd'
});

AccordionContent.create = createShorthandFactory({
  Component: AccordionContent,
  mappedProp: 'content'
});
/**
 * An AccordionContent displays content hosted in an Accordion.
 */

export default withSafeTypeForAs(AccordionContent);