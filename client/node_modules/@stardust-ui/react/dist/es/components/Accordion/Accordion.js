import _extends from "@babel/runtime/helpers/esm/extends";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _each from "lodash/each";
import _invoke from "lodash/invoke";
import _without from "lodash/without";
import _includes from "lodash/includes";
import _uniqueId from "lodash/uniqueId";
import { accordionBehavior } from '@stardust-ui/accessibility';
import * as customPropTypes from '@stardust-ui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { AutoControlledComponent, childrenExist, commonPropTypes, rtlTextContainer, applyAccessibilityKeyHandlers } from '../../lib';
import AccordionTitle from './AccordionTitle';
import AccordionContent from './AccordionContent';
import { withSafeTypeForAs } from '../../types';
import { ContainerFocusHandler } from '../../lib/accessibility/FocusHandling/FocusContainer';

var Accordion =
/*#__PURE__*/
function (_AutoControlledCompon) {
  _inherits(Accordion, _AutoControlledCompon);

  function Accordion(props, context) {
    var _this;

    _classCallCheck(this, Accordion);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Accordion).call(this, props, context));

    _defineProperty(_assertThisInitialized(_this), "focusHandler", null);

    _defineProperty(_assertThisInitialized(_this), "itemRefs", []);

    _defineProperty(_assertThisInitialized(_this), "defaultAccordionTitleId", _uniqueId('accordion-title-'));

    _defineProperty(_assertThisInitialized(_this), "defaultAccordionContentId", _uniqueId('accordion-content-'));

    _defineProperty(_assertThisInitialized(_this), "actionHandlers", {
      moveNext: function moveNext(e) {
        e.preventDefault();

        _this.focusHandler.moveNext();
      },
      movePrevious: function movePrevious(e) {
        e.preventDefault();

        _this.focusHandler.movePrevious();
      },
      moveFirst: function moveFirst(e) {
        e.preventDefault();

        _this.focusHandler.moveFirst();
      },
      moveLast: function moveLast(e) {
        e.preventDefault();

        _this.focusHandler.moveLast();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleNavigationFocus", function (index) {
      _this.setState({
        focusedIndex: index
      }, function () {
        var targetComponent = _this.itemRefs[index] && _this.itemRefs[index].current;
        targetComponent && targetComponent.focus();
      });
    });

    _defineProperty(_assertThisInitialized(_this), "getNavigationItemsSize", function () {
      return _this.props.panels.length;
    });

    _defineProperty(_assertThisInitialized(_this), "computeNewIndex", function (index) {
      var activeIndex = _this.state.activeIndex;
      var exclusive = _this.props.exclusive;

      if (!_this.isIndexActionable(index)) {
        return activeIndex;
      }

      if (exclusive) return index === activeIndex ? -1 : index; // check to see if index is in array, and remove it, if not then add it

      return _includes(activeIndex, index) ? _without(activeIndex, index) : [].concat(_toConsumableArray(activeIndex), [index]);
    });

    _defineProperty(_assertThisInitialized(_this), "handleTitleOverrides", function (predefinedProps) {
      return {
        onClick: function onClick(e, titleProps) {
          var index = titleProps.index;

          var activeIndex = _this.computeNewIndex(index);

          _this.setState({
            activeIndex: activeIndex,
            focusedIndex: index
          });

          _invoke(predefinedProps, 'onClick', e, titleProps);

          _invoke(_this.props, 'onTitleClick', e, titleProps);
        },
        onFocus: function onFocus(e, titleProps) {
          _invoke(predefinedProps, 'onFocus', e, titleProps);

          _this.setState({
            focusedIndex: predefinedProps.index
          });
        }
      };
    });

    _defineProperty(_assertThisInitialized(_this), "isIndexActive", function (index) {
      var exclusive = _this.props.exclusive;
      var activeIndex = _this.state.activeIndex;
      return exclusive ? activeIndex === index : _includes(activeIndex, index);
    });

    _defineProperty(_assertThisInitialized(_this), "isIndexActionable", function (index) {
      if (!_this.isIndexActive(index)) {
        return true;
      }

      var activeIndex = _this.state.activeIndex;
      var _this$props = _this.props,
          expanded = _this$props.expanded,
          exclusive = _this$props.exclusive;
      return !expanded || !exclusive && activeIndex.length > 1;
    });

    _defineProperty(_assertThisInitialized(_this), "renderPanels", function () {
      var children = [];
      var _this$props2 = _this.props,
          panels = _this$props2.panels,
          renderPanelContent = _this$props2.renderPanelContent,
          renderPanelTitle = _this$props2.renderPanelTitle;
      var focusedIndex = _this.state.focusedIndex;
      _this.itemRefs = [];

      _this.focusHandler.syncFocusedIndex(focusedIndex);

      _each(panels, function (panel, index) {
        var content = panel.content,
            title = panel.title;

        var active = _this.isIndexActive(index);

        var canBeCollapsed = _this.isIndexActionable(index);

        var contentRef = React.createRef();
        var titleId = title['id'] || "".concat(_this.defaultAccordionTitleId).concat(index);
        var contentId = content['id'] || "".concat(_this.defaultAccordionContentId).concat(index);
        _this.itemRefs[index] = contentRef;
        children.push(AccordionTitle.create(title, {
          defaultProps: function defaultProps() {
            return {
              className: Accordion.slotClassNames.title,
              active: active,
              index: index,
              contentRef: contentRef,
              canBeCollapsed: canBeCollapsed,
              id: titleId,
              accordionContentId: contentId
            };
          },
          overrideProps: _this.handleTitleOverrides,
          render: renderPanelTitle
        }));
        children.push(AccordionContent.create(content, {
          defaultProps: function defaultProps() {
            return {
              className: Accordion.slotClassNames.content,
              active: active,
              id: contentId,
              accordionTitleId: titleId
            };
          },
          render: renderPanelContent
        }));
      });

      return children;
    });

    _this.focusHandler = new ContainerFocusHandler(_this.getNavigationItemsSize, _this.handleNavigationFocus, true);
    return _this;
  }

  _createClass(Accordion, [{
    key: "getInitialAutoControlledState",
    value: function getInitialAutoControlledState(_ref) {
      var expanded = _ref.expanded,
          exclusive = _ref.exclusive;
      var alwaysActiveIndex = expanded ? 0 : -1;
      return {
        activeIndex: exclusive ? alwaysActiveIndex : [alwaysActiveIndex]
      };
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(_ref2) {
      var ElementType = _ref2.ElementType,
          classes = _ref2.classes,
          accessibility = _ref2.accessibility,
          unhandledProps = _ref2.unhandledProps;
      var children = this.props.children;
      return React.createElement(ElementType, _extends({}, accessibility.attributes.root, rtlTextContainer.getAttributes({
        forElements: [children]
      }), unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps), {
        className: classes.root
      }), childrenExist(children) ? children : this.renderPanels());
    }
  }]);

  return Accordion;
}(AutoControlledComponent);
/**
 * An Accordion represents stacked set of content sections, with action elements to toggle the display of these sections.
 *
 * @accessibility
 * Implements [ARIA Accordion](https://www.w3.org/TR/wai-aria-practices-1.1/#accordion) design pattern (keyboard navigation not yet supported).
 */


_defineProperty(Accordion, "displayName", 'Accordion');

_defineProperty(Accordion, "className", 'ui-accordion');

_defineProperty(Accordion, "slotClassNames", {
  content: "".concat(Accordion.className, "__content"),
  title: "".concat(Accordion.className, "__title")
});

_defineProperty(Accordion, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  content: false
}), {
  activeIndex: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number])]),
  defaultActiveIndex: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number])]),
  exclusive: PropTypes.bool,
  expanded: PropTypes.bool,
  onTitleClick: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.func]),
  panels: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.arrayOf(PropTypes.shape({
    content: customPropTypes.itemShorthand,
    title: customPropTypes.itemShorthand
  }))]),
  renderPanelTitle: PropTypes.func,
  renderPanelContent: PropTypes.func
}));

_defineProperty(Accordion, "defaultProps", {
  accessibility: accordionBehavior,
  as: 'dl'
});

_defineProperty(Accordion, "autoControlledProps", ['activeIndex']);

_defineProperty(Accordion, "Title", AccordionTitle);

_defineProperty(Accordion, "Content", AccordionContent);

export default withSafeTypeForAs(Accordion);