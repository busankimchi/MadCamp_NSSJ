import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _map from "lodash/map";
import _isNil from "lodash/isNil";
import * as customPropTypes from '@stardust-ui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { withSafeTypeForAs } from '../../types';
import { UIComponent, childrenExist, commonPropTypes, rtlTextContainer, createShorthandFactory } from '../../lib';
import Button from './Button';

var ButtonGroup =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(ButtonGroup, _UIComponent);

  function ButtonGroup() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ButtonGroup);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ButtonGroup)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "getStyleForButtonIndex", function (styles, isFirst, isLast) {
      var resultStyles = {};

      if (isFirst) {
        resultStyles = styles.firstButton;
      }

      if (isLast) {
        resultStyles = Object.assign({}, resultStyles, styles.lastButton);
      }

      if (!isFirst && !isLast) {
        resultStyles = styles.middleButton;
      }

      return resultStyles;
    });

    return _this;
  }

  _createClass(ButtonGroup, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var _this2 = this;

      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          accessibility = _ref.accessibility,
          styles = _ref.styles,
          unhandledProps = _ref.unhandledProps;
      var _this$props = this.props,
          children = _this$props.children,
          buttons = _this$props.buttons,
          circular = _this$props.circular,
          content = _this$props.content;

      if (_isNil(buttons)) {
        return React.createElement(ElementType, _extends({}, accessibility.attributes.root, rtlTextContainer.getAttributes({
          forElements: [children, content]
        }), unhandledProps, {
          className: classes.root
        }), childrenExist(children) ? children : content);
      }

      return React.createElement(ElementType, _extends({}, unhandledProps, {
        className: classes.root
      }), _map(buttons, function (button, idx) {
        return Button.create(button, {
          defaultProps: function defaultProps() {
            return {
              circular: circular,
              styles: _this2.getStyleForButtonIndex(styles, idx === 0, idx === buttons.length - 1)
            };
          }
        });
      }));
    }
  }]);

  return ButtonGroup;
}(UIComponent);

_defineProperty(ButtonGroup, "create", void 0);

_defineProperty(ButtonGroup, "displayName", 'ButtonGroup');

_defineProperty(ButtonGroup, "className", 'ui-buttons');

_defineProperty(ButtonGroup, "propTypes", Object.assign({}, commonPropTypes.createCommon(), {
  buttons: customPropTypes.collectionShorthand,
  circular: PropTypes.bool
}));

_defineProperty(ButtonGroup, "defaultProps", {
  as: 'div'
});

ButtonGroup.create = createShorthandFactory({
  Component: ButtonGroup,
  mappedProp: 'content',
  mappedArrayProp: 'buttons'
});
/**
 * A ButtonGroup represents multiple related actions as a group.
 */

export default withSafeTypeForAs(ButtonGroup);