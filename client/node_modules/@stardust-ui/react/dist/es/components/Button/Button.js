import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _invoke from "lodash/invoke";
import { buttonBehavior } from '@stardust-ui/accessibility';
import * as customPropTypes from '@stardust-ui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { UIComponent, childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer, applyAccessibilityKeyHandlers } from '../../lib';
import Icon from '../Icon/Icon';
import Box from '../Box/Box';
import Loader from '../Loader/Loader';
import { withSafeTypeForAs } from '../../types';
import ButtonGroup from './ButtonGroup';

var Button =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(Button, _UIComponent);

  function Button() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Button);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Button)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "actionHandlers", {
      performClick: function performClick(event) {
        event.preventDefault();

        _this.handleClick(event);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "renderIcon", function (variables, styles) {
      var _this$props = _this.props,
          icon = _this$props.icon,
          iconPosition = _this$props.iconPosition,
          content = _this$props.content;
      return Icon.create(icon, {
        defaultProps: function defaultProps() {
          return {
            styles: styles.icon,
            xSpacing: !content ? 'none' : iconPosition === 'after' ? 'before' : 'after',
            variables: variables.icon
          };
        }
      });
    });

    _defineProperty(_assertThisInitialized(_this), "renderLoader", function (variables, styles) {
      var loader = _this.props.loader;
      return Loader.create(loader || {}, {
        defaultProps: function defaultProps() {
          return {
            role: undefined,
            styles: styles.loader
          };
        }
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleClick", function (e) {
      var disabled = _this.props.disabled;

      if (disabled) {
        e.preventDefault();
        return;
      }

      _invoke(_this.props, 'onClick', e, _this.props);
    });

    _defineProperty(_assertThisInitialized(_this), "handleFocus", function (e) {
      _invoke(_this.props, 'onFocus', e, _this.props);
    });

    return _this;
  }

  _createClass(Button, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          accessibility = _ref.accessibility,
          variables = _ref.variables,
          styles = _ref.styles,
          unhandledProps = _ref.unhandledProps;
      var _this$props2 = this.props,
          children = _this$props2.children,
          content = _this$props2.content,
          disabled = _this$props2.disabled,
          iconPosition = _this$props2.iconPosition,
          loading = _this$props2.loading;
      var hasChildren = childrenExist(children);
      return React.createElement(ElementType, _extends({
        className: classes.root,
        disabled: disabled,
        onClick: this.handleClick,
        onFocus: this.handleFocus
      }, accessibility.attributes.root, rtlTextContainer.getAttributes({
        forElements: [children]
      }), unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)), hasChildren && children, !hasChildren && loading && this.renderLoader(variables, styles), !hasChildren && iconPosition !== 'after' && this.renderIcon(variables, styles), Box.create(!hasChildren && content, {
        defaultProps: function defaultProps() {
          return {
            as: 'span',
            styles: styles.content
          };
        }
      }), !hasChildren && iconPosition === 'after' && this.renderIcon(variables, styles));
    }
  }]);

  return Button;
}(UIComponent);

_defineProperty(Button, "create", void 0);

_defineProperty(Button, "displayName", 'Button');

_defineProperty(Button, "className", 'ui-button');

_defineProperty(Button, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  content: 'shorthand'
}), {
  circular: PropTypes.bool,
  disabled: PropTypes.bool,
  fluid: PropTypes.bool,
  icon: customPropTypes.itemShorthandWithoutJSX,
  iconOnly: PropTypes.bool,
  iconPosition: PropTypes.oneOf(['before', 'after']),
  loader: customPropTypes.itemShorthandWithoutJSX,
  loading: PropTypes.bool,
  onClick: PropTypes.func,
  onFocus: PropTypes.func,
  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),
  text: PropTypes.bool,
  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),
  size: customPropTypes.size
}));

_defineProperty(Button, "defaultProps", {
  as: 'button',
  accessibility: buttonBehavior,
  size: 'medium'
});

_defineProperty(Button, "Group", ButtonGroup);

Button.create = createShorthandFactory({
  Component: Button,
  mappedProp: 'content'
});
/**
 * A Button enables users to take an action, such as submitting a form, opening a dialog, etc.
 *
 * @accessibility
 * Implements [ARIA Button](https://www.w3.org/TR/wai-aria-practices-1.1/#button) design pattern.
 */

export default withSafeTypeForAs(Button);