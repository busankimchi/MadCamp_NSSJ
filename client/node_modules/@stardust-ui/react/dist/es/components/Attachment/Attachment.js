import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _invoke from "lodash/invoke";
import _isNil from "lodash/isNil";
import { attachmentBehavior } from '@stardust-ui/accessibility';
import * as customPropTypes from '@stardust-ui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { withSafeTypeForAs } from '../../types';
import { UIComponent, createShorthandFactory, commonPropTypes, applyAccessibilityKeyHandlers } from '../../lib';
import Icon from '../Icon/Icon';
import Button from '../Button/Button';
import Text from '../Text/Text';

var Attachment =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(Attachment, _UIComponent);

  function Attachment() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Attachment);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Attachment)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "actionHandlers", {
      performClick: function performClick(event) {
        return _this.performClick(event);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "performClick", function (e) {
      if (e.currentTarget === e.target) {
        e.stopPropagation();

        _this.handleClick(e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleClick", function (e) {
      var disabled = _this.props.disabled;

      if (disabled) {
        e.preventDefault();
        return;
      }

      _invoke(_this.props, 'onClick', e, _this.props);
    });

    return _this;
  }

  _createClass(Attachment, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          unhandledProps = _ref.unhandledProps,
          styles = _ref.styles,
          variables = _ref.variables,
          accessibility = _ref.accessibility;
      var _this$props = this.props,
          header = _this$props.header,
          description = _this$props.description,
          icon = _this$props.icon,
          action = _this$props.action,
          progress = _this$props.progress;
      return React.createElement(ElementType, _extends({
        className: classes.root,
        onClick: this.handleClick
      }, accessibility.attributes.root, unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)), icon && Icon.create(icon, {
        defaultProps: function defaultProps() {
          return {
            size: 'larger',
            styles: styles.icon
          };
        }
      }), (header || description) && React.createElement("div", {
        className: classes.content
      }, Text.create(header, {
        defaultProps: function defaultProps() {
          return {
            styles: styles.header
          };
        }
      }), Text.create(description, {
        defaultProps: function defaultProps() {
          return {
            styles: styles.description
          };
        }
      })), action && Button.create(action, {
        defaultProps: function defaultProps() {
          return {
            iconOnly: true,
            text: true,
            styles: styles.action,
            className: Attachment.slotClassNames.action
          };
        }
      }), !_isNil(progress) && React.createElement("div", {
        className: classes.progress
      }));
    }
  }]);

  return Attachment;
}(UIComponent);

_defineProperty(Attachment, "create", void 0);

_defineProperty(Attachment, "className", 'ui-attachment');

_defineProperty(Attachment, "displayName", 'Attachment');

_defineProperty(Attachment, "slotClassNames", void 0);

_defineProperty(Attachment, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  content: false
}), {
  action: customPropTypes.itemShorthand,
  actionable: PropTypes.bool,
  description: customPropTypes.itemShorthand,
  header: customPropTypes.itemShorthand,
  icon: customPropTypes.itemShorthandWithoutJSX,
  progress: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
}));

_defineProperty(Attachment, "defaultProps", {
  accessibility: attachmentBehavior
});

Attachment.create = createShorthandFactory({
  Component: Attachment,
  mappedProp: 'header'
});
Attachment.slotClassNames = {
  action: "".concat(Attachment.className, "__action")
  /**
   * An Attachment represents a file or media attachment, which may contain some metadata or actions.
   */

};
export default withSafeTypeForAs(Attachment);