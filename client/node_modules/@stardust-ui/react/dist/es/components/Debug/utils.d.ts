/**
 * Check whether source includes target ignoring case.
 * @param {string} source
 * @param {string} target
 * @returns {boolean}
 */
export declare const includes: (source: string, target: string) => boolean;
/**
 * Checks whether the key or the value of data[key] contains the search string.
 * @param {object} data
 * @param {string} key
 * @param {string} search
 * @returns {boolean}
 */
export declare const find: (data: object, key: string, search: string) => boolean;
/**
 * Checks if the data[key] is primitive and override in the overrides object.
 * @param {object} data
 * @param {string} key
 * @param {object} overrides
 * @returns {boolean}
 */
export declare const isOverridden: (data: object, key: string, overrides: object) => boolean;
/**
 * Filters the data for the value string (if it appears in the key or value). Considers nested objects.
 * @param {object} data
 * @param {string} value
 * @returns {any}
 */
export declare const filter: (data: object, value: string) => {};
/**
 * Returns array of values that matches the predicate. Considers nested objects.
 * @param value
 * @param {(string) => boolean} predicate
 * @returns {string[]}
 */
export declare const getValues: (value: any, predicate: (string: any) => boolean) => string[];
/**
 * Removes null values from an object. Considers nested objects.
 * @param o
 * @returns {any}
 */
export declare const removeNulls: (o: any) => any;
