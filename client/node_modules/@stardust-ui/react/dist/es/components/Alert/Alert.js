import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _invoke from "lodash/invoke";
import _uniqueId from "lodash/uniqueId";
import { alertBehavior } from '@stardust-ui/accessibility';
import * as customPropTypes from '@stardust-ui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { AutoControlledComponent, commonPropTypes, childrenExist, rtlTextContainer } from '../../lib';
import { withSafeTypeForAs } from '../../types';
import Box from '../Box/Box';
import Button from '../Button/Button';
import Icon from '../Icon/Icon';
import Text from '../Text/Text';
import ButtonGroup from '../Button/ButtonGroup';

var Alert =
/*#__PURE__*/
function (_AutoControlledCompon) {
  _inherits(Alert, _AutoControlledCompon);

  function Alert() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Alert);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Alert)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "handleDismissOverrides", function (predefinedProps) {
      return {
        onClick: function onClick(e, buttonProps) {
          _invoke(predefinedProps, 'onClick', e, buttonProps);

          _invoke(_this.props, 'onDismiss', e, Object.assign({}, _this.props, {
            visible: false
          }));

          _this.setState({
            visible: false
          });
        }
      };
    });

    _defineProperty(_assertThisInitialized(_this), "handleFocus", function (e) {
      _invoke(_this.props, 'onFocus', e, _this.props);
    });

    _defineProperty(_assertThisInitialized(_this), "renderContent", function (_ref) {
      var styles = _ref.styles,
          accessibility = _ref.accessibility;
      var _this$props = _this.props,
          actions = _this$props.actions,
          dismissible = _this$props.dismissible,
          dismissAction = _this$props.dismissAction,
          content = _this$props.content,
          icon = _this$props.icon,
          header = _this$props.header,
          body = _this$props.body;
      var bodyContent = React.createElement(React.Fragment, null, Text.create(header, {
        defaultProps: function defaultProps() {
          return Object.assign({
            className: Alert.slotClassNames.header,
            styles: styles.header
          }, accessibility.attributes.header);
        }
      }), Box.create(content, {
        defaultProps: function defaultProps() {
          return Object.assign({
            className: Alert.slotClassNames.content,
            styles: styles.content
          }, accessibility.attributes.content);
        }
      }));
      return React.createElement(React.Fragment, null, Icon.create(icon, {
        defaultProps: function defaultProps() {
          return {
            className: Alert.slotClassNames.icon,
            styles: styles.icon
          };
        }
      }), Box.create(body, {
        defaultProps: function defaultProps() {
          return Object.assign({
            id: _this.state.bodyId,
            className: Alert.slotClassNames.body
          }, accessibility.attributes.body, {
            styles: styles.body
          });
        },
        overrideProps: {
          children: bodyContent
        }
      }), ButtonGroup.create(actions, {
        defaultProps: function defaultProps() {
          return {
            className: Alert.slotClassNames.actions,
            styles: styles.actions
          };
        }
      }), dismissible && Button.create(dismissAction, {
        defaultProps: function defaultProps() {
          return Object.assign({
            iconOnly: true,
            text: true,
            className: Alert.slotClassNames.dismissAction,
            styles: styles.dismissAction
          }, accessibility.attributes.dismissAction);
        },
        overrideProps: _this.handleDismissOverrides
      }));
    });

    return _this;
  }

  _createClass(Alert, [{
    key: "getInitialAutoControlledState",
    value: function getInitialAutoControlledState() {
      return {
        visible: true,
        bodyId: _uniqueId('alert-body-')
      };
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(config) {
      var accessibility = config.accessibility,
          classes = config.classes,
          ElementType = config.ElementType,
          unhandledProps = config.unhandledProps;
      var children = this.props.children;
      return React.createElement(ElementType, _extends({
        className: classes.root,
        onFocus: this.handleFocus
      }, accessibility.attributes.root, rtlTextContainer.getAttributes({
        forElements: [children]
      }), unhandledProps), childrenExist(children) ? children : this.renderContent(config));
    }
  }]);

  return Alert;
}(AutoControlledComponent);
/**
 * An Alert displays a brief, important message to attract a user's attention without interrupting their current task.
 *
 * @accessibility
 * Implements [ARIA Alert](https://www.w3.org/TR/wai-aria-practices-1.1/#alert) design pattern.
 */


_defineProperty(Alert, "displayName", 'Alert');

_defineProperty(Alert, "className", 'ui-alert');

_defineProperty(Alert, "slotClassNames", {
  content: "".concat(Alert.className, "__content"),
  actions: "".concat(Alert.className, "__actions"),
  dismissAction: "".concat(Alert.className, "__dismissAction"),
  icon: "".concat(Alert.className, "__icon"),
  header: "".concat(Alert.className, "__header"),
  body: "".concat(Alert.className, "__body")
});

_defineProperty(Alert, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  content: 'shorthand'
}), {
  actions: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),
  icon: customPropTypes.itemShorthandWithoutJSX,
  header: customPropTypes.itemShorthand,
  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),
  fitted: PropTypes.bool,
  danger: PropTypes.bool,
  defaultVisible: PropTypes.bool,
  dismissible: PropTypes.bool,
  dismissAction: customPropTypes.itemShorthand,
  info: PropTypes.bool,
  onDismiss: PropTypes.func,
  onFocus: PropTypes.func,
  success: PropTypes.bool,
  visible: PropTypes.bool,
  warning: PropTypes.bool,
  body: customPropTypes.itemShorthand
}));

_defineProperty(Alert, "defaultProps", {
  accessibility: alertBehavior,
  dismissAction: {
    icon: 'close'
  },
  body: {}
});

_defineProperty(Alert, "autoControlledProps", ['visible']);

export default withSafeTypeForAs(Alert);