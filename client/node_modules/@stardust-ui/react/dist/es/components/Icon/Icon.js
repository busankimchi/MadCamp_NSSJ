import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { iconBehavior } from '@stardust-ui/accessibility';
import { callable } from '@stardust-ui/react-bindings';
import * as customPropTypes from '@stardust-ui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { UIComponent, createShorthandFactory, commonPropTypes } from '../../lib';
import { withSafeTypeForAs } from '../../types';

var Icon =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(Icon, _UIComponent);

  function Icon() {
    _classCallCheck(this, Icon);

    return _possibleConstructorReturn(this, _getPrototypeOf(Icon).apply(this, arguments));
  }

  _createClass(Icon, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          unhandledProps = _ref.unhandledProps,
          accessibility = _ref.accessibility,
          theme = _ref.theme,
          rtl = _ref.rtl,
          styles = _ref.styles;
      var name = this.props.name;

      var _ref2 = theme || {},
          _ref2$icons = _ref2.icons,
          icons = _ref2$icons === void 0 ? {} : _ref2$icons;

      var maybeIcon = icons[name];
      var isSvgIcon = maybeIcon && maybeIcon.isSvg;
      return React.createElement(ElementType, _extends({
        className: classes.root
      }, accessibility.attributes.root, unhandledProps), isSvgIcon && callable(maybeIcon.icon)({
        classes: classes,
        rtl: rtl,
        props: this.props
      }));
    }
  }]);

  return Icon;
}(UIComponent);

_defineProperty(Icon, "create", void 0);

_defineProperty(Icon, "className", 'ui-icon');

_defineProperty(Icon, "displayName", 'Icon');

_defineProperty(Icon, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  children: false,
  content: false,
  color: true
}), {
  bordered: PropTypes.bool,
  circular: PropTypes.bool,
  disabled: PropTypes.bool,
  name: PropTypes.string.isRequired,
  outline: PropTypes.bool,
  rotate: PropTypes.number,
  size: customPropTypes.size,
  xSpacing: PropTypes.oneOf(['none', 'before', 'after', 'both'])
}));

_defineProperty(Icon, "defaultProps", {
  as: 'span',
  size: 'medium',
  accessibility: iconBehavior,
  rotate: 0
});

Icon.create = createShorthandFactory({
  Component: Icon,
  mappedProp: 'name',
  allowsJSX: false
});
/**
 * An Icon displays a pictogram with semantic meaning.
 */

export default withSafeTypeForAs(Icon);