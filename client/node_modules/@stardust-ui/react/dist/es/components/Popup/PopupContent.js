import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _keys from "lodash/keys";
import _invoke from "lodash/invoke";
import { FocusTrapZone, AutoFocusZone } from '@stardust-ui/react-bindings';
import cx from 'classnames';
import * as React from 'react';
import * as PropTypes from 'prop-types';
import * as customPropTypes from '@stardust-ui/react-proptypes';
import { childrenExist, createShorthandFactory, UIComponent, commonPropTypes, rtlTextContainer } from '../../lib';
import { withSafeTypeForAs } from '../../types';

var PopupContent =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(PopupContent, _UIComponent);

  function PopupContent() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, PopupContent);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PopupContent)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "handleMouseEnter", function (e) {
      _invoke(_this.props, 'onMouseEnter', e, _this.props);
    });

    _defineProperty(_assertThisInitialized(_this), "handleMouseLeave", function (e) {
      _invoke(_this.props, 'onMouseLeave', e, _this.props);
    });

    return _this;
  }

  _createClass(PopupContent, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var accessibility = _ref.accessibility,
          ElementType = _ref.ElementType,
          classes = _ref.classes,
          unhandledProps = _ref.unhandledProps,
          styles = _ref.styles;
      var _this$props = this.props,
          children = _this$props.children,
          content = _this$props.content,
          pointing = _this$props.pointing,
          pointerRef = _this$props.pointerRef,
          trapFocus = _this$props.trapFocus,
          autoFocus = _this$props.autoFocus;
      var popupContentProps = Object.assign({
        className: classes.root
      }, rtlTextContainer.getAttributes({
        forElements: [children, content]
      }), accessibility.attributes.root, unhandledProps, {
        onMouseEnter: this.handleMouseEnter,
        onMouseLeave: this.handleMouseLeave
      });
      var popupContent = React.createElement(React.Fragment, null, pointing && React.createElement("div", {
        className: classes.pointer,
        ref: pointerRef
      }), React.createElement("div", {
        className: cx(PopupContent.slotClassNames.content, classes.content)
      }, childrenExist(children) ? children : content));

      if (trapFocus) {
        var focusTrapZoneProps = Object.assign({}, popupContentProps, _keys(trapFocus).length && trapFocus, {
          as: ElementType
        });
        return React.createElement(FocusTrapZone, focusTrapZoneProps, popupContent);
      }

      if (autoFocus) {
        var autoFocusZoneProps = Object.assign({}, popupContentProps, _keys(autoFocus).length && autoFocus, {
          as: ElementType
        });
        return React.createElement(AutoFocusZone, autoFocusZoneProps, popupContent);
      }

      return React.createElement(ElementType, popupContentProps, popupContent);
    }
  }]);

  return PopupContent;
}(UIComponent);

_defineProperty(PopupContent, "create", void 0);

_defineProperty(PopupContent, "displayName", 'PopupContent');

_defineProperty(PopupContent, "className", 'ui-popup__content');

_defineProperty(PopupContent, "slotClassNames", void 0);

_defineProperty(PopupContent, "propTypes", Object.assign({}, commonPropTypes.createCommon(), {
  placement: PropTypes.string,
  pointing: PropTypes.bool,
  onMouseEnter: PropTypes.func,
  onMouseLeave: PropTypes.func,
  pointerRef: customPropTypes.ref,
  trapFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),
  autoFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object])
}));

PopupContent.slotClassNames = {
  content: "".concat(PopupContent.className, "__content")
};
PopupContent.create = createShorthandFactory({
  Component: PopupContent,
  mappedProp: 'content'
});
/**
 * A PopupContent displays the content of a Popup component.
 */

export default withSafeTypeForAs(PopupContent);