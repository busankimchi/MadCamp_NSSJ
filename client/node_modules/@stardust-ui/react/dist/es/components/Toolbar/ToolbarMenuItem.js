import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _some from "lodash/some";
import _invoke from "lodash/invoke";
import { toolbarMenuItemBehavior } from '@stardust-ui/accessibility';
import * as React from 'react';
import cx from 'classnames';
import * as PropTypes from 'prop-types';
import { EventListener } from '@stardust-ui/react-component-event-listener';
import { Ref, toRefObject } from '@stardust-ui/react-component-ref';
import * as customPropTypes from '@stardust-ui/react-proptypes';
import { focusAsync } from '@stardust-ui/react-bindings';
import { Unstable_NestingAuto } from '@stardust-ui/react-component-nesting-registry';
import { commonPropTypes, AutoControlledComponent, createShorthandFactory, childrenExist, applyAccessibilityKeyHandlers, doesNodeContainClick } from '../../lib';
import { withSafeTypeForAs } from '../../types';
import { Popper } from '../../lib/positioner';
import Box from '../Box/Box';
import Icon from '../Icon/Icon';
import Popup from '../Popup/Popup';
import { default as ToolbarMenu } from './ToolbarMenu';

var ToolbarMenuItem =
/*#__PURE__*/
function (_AutoControlledCompon) {
  _inherits(ToolbarMenuItem, _AutoControlledCompon);

  function ToolbarMenuItem() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ToolbarMenuItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ToolbarMenuItem)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "itemRef", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "menuRef", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "actionHandlers", {
      performClick: function performClick(event) {
        event.preventDefault();

        _this.handleClick(event);
      },
      openMenu: function openMenu(event) {
        return _this.openMenu(event);
      },
      closeAllMenusAndFocusNextParentItem: function closeAllMenusAndFocusNextParentItem(event) {
        return _this.closeAllMenus(event);
      },
      closeMenu: function closeMenu(event) {
        return _this.closeMenu(event);
      },
      closeMenuAndFocusTrigger: function closeMenuAndFocusTrigger(event) {
        return _this.closeMenu(event);
      },
      doNotNavigateNextParentItem: function doNotNavigateNextParentItem(event) {
        event.stopPropagation();
      },
      closeAllMenus: function closeAllMenus(event) {
        return _this.closeAllMenus(event);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "openMenu", function (e) {
      var menu = _this.props.menu;
      var menuOpen = _this.state.menuOpen;

      if (menu && !menuOpen) {
        _this.trySetMenuOpen(true, e);

        e.stopPropagation();
        e.preventDefault();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "closeMenu", function (e) {
      if (!_this.isSubmenuOpen()) {
        return;
      }

      _this.trySetMenuOpen(false, e, function () {
        focusAsync(_this.itemRef.current);
      });

      e.stopPropagation();
    });

    _defineProperty(_assertThisInitialized(_this), "closeAllMenus", function (e) {
      if (!_this.isSubmenuOpen()) {
        return;
      }

      var inSubmenu = _this.props.inSubmenu;

      _this.trySetMenuOpen(false, e, function () {
        if (!inSubmenu) {
          focusAsync(_this.itemRef.current);
        }
      }); // avoid spacebar scrolling the page


      if (!inSubmenu) {
        e.preventDefault();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "isSubmenuOpen", function () {
      var menu = _this.props.menu;
      var menuOpen = _this.state.menuOpen;
      return !!(menu && menuOpen);
    });

    _defineProperty(_assertThisInitialized(_this), "outsideClickHandler", function (getRefs) {
      return function (e) {
        var isItemClick = doesNodeContainClick(_this.itemRef.current, e, _this.context.target);

        var isNestedClick = _some(getRefs(), function (childRef) {
          return doesNodeContainClick(childRef.current, e, _this.context.target);
        });

        var isInside = isItemClick || isNestedClick;

        if (!isInside) {
          _this.trySetMenuOpen(false, e);
        }
      };
    });

    _defineProperty(_assertThisInitialized(_this), "handleMenuOverrides", function (getRefs) {
      return function (predefinedProps) {
        return {
          onItemClick: function onItemClick(e, itemProps) {
            var popup = itemProps.popup,
                menuOpen = itemProps.menuOpen;

            _invoke(predefinedProps, 'onItemClick', e, itemProps);

            if (popup) {
              return;
            }

            _this.trySetMenuOpen(menuOpen, e);

            if (!menuOpen) {
              _invoke(_this.itemRef.current, 'focus');
            }
          }
        };
      };
    });

    _defineProperty(_assertThisInitialized(_this), "handleClick", function (e) {
      var _this$props = _this.props,
          disabled = _this$props.disabled,
          menu = _this$props.menu,
          popup = _this$props.popup;

      if (disabled) {
        e.preventDefault();
        return;
      }

      if (menu) {
        // the menuItem element was clicked => toggle the open/close and stop propagation
        _this.trySetMenuOpen(!_this.state.menuOpen, e);

        e.stopPropagation();
        e.preventDefault();
      }

      if (popup) {
        e.stopPropagation();
        e.preventDefault();
        return;
      }

      _invoke(_this.props, 'onClick', e, _this.props);
    });

    return _this;
  }

  _createClass(ToolbarMenuItem, [{
    key: "trySetMenuOpen",
    value: function trySetMenuOpen(newValue, e, onStateChanged) {
      this.setState({
        menuOpen: newValue
      }); // The reason why post-effect is not passed as callback to trySetState method
      // is that in 'controlled' mode the post-effect is applied before final re-rendering
      // which cause a broken behavior: for e.g. when it is needed to focus submenu trigger on ESC.
      // TODO: all DOM post-effects should be applied at componentDidMount & componentDidUpdated stages.

      onStateChanged && onStateChanged();

      _invoke(this.props, 'onMenuOpenChange', e, Object.assign({}, this.props, {
        menuOpen: newValue
      }));
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var _this2 = this;

      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          accessibility = _ref.accessibility,
          unhandledProps = _ref.unhandledProps,
          styles = _ref.styles,
          rtl = _ref.rtl;
      var _this$props2 = this.props,
          active = _this$props2.active,
          activeIndicator = _this$props2.activeIndicator,
          children = _this$props2.children,
          content = _this$props2.content,
          disabled = _this$props2.disabled,
          submenuIndicator = _this$props2.submenuIndicator,
          icon = _this$props2.icon,
          menu = _this$props2.menu,
          popup = _this$props2.popup,
          wrapper = _this$props2.wrapper;
      var menuOpen = this.state.menuOpen;
      var targetRef = toRefObject(this.context.target);
      var elementType = React.createElement(ElementType, _extends({}, accessibility.attributes.root, unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps), {
        disabled: disabled,
        className: classes.root,
        onClick: this.handleClick
      }), childrenExist(children) ? children : React.createElement(React.Fragment, null, Icon.create(icon, {
        defaultProps: function defaultProps() {
          return {
            xSpacing: !!content ? 'after' : 'none'
          };
        }
      }), content, active && Icon.create(activeIndicator, {
        defaultProps: function defaultProps() {
          return {
            className: ToolbarMenuItem.slotClassNames.activeIndicator,
            styles: styles.activeIndicator
          };
        }
      }), menu && Icon.create(submenuIndicator, {
        defaultProps: function defaultProps() {
          return {
            name: 'stardust-menu-arrow-end',
            styles: styles.submenuIndicator
          };
        }
      })));
      var hasChildren = childrenExist(children);

      if (popup && !hasChildren) {
        return Popup.create(popup, {
          defaultProps: function defaultProps() {
            return {
              trapFocus: true,
              onOpenChange: function onOpenChange(e) {
                e.stopPropagation();
              }
            };
          },
          overrideProps: {
            trigger: elementType,
            children: undefined // force-reset `children` defined for `Popup` as it collides with the `trigger`

          }
        });
      }

      var menuItemInner = hasChildren ? children : React.createElement(Ref, {
        innerRef: this.itemRef
      }, elementType);
      var maybeSubmenu = menu && menuOpen ? React.createElement(Unstable_NestingAuto, null, function (getRefs, nestingRef) {
        return React.createElement(React.Fragment, null, React.createElement(Ref, {
          innerRef: function innerRef(node) {
            nestingRef.current = node;
            _this2.menuRef.current = node;
          }
        }, React.createElement(Popper, {
          align: "top",
          position: rtl ? 'before' : 'after',
          targetRef: _this2.itemRef
        }, ToolbarMenu.create(menu, {
          defaultProps: function defaultProps() {
            return {
              className: ToolbarMenuItem.slotClassNames.submenu,
              styles: styles.menu,
              submenu: true,
              submenuIndicator: submenuIndicator
            };
          },
          overrideProps: _this2.handleMenuOverrides(getRefs)
        }))), React.createElement(EventListener, {
          listener: _this2.outsideClickHandler(getRefs),
          targetRef: targetRef,
          type: "click"
        }));
      }) : null;

      if (!wrapper) {
        return menuItemInner;
      }

      return Box.create(wrapper, {
        defaultProps: function defaultProps() {
          return Object.assign({
            className: cx(ToolbarMenuItem.slotClassNames.wrapper, classes.wrapper)
          }, accessibility.attributes.wrapper, applyAccessibilityKeyHandlers(accessibility.keyHandlers.wrapper, wrapper));
        },
        overrideProps: function overrideProps() {
          return {
            children: React.createElement(React.Fragment, null, menuItemInner, maybeSubmenu)
          };
        }
      });
    }
  }]);

  return ToolbarMenuItem;
}(AutoControlledComponent);

_defineProperty(ToolbarMenuItem, "displayName", 'ToolbarMenuItem');

_defineProperty(ToolbarMenuItem, "className", 'ui-toolbar__menuitem');

_defineProperty(ToolbarMenuItem, "slotClassNames", {
  activeIndicator: "".concat(ToolbarMenuItem.className, "__activeIndicator"),
  wrapper: "".concat(ToolbarMenuItem.className, "__wrapper"),
  submenu: "".concat(ToolbarMenuItem.className, "__submenu")
});

_defineProperty(ToolbarMenuItem, "create", void 0);

_defineProperty(ToolbarMenuItem, "propTypes", Object.assign({}, commonPropTypes.createCommon(), {
  active: PropTypes.bool,
  activeIndicator: customPropTypes.itemShorthandWithoutJSX,
  defaultMenuOpen: PropTypes.bool,
  disabled: PropTypes.bool,
  icon: customPropTypes.itemShorthand,
  index: PropTypes.number,
  submenuIndicator: customPropTypes.itemShorthandWithoutJSX,
  inSubmenu: PropTypes.bool,
  menu: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),
  menuOpen: PropTypes.bool,
  onClick: PropTypes.func,
  popup: PropTypes.oneOfType([PropTypes.shape(Object.assign({}, Popup.propTypes, {
    trigger: customPropTypes.never,
    children: customPropTypes.never
  })), PropTypes.string]),
  wrapper: customPropTypes.itemShorthand
}));

_defineProperty(ToolbarMenuItem, "defaultProps", {
  as: 'button',
  accessibility: toolbarMenuItemBehavior,
  activeIndicator: 'stardust-checkmark',
  submenuIndicator: 'stardust-menu-arrow-end',
  wrapper: {
    as: 'li'
  }
});

_defineProperty(ToolbarMenuItem, "autoControlledProps", ['menuOpen']);

ToolbarMenuItem.create = createShorthandFactory({
  Component: ToolbarMenuItem,
  mappedProp: 'content'
});
/**
 * A ToolbarMenuItem renders ToolbarMenu item as button.
 */

export default withSafeTypeForAs(ToolbarMenuItem);