import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _get from "lodash/get";
import _map from "lodash/map";
import _invoke from "lodash/invoke";
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { toolbarMenuBehavior, toolbarMenuItemCheckboxBehavior } from '@stardust-ui/accessibility';
import * as customPropTypes from '@stardust-ui/react-proptypes';
import { createShorthandFactory, commonPropTypes, UIComponent, childrenExist, applyAccessibilityKeyHandlers } from '../../lib';
import { mergeComponentVariables } from '../../lib/mergeThemes';
import { withSafeTypeForAs } from '../../types';
import ToolbarMenuRadioGroup from './ToolbarMenuRadioGroup';
import ToolbarMenuDivider from './ToolbarMenuDivider';
import ToolbarMenuItem from './ToolbarMenuItem';

var ToolbarMenu =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(ToolbarMenu, _UIComponent);

  function ToolbarMenu() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ToolbarMenu);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ToolbarMenu)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "actionHandlers", {
      performClick: function performClick(e) {
        _invoke(_this.props, 'onClick', e, _this.props);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleItemOverrides", function (variables) {
      return function (predefinedProps) {
        return {
          onClick: function onClick(e, itemProps) {
            _invoke(predefinedProps, 'onClick', e, itemProps);

            _invoke(_this.props, 'onItemClick', e, Object.assign({}, itemProps, {
              menuOpen: !!itemProps.menu
            }));
          },
          variables: mergeComponentVariables(variables, predefinedProps.variables)
        };
      };
    });

    _defineProperty(_assertThisInitialized(_this), "handleDividerOverrides", function (variables) {
      return function (predefinedProps) {
        return {
          variables: mergeComponentVariables(variables, predefinedProps.variables)
        };
      };
    });

    _defineProperty(_assertThisInitialized(_this), "handleRadioGroupOverrides", function (variables) {
      return function (predefinedProps) {
        return {
          onItemClick: function onItemClick(e, itemProps) {
            _invoke(predefinedProps, 'onItemClick', e, itemProps);

            _invoke(_this.props, 'onItemClick', e, itemProps);
          },
          variables: mergeComponentVariables(variables, predefinedProps.variables)
        };
      };
    });

    return _this;
  }

  _createClass(ToolbarMenu, [{
    key: "renderItems",
    value: function renderItems(items, variables) {
      var _this$props = this.props,
          submenuIndicator = _this$props.submenuIndicator,
          submenu = _this$props.submenu;
      var itemOverridesFn = this.handleItemOverrides(variables);
      var dividerOverridesFn = this.handleDividerOverrides(variables);
      var radioGroupOverrides = this.handleRadioGroupOverrides(variables);
      return _map(items, function (item) {
        var kind = _get(item, 'kind', 'item');

        switch (kind) {
          case 'divider':
            return ToolbarMenuDivider.create(item, {
              overrideProps: dividerOverridesFn
            });

          case 'group':
            return ToolbarMenuRadioGroup.create(item, {
              overrideProps: radioGroupOverrides
            });

          case 'toggle':
            return ToolbarMenuItem.create(item, {
              defaultProps: function defaultProps() {
                return {
                  accessibility: toolbarMenuItemCheckboxBehavior
                };
              },
              overrideProps: itemOverridesFn
            });

          default:
            return ToolbarMenuItem.create(item, {
              defaultProps: function defaultProps() {
                return {
                  submenuIndicator: submenuIndicator,
                  inSubmenu: submenu
                };
              },
              overrideProps: itemOverridesFn
            });
        }
      });
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          accessibility = _ref.accessibility,
          variables = _ref.variables,
          unhandledProps = _ref.unhandledProps;
      var _this$props2 = this.props,
          children = _this$props2.children,
          items = _this$props2.items;
      return React.createElement(ElementType, _extends({
        className: classes.root
      }, accessibility.attributes.root, unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)), childrenExist(children) ? children : this.renderItems(items, variables));
    }
  }]);

  return ToolbarMenu;
}(UIComponent);

_defineProperty(ToolbarMenu, "displayName", 'ToolbarMenu');

_defineProperty(ToolbarMenu, "className", 'ui-toolbar__menu');

_defineProperty(ToolbarMenu, "create", void 0);

_defineProperty(ToolbarMenu, "propTypes", Object.assign({}, commonPropTypes.createCommon(), {
  items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item']),
  onItemClick: PropTypes.func,
  submenu: PropTypes.bool,
  submenuIndicator: customPropTypes.itemShorthandWithoutJSX
}));

_defineProperty(ToolbarMenu, "defaultProps", {
  accessibility: toolbarMenuBehavior,
  as: 'ul'
});

ToolbarMenu.create = createShorthandFactory({
  Component: ToolbarMenu,
  mappedArrayProp: 'items'
});
/**
 * A ToolbarMenu creates a pop-up menu attached to a ToolbarItem.
 *
 * @accessibility
 * Implements pop-up menu (submenu) behavior of [ARIA Menu](https://www.w3.org/TR/wai-aria-practices-1.1/#menu) design pattern.
 */

export default withSafeTypeForAs(ToolbarMenu);