import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _invoke from "lodash/invoke";
import { IS_FOCUSABLE_ATTRIBUTE } from '@stardust-ui/accessibility';
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { createShorthandFactory, UIComponent, childrenExist, commonPropTypes } from '../../lib';
import { withSafeTypeForAs } from '../../types';

var ToolbarCustomItem =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(ToolbarCustomItem, _UIComponent);

  function ToolbarCustomItem() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ToolbarCustomItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ToolbarCustomItem)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "handleBlur", function (e) {
      if (_this.props.focusable) {
        _invoke(_this.props, 'onBlur', e, _this.props);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleFocus", function (e) {
      if (_this.props.focusable) {
        _invoke(_this.props, 'onFocus', e, _this.props);
      }
    });

    return _this;
  }

  _createClass(ToolbarCustomItem, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          variables = _ref.variables,
          accessibility = _ref.accessibility,
          unhandledProps = _ref.unhandledProps;
      var _this$props = this.props,
          children = _this$props.children,
          content = _this$props.content,
          focusable = _this$props.focusable;
      return React.createElement(ElementType, _extends({}, accessibility.attributes.root, _defineProperty({}, IS_FOCUSABLE_ATTRIBUTE, focusable), unhandledProps, {
        className: classes.root,
        onBlur: this.handleBlur,
        onFocus: this.handleFocus
      }), childrenExist(children) ? children : content);
    }
  }]);

  return ToolbarCustomItem;
}(UIComponent);

_defineProperty(ToolbarCustomItem, "displayName", 'ToolbarCustomItem');

_defineProperty(ToolbarCustomItem, "className", 'ui-toolbar__customitem');

_defineProperty(ToolbarCustomItem, "create", void 0);

_defineProperty(ToolbarCustomItem, "propTypes", Object.assign({}, commonPropTypes.createCommon(), {
  fitted: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['horizontally', 'vertically'])]),
  focusable: PropTypes.bool,
  onFocus: PropTypes.func,
  onBlur: PropTypes.func
}));

ToolbarCustomItem.create = createShorthandFactory({
  Component: ToolbarCustomItem,
  mappedProp: 'content'
});
/**
 * A ToolbarCustomItem renders Toolbar item as a non-actionable `div` with custom content inside.
 */

export default withSafeTypeForAs(ToolbarCustomItem);