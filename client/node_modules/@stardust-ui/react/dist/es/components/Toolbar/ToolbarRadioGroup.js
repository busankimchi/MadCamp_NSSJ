import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _get from "lodash/get";
import _map from "lodash/map";
import _findIndex from "lodash/findIndex";
import _filter from "lodash/filter";
import * as React from 'react';
import * as PropTypes from 'prop-types';
import * as customPropTypes from '@stardust-ui/react-proptypes';
import { Ref } from '@stardust-ui/react-component-ref';
import { createShorthandFactory, UIComponent, childrenExist, commonPropTypes, applyAccessibilityKeyHandlers } from '../../lib';
import { mergeComponentVariables } from '../../lib/mergeThemes';
import { withSafeTypeForAs } from '../../types';
import { toolbarRadioGroupBehavior, toolbarRadioGroupItemBehavior } from '@stardust-ui/accessibility';
import ToolbarDivider from './ToolbarDivider';
import ToolbarItem from './ToolbarItem';

var ToolbarRadioGroup =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(ToolbarRadioGroup, _UIComponent);

  function ToolbarRadioGroup() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ToolbarRadioGroup);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ToolbarRadioGroup)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "itemRefs", []);

    _defineProperty(_assertThisInitialized(_this), "actionHandlers", {
      nextItem: function nextItem(event) {
        return _this.setFocusedItem(event, 1);
      },
      prevItem: function prevItem(event) {
        return _this.setFocusedItem(event, -1);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "setFocusedItem", function (event, direction) {
      var items = _this.props.items; // filter items which are not disabled

      var filteredRadioItems = _filter(_this.itemRefs, function (item, index) {
        var currentItem = items[index];
        return currentItem && !currentItem.disabled;
      }); // get the index of currently focused element (w/ tabindex = 0) or the first one as default


      var currentFocusedIndex = _findIndex(filteredRadioItems, function (item) {
        return item.current.tabIndex === 0;
      }) || 0;
      var itemsLength = filteredRadioItems.length;
      var nextIndex = currentFocusedIndex + direction;

      if (nextIndex >= itemsLength) {
        nextIndex = 0;
      }

      if (nextIndex < 0) {
        nextIndex = itemsLength - 1;
      }

      var nextItemToFocus = filteredRadioItems[nextIndex].current;

      if (nextItemToFocus) {
        nextItemToFocus.focus();
      }

      if (_this.context.target.activeElement === nextItemToFocus) {
        event.stopPropagation();
      }

      event.preventDefault();
    });

    _defineProperty(_assertThisInitialized(_this), "handleItemOverrides", function (variables) {
      return function (predefinedProps) {
        return {
          variables: mergeComponentVariables(variables, predefinedProps.variables)
        };
      };
    });

    return _this;
  }

  _createClass(ToolbarRadioGroup, [{
    key: "renderItems",
    value: function renderItems(variables) {
      var _this2 = this;

      var _this$props = this.props,
          activeIndex = _this$props.activeIndex,
          items = _this$props.items;
      var itemOverridesFn = this.handleItemOverrides(variables);
      this.itemRefs = [];
      return _map(items, function (item, index) {
        var kind = _get(item, 'kind', 'item');

        var ref = React.createRef();
        _this2.itemRefs[index] = ref;

        if (kind === 'divider') {
          return ToolbarDivider.create(item, {
            overrideProps: itemOverridesFn
          });
        }

        var toolbarItem = ToolbarItem.create(item, {
          defaultProps: function defaultProps() {
            return {
              accessibility: toolbarRadioGroupItemBehavior,
              active: activeIndex === index
            };
          },
          overrideProps: itemOverridesFn
        });
        return React.createElement(Ref, {
          innerRef: ref,
          key: toolbarItem.key
        }, toolbarItem);
      });
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          variables = _ref.variables,
          accessibility = _ref.accessibility,
          unhandledProps = _ref.unhandledProps;
      var children = this.props.children;
      return React.createElement(ElementType, _extends({}, accessibility.attributes.root, unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps), {
        className: classes.root
      }), childrenExist(children) ? children : this.renderItems(variables));
    }
  }]);

  return ToolbarRadioGroup;
}(UIComponent);

_defineProperty(ToolbarRadioGroup, "displayName", 'ToolbarRadioGroup');

_defineProperty(ToolbarRadioGroup, "className", 'ui-toolbars');

_defineProperty(ToolbarRadioGroup, "create", void 0);

_defineProperty(ToolbarRadioGroup, "propTypes", Object.assign({}, commonPropTypes.createCommon(), {
  activeIndex: PropTypes.number,
  items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item'])
}));

_defineProperty(ToolbarRadioGroup, "defaultProps", {
  accessibility: toolbarRadioGroupBehavior
});

ToolbarRadioGroup.create = createShorthandFactory({
  Component: ToolbarRadioGroup,
  mappedProp: 'content'
});
/**
 * A ToolbarRadioGroup renders Toolbar item as a group of mutually exclusive options.
 * Component doesn't implement mutual exclusiveness, it just serves accessibility purposes.
 *
 * @accessibility
 * Implements [ARIA RadioGroup](https://www.w3.org/TR/wai-aria-practices/#radiobutton) design pattern.
 */

export default withSafeTypeForAs(ToolbarRadioGroup);