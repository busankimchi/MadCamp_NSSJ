import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _invoke from "lodash/invoke";
import { splitButtonBehavior } from '@stardust-ui/accessibility';
import * as customPropTypes from '@stardust-ui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { withSafeTypeForAs } from '../../types';
import { isFromKeyboard, commonPropTypes, AutoControlledComponent } from '../../lib';
import Button from '../Button/Button';
import MenuButton from '../MenuButton/MenuButton';

var SplitButton =
/*#__PURE__*/
function (_AutoControlledCompon) {
  _inherits(SplitButton, _AutoControlledCompon);

  function SplitButton() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, SplitButton);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SplitButton)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "handleMenuButtonOverrides", function (predefinedProps) {
      return {
        onMenuItemClick: function onMenuItemClick(e, menuItemProps) {
          _this.setState({
            open: false
          });

          _invoke(_this.props, 'onOpenChange', e, Object.assign({}, _this.props, {
            open: false
          }));

          _invoke(predefinedProps, 'onMenuItemClick', e, menuItemProps);

          _invoke(_this.props, 'onMenuItemClick', e, menuItemProps);
        },
        onOpenChange: function onOpenChange(e, popupProps) {
          e.stopPropagation();

          _this.setState({
            open: popupProps.open
          });

          _invoke(_this.props, 'onOpenChange', e, Object.assign({}, _this.props, {
            open: popupProps.open
          }));
        }
      };
    });

    _defineProperty(_assertThisInitialized(_this), "handleMenuButtonTriggerOverrides", function (predefinedProps) {
      return {
        onClick: function onClick(e, buttonProps) {
          _invoke(predefinedProps, 'onClick', e, buttonProps);

          _invoke(_this.props, 'onMainButtonClick', e, buttonProps);
        },
        onFocus: function onFocus(e, buttonProps) {
          _invoke(predefinedProps, 'onFocus', e, buttonProps);

          _this.setState({
            isFromKeyboard: isFromKeyboard()
          });
        }
      };
    });

    return _this;
  }

  _createClass(SplitButton, [{
    key: "getInitialAutoControlledState",
    value: function getInitialAutoControlledState() {
      return {
        isFromKeyboard: false,
        open: false
      };
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var _this2 = this;

      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          accessibility = _ref.accessibility,
          styles = _ref.styles,
          unhandledProps = _ref.unhandledProps;
      var _this$props = this.props,
          button = _this$props.button,
          disabled = _this$props.disabled,
          menu = _this$props.menu,
          primary = _this$props.primary,
          secondary = _this$props.secondary,
          toggleButton = _this$props.toggleButton;
      var trigger = Button.create(button, {
        defaultProps: function defaultProps() {
          return {
            styles: styles.button,
            primary: primary,
            secondary: secondary,
            disabled: disabled
          };
        },
        overrideProps: this.handleMenuButtonTriggerOverrides
      });
      return React.createElement(ElementType, _extends({
        className: classes.root
      }, accessibility.attributes.root, unhandledProps), MenuButton.create({}, {
        defaultProps: function defaultProps() {
          return {
            accessibility: accessibility.childBehaviors ? accessibility.childBehaviors.menuButton : undefined,
            menu: menu,
            // Opening is handled manually.
            on: [],
            open: _this2.state.open,
            trigger: trigger
          };
        },
        overrideProps: this.handleMenuButtonOverrides
      }), Button.create(toggleButton, {
        defaultProps: function defaultProps() {
          return Object.assign({
            className: SplitButton.slotClassNames.toggleButton,
            disabled: disabled,
            icon: 'stardust-arrow-down',
            iconOnly: true,
            primary: primary,
            secondary: secondary
          }, accessibility.attributes.toggleButton);
        },
        overrideProps: function overrideProps(predefinedProps) {
          return {
            onClick: function onClick(e, buttonProps) {
              _invoke(predefinedProps, 'onClick', e, buttonProps);

              _this2.setState(function (state) {
                var open = !state.open;

                _invoke(_this2.props, 'onOpenChange', e, Object.assign({}, _this2.props, {
                  open: open
                }));

                return {
                  open: open
                };
              });
            }
          };
        }
      }));
    }
  }]);

  return SplitButton;
}(AutoControlledComponent);
/**
 * A SplitButton enables users to take one of several related actions, one being dominant and rest being displayed in a menu.
 */


_defineProperty(SplitButton, "create", void 0);

_defineProperty(SplitButton, "displayName", 'SplitButton');

_defineProperty(SplitButton, "className", 'ui-splitbutton');

_defineProperty(SplitButton, "slotClassNames", {
  toggleButton: "".concat(SplitButton.className, "__toggleButton")
});

_defineProperty(SplitButton, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  content: false
}), {
  button: customPropTypes.itemShorthand,
  defaultOpen: PropTypes.bool,
  menu: PropTypes.oneOfType([customPropTypes.itemShorthand, PropTypes.arrayOf(customPropTypes.itemShorthandWithoutJSX)]),
  onMainButtonClick: PropTypes.func,
  onMenuItemClick: PropTypes.func,
  onOpenChange: PropTypes.func,
  open: PropTypes.bool,
  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),
  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),
  toggleButton: customPropTypes.itemShorthand
}));

_defineProperty(SplitButton, "defaultProps", {
  accessibility: splitButtonBehavior,
  as: 'span',
  toggleButton: {}
});

_defineProperty(SplitButton, "autoControlledProps", ['open']);

export default withSafeTypeForAs(SplitButton);