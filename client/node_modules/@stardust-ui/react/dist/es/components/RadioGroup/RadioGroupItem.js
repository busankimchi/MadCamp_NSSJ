import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _invoke from "lodash/invoke";
import { radioGroupItemBehavior } from '@stardust-ui/accessibility';
import { Ref } from '@stardust-ui/react-component-ref';
import * as customPropTypes from '@stardust-ui/react-proptypes';
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { AutoControlledComponent, createShorthandFactory, commonPropTypes, applyAccessibilityKeyHandlers } from '../../lib';
import Box from '../Box/Box';
import { withSafeTypeForAs } from '../../types';
import Icon from '../Icon/Icon';

var RadioGroupItem =
/*#__PURE__*/
function (_AutoControlledCompon) {
  _inherits(RadioGroupItem, _AutoControlledCompon);

  function RadioGroupItem() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, RadioGroupItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RadioGroupItem)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "elementRef", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "actionHandlers", {
      performClick: function performClick(e) {
        e.preventDefault();

        _this.handleClick(e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleClick", function (e) {
      _invoke(_this.props, 'onClick', e, _this.props);
    });

    return _this;
  }

  _createClass(RadioGroupItem, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var checked = this.state.checked;

      if (checked !== prevState.checked) {
        checked && this.props.shouldFocus && this.elementRef.current.focus();

        _invoke(this.props, 'checkedChanged', undefined, Object.assign({}, this.props, {
          checked: checked
        }));
      }
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          unhandledProps = _ref.unhandledProps,
          styles = _ref.styles,
          accessibility = _ref.accessibility;
      var _this$props = this.props,
          label = _this$props.label,
          icon = _this$props.icon;
      return React.createElement(Ref, {
        innerRef: this.elementRef
      }, React.createElement(ElementType, _extends({
        onClick: this.handleClick,
        className: classes.root
      }, accessibility.attributes.root, unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)), Icon.create(icon || 'stardust-circle', {
        defaultProps: function defaultProps() {
          return {
            size: 'small',
            styles: styles.icon
          };
        }
      }), Box.create(label, {
        defaultProps: function defaultProps() {
          return {
            as: 'span'
          };
        }
      })));
    }
  }]);

  return RadioGroupItem;
}(AutoControlledComponent);

_defineProperty(RadioGroupItem, "create", void 0);

_defineProperty(RadioGroupItem, "displayName", 'RadioGroupItem');

_defineProperty(RadioGroupItem, "className", 'ui-radiogroup__item');

_defineProperty(RadioGroupItem, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  content: false
}), {
  checked: PropTypes.bool,
  defaultChecked: PropTypes.bool,
  disabled: PropTypes.bool,
  icon: customPropTypes.itemShorthandWithoutJSX,
  label: customPropTypes.itemShorthand,
  name: PropTypes.string,
  onClick: PropTypes.func,
  checkedChanged: PropTypes.func,
  shouldFocus: PropTypes.bool,
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  vertical: PropTypes.bool
}));

_defineProperty(RadioGroupItem, "defaultProps", {
  as: 'div',
  accessibility: radioGroupItemBehavior
});

_defineProperty(RadioGroupItem, "autoControlledProps", ['checked']);

RadioGroupItem.create = createShorthandFactory({
  Component: RadioGroupItem,
  mappedProp: 'label'
});
/**
 * A RadioGroupItem represents single input element within a RadioGroup.
 *
 * @accessibility
 * Radio items need to be grouped to correctly handle accessibility.
 */

export default withSafeTypeForAs(RadioGroupItem);