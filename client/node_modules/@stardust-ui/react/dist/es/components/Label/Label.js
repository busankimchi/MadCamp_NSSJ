import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import * as customPropTypes from '@stardust-ui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { childrenExist, createShorthandFactory, pxToRem, UIComponent, commonPropTypes, rtlTextContainer } from '../../lib';
import Icon from '../Icon/Icon';
import Image from '../Image/Image';
import Layout from '../Layout/Layout';
import { withSafeTypeForAs } from '../../types';

var Label =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(Label, _UIComponent);

  function Label() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Label);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Label)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "handleIconOverrides", function (iconProps) {
      return Object.assign({}, !iconProps.xSpacing && {
        xSpacing: 'none'
      });
    });

    return _this;
  }

  _createClass(Label, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var accessibility = _ref.accessibility,
          ElementType = _ref.ElementType,
          classes = _ref.classes,
          unhandledProps = _ref.unhandledProps,
          variables = _ref.variables,
          styles = _ref.styles;
      var _this$props = this.props,
          children = _this$props.children,
          content = _this$props.content,
          icon = _this$props.icon,
          iconPosition = _this$props.iconPosition,
          image = _this$props.image,
          imagePosition = _this$props.imagePosition;

      if (childrenExist(children)) {
        return React.createElement(ElementType, _extends({}, rtlTextContainer.getAttributes({
          forElements: [children]
        }), accessibility.attributes.root, unhandledProps, {
          className: classes.root
        }), children);
      }

      var imageElement = Image.create(image, {
        defaultProps: function defaultProps() {
          return {
            styles: styles.image,
            variables: variables.image
          };
        }
      });
      var iconElement = Icon.create(icon, {
        defaultProps: function defaultProps() {
          return {
            styles: styles.icon,
            variables: variables.icon
          };
        },
        overrideProps: this.handleIconOverrides
      });
      var startImage = imagePosition === 'start' && imageElement;
      var startIcon = iconPosition === 'start' && iconElement;
      var endIcon = iconPosition === 'end' && iconElement;
      var endImage = imagePosition === 'end' && imageElement;
      var hasStartElement = startImage || startIcon;
      var hasEndElement = endIcon || endImage;
      return React.createElement(ElementType, _extends({}, accessibility.attributes.root, unhandledProps, {
        className: classes.root
      }), React.createElement(Layout, {
        start: hasStartElement && React.createElement(React.Fragment, null, startImage, startIcon),
        main: content,
        end: hasEndElement && React.createElement(React.Fragment, null, endIcon, endImage),
        gap: pxToRem(3)
      }));
    }
  }]);

  return Label;
}(UIComponent);

_defineProperty(Label, "displayName", 'Label');

_defineProperty(Label, "create", void 0);

_defineProperty(Label, "className", 'ui-label');

_defineProperty(Label, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  color: true
}), {
  circular: PropTypes.bool,
  icon: customPropTypes.itemShorthandWithoutJSX,
  iconPosition: PropTypes.oneOf(['start', 'end']),
  image: customPropTypes.itemShorthandWithoutJSX,
  imagePosition: PropTypes.oneOf(['start', 'end']),
  fluid: PropTypes.bool
}));

_defineProperty(Label, "defaultProps", {
  as: 'span',
  imagePosition: 'start',
  iconPosition: 'end'
});

Label.create = createShorthandFactory({
  Component: Label,
  mappedProp: 'content'
});
/**
 * A Label allows user to classify content.
 */

export default withSafeTypeForAs(Label);