import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { childrenExist, createShorthandFactory, UIComponent, commonPropTypes, rtlTextContainer } from '../../lib';
import { withSafeTypeForAs } from '../../types';

var Divider =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(Divider, _UIComponent);

  function Divider() {
    _classCallCheck(this, Divider);

    return _possibleConstructorReturn(this, _getPrototypeOf(Divider).apply(this, arguments));
  }

  _createClass(Divider, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var accessibility = _ref.accessibility,
          ElementType = _ref.ElementType,
          classes = _ref.classes,
          unhandledProps = _ref.unhandledProps;
      var _this$props = this.props,
          children = _this$props.children,
          content = _this$props.content;
      return React.createElement(ElementType, _extends({}, rtlTextContainer.getAttributes({
        forElements: [children, content]
      }), accessibility.attributes.root, unhandledProps, {
        className: classes.root
      }), childrenExist(children) ? children : content);
    }
  }]);

  return Divider;
}(UIComponent);

_defineProperty(Divider, "displayName", 'Divider');

_defineProperty(Divider, "create", void 0);

_defineProperty(Divider, "className", 'ui-divider');

_defineProperty(Divider, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  color: true
}), {
  fitted: PropTypes.bool,
  size: PropTypes.number,
  important: PropTypes.bool
}));

_defineProperty(Divider, "defaultProps", {
  size: 0
});

Divider.create = createShorthandFactory({
  Component: Divider,
  mappedProp: 'content'
});
/**
 * A Divider visually segments content.
 */

export default withSafeTypeForAs(Divider);