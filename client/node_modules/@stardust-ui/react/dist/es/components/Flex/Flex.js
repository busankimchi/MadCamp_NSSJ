import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _get from "lodash/get";
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { UIComponent, commonPropTypes } from '../../lib';
import { withSafeTypeForAs } from '../../types';
import FlexItem from './FlexItem';

var Flex =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(Flex, _UIComponent);

  function Flex() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Flex);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Flex)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "renderChildren", function () {
      var _this$props = _this.props,
          column = _this$props.column,
          children = _this$props.children;
      return React.Children.map(children, function (child) {
        var isFlexItemElement = _get(child, 'type.__isFlexItem');

        return isFlexItemElement ? React.cloneElement(child, {
          flexDirection: column ? 'column' : 'row'
        }) : child;
      });
    });

    return _this;
  }

  _createClass(Flex, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          unhandledProps = _ref.unhandledProps;
      return React.createElement(ElementType, _extends({
        className: classes.root
      }, unhandledProps), this.renderChildren());
    }
  }]);

  return Flex;
}(UIComponent);
/**
 * A Flex is a layout component that arranges group of items aligned towards common direction (either row or column).
 */


_defineProperty(Flex, "Item", FlexItem);

_defineProperty(Flex, "displayName", 'Flex');

_defineProperty(Flex, "className", 'ui-flex');

_defineProperty(Flex, "defaultProps", {
  as: 'div'
});

_defineProperty(Flex, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  accessibility: false,
  content: false
}), {
  inline: PropTypes.bool,
  column: PropTypes.bool,
  wrap: PropTypes.bool,
  hAlign: PropTypes.oneOf(['start', 'center', 'end', 'stretch']),
  vAlign: PropTypes.oneOf(['start', 'center', 'end', 'stretch']),
  space: PropTypes.oneOf(['around', 'between', 'evenly']),
  gap: PropTypes.oneOf(['gap.smaller', 'gap.small', 'gap.medium', 'gap.large']),
  padding: PropTypes.oneOf(['padding.medium']),
  fill: PropTypes.bool,
  debug: PropTypes.bool
}));

export default withSafeTypeForAs(Flex);