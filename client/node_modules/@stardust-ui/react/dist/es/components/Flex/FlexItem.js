import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _isNil from "lodash/isNil";
import * as React from 'react';
import * as PropTypes from 'prop-types';
import cx from 'classnames';
import { UIComponent, commonPropTypes } from '../../lib';
import { mergeStyles } from '../../lib/mergeThemes';

/**
 * A FlexItem is a layout component that customizes alignment of Flex child.
 */
var FlexItem =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(FlexItem, _UIComponent);

  function FlexItem() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, FlexItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FlexItem)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "displayName", void 0);

    return _this;
  }

  _createClass(FlexItem, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var styles = _ref.styles,
          classes = _ref.classes;
      var children = this.props.children; // pass calculated bits using Render Props pattern

      if (typeof children === 'function') {
        return children({
          styles: styles.root,
          classes: classes.root
        });
      }

      if (_isNil(children)) return children;
      return applyStyles(React.Children.only(children), styles, classes);
    }
  }]);

  return FlexItem;
}(UIComponent);

_defineProperty(FlexItem, "className", 'ui-flex__item');

_defineProperty(FlexItem, "displayName", 'FlexItem');

_defineProperty(FlexItem, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  children: false,
  accessibility: false,
  content: false
}), {
  children: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),
  align: PropTypes.oneOf(['auto', 'start', 'end', 'center', 'baseline', 'stretch']),
  size: PropTypes.oneOf(['size.half', 'size.quarter', 'size.small', 'size.medium', 'size.large']),
  stretch: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),
  shrink: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),
  push: PropTypes.bool,

  /**
   * Will be automatically set by parent Flex component
   */
  flexDirection: PropTypes.oneOf(['row', 'column'])
}));

_defineProperty(FlexItem, "create", void 0);

_defineProperty(FlexItem, "__isFlexItem", true);

export default FlexItem;

var applyStyles = function applyStyles(element, styles, classes) {
  if (!styles) {
    return element;
  } // if element is DOM element


  if (typeof element.type === 'string') {
    return React.cloneElement(element, {
      className: cx(element.props.className, classes.root)
    });
  } // assuming element is Stardust element


  return React.cloneElement(element, {
    styles: mergeStyles(styles.root || {}, element.props.styles)
  });
};