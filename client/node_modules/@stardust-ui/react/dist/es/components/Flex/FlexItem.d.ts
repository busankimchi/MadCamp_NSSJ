import * as React from 'react';
import * as PropTypes from 'prop-types';
import { UIComponent, UIComponentProps, ChildrenComponentProps, ShorthandFactory } from '../../lib';
import { ComponentSlotStylesPrepared } from '../../themes/types';
declare type ChildrenFunction = (params: {
    styles: ComponentSlotStylesPrepared;
    classes: string;
}) => React.ReactElement<any>;
export declare type FlexItemChildren = React.ReactElement<any> | ChildrenFunction;
export interface FlexItemProps extends UIComponentProps, ChildrenComponentProps<FlexItemChildren> {
    /** Controls item's alignment. */
    align?: 'auto' | 'start' | 'end' | 'center' | 'baseline' | 'stretch';
    /** Defines size of the item. */
    size?: 'size.half' | 'size.quarter' | 'size.small' | 'size.medium' | 'size.large';
    /**
     * Item can fill remaining space of the container.
     * If numeric value is provided, remaining space will be distributed proportionally between all the items.
     * */
    grow?: boolean | number;
    /**
     * Controls item's ability to shrink.
     * */
    shrink?: boolean | number;
    /**
     * Item can be pushed towards opposite side in the container's direction.
     */
    push?: boolean;
    /**
     * IGNORE (will be refactored and not exposed via API).
     * Value is automatically set by parent Flex component.
     */
    flexDirection?: 'row' | 'column';
}
/**
 * A FlexItem is a layout component that customizes alignment of Flex child.
 */
declare class FlexItem extends UIComponent<FlexItemProps> {
    static className: string;
    static displayName: string;
    static propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactElementLike | ((...args: any[]) => any)>;
        align: PropTypes.Requireable<string>;
        size: PropTypes.Requireable<string>;
        stretch: PropTypes.Requireable<number | boolean>;
        shrink: PropTypes.Requireable<number | boolean>;
        push: PropTypes.Requireable<boolean>;
        /**
         * Will be automatically set by parent Flex component
         */
        flexDirection: PropTypes.Requireable<string>;
        styles: PropTypes.Requireable<object>;
        variables: PropTypes.Requireable<object>;
        design: PropTypes.Requireable<PropTypes.InferProps<{
            position: PropTypes.Requireable<string>;
            display: PropTypes.Requireable<string>;
            top: PropTypes.Requireable<string>;
            right: PropTypes.Requireable<string>;
            bottom: PropTypes.Requireable<string>;
            left: PropTypes.Requireable<string>;
            padding: PropTypes.Requireable<string>;
            paddingTop: PropTypes.Requireable<string>;
            paddingRight: PropTypes.Requireable<string>;
            paddingBottom: PropTypes.Requireable<string>;
            paddingLeft: PropTypes.Requireable<string>;
            margin: PropTypes.Requireable<string>;
            marginTop: PropTypes.Requireable<string>;
            marginRight: PropTypes.Requireable<string>;
            marginBottom: PropTypes.Requireable<string>;
            marginLeft: PropTypes.Requireable<string>;
            width: PropTypes.Requireable<string>;
            height: PropTypes.Requireable<string>;
            minWidth: PropTypes.Requireable<string>;
            maxWidth: PropTypes.Requireable<string>;
            minHeight: PropTypes.Requireable<string>;
            maxHeight: PropTypes.Requireable<string>;
        }>>;
        content: (props: Record<string, any>, propName: string, componentName: string, ...args: any[]) => any;
        color: PropTypes.Requireable<string>;
        className: PropTypes.Requireable<string>;
        as: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        animation: PropTypes.Requireable<any>;
        accessibility: PropTypes.Requireable<object>;
    };
    displayName: 'FlexItem';
    static create: ShorthandFactory<FlexItemProps>;
    static __isFlexItem: boolean;
    renderComponent({ styles, classes }: {
        styles: any;
        classes: any;
    }): React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
}
export default FlexItem;
