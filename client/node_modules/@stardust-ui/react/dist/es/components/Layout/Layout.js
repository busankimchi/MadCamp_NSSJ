import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import * as React from 'react';
import * as PropTypes from 'prop-types';
import cx from 'classnames';
import { UIComponent, commonPropTypes, rtlTextContainer } from '../../lib';
import { withSafeTypeForAs } from '../../types';

var Layout =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(Layout, _UIComponent);

  function Layout() {
    _classCallCheck(this, Layout);

    return _possibleConstructorReturn(this, _getPrototypeOf(Layout).apply(this, arguments));
  }

  _createClass(Layout, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          unhandledProps = _ref.unhandledProps;
      var _this$props = this.props,
          reducing = _this$props.reducing,
          disappearing = _this$props.disappearing,
          start = _this$props.start,
          main = _this$props.main,
          end = _this$props.end,
          renderStartArea = _this$props.renderStartArea,
          renderMainArea = _this$props.renderMainArea,
          renderEndArea = _this$props.renderEndArea,
          renderGap = _this$props.renderGap;
      var startArea = renderStartArea(Object.assign({}, this.props, {
        classes: classes
      }));
      var mainArea = renderMainArea(Object.assign({}, this.props, {
        classes: classes
      }));
      var endArea = renderEndArea(Object.assign({}, this.props, {
        classes: classes
      }));

      if (!startArea && !mainArea && !endArea) {
        return React.createElement(ElementType, _extends({}, unhandledProps, {
          className: classes.root
        }));
      }

      var activeAreas = [startArea, mainArea, endArea].filter(Boolean);
      var isSingleArea = activeAreas.length === 1; // disappear: render the content directly without wrapping layout or area elements

      if (disappearing && isSingleArea) {
        return start || main || end;
      }

      if (reducing && isSingleArea) {
        var composedClasses = cx(classes.root, startArea && Layout.slotClassNames.reducedStart, mainArea && Layout.slotClassNames.reducedMain, endArea && Layout.slotClassNames.reducedEnd);
        return React.createElement(ElementType, _extends({}, unhandledProps, {
          className: composedClasses
        }), start || main || end);
      }

      return React.createElement(ElementType, _extends({}, unhandledProps, {
        className: classes.root
      }), startArea, startArea && mainArea && renderGap(Object.assign({}, this.props, {
        classes: classes
      })), mainArea, (startArea || mainArea) && endArea && renderGap(Object.assign({}, this.props, {
        classes: classes
      })), endArea);
    }
  }]);

  return Layout;
}(UIComponent);

_defineProperty(Layout, "className", 'ui-layout');

_defineProperty(Layout, "displayName", 'Layout');

_defineProperty(Layout, "slotClassNames", void 0);

_defineProperty(Layout, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  accessibility: false,
  children: false,
  content: false
}), {
  debug: PropTypes.bool,
  renderStartArea: PropTypes.func,
  renderMainArea: PropTypes.func,
  renderEndArea: PropTypes.func,
  renderGap: PropTypes.func,
  rootCSS: PropTypes.object,
  start: PropTypes.any,
  startCSS: PropTypes.object,
  startSize: PropTypes.string,
  main: PropTypes.any,
  mainCSS: PropTypes.object,
  mainSize: PropTypes.string,
  end: PropTypes.any,
  endCSS: PropTypes.object,
  endSize: PropTypes.string,
  justifyItems: PropTypes.any,
  alignItems: PropTypes.any,
  gap: PropTypes.string,
  reducing: PropTypes.bool,
  disappearing: PropTypes.bool,
  vertical: PropTypes.bool
}));

_defineProperty(Layout, "defaultProps", {
  startSize: 'auto',
  mainSize: '1fr',
  endSize: 'auto',
  // TODO: when an area is another Layout, do not wrap them in an extra div
  // TODO: option 1) higher value layouts could use start={Layout.create(start)} to ensure Areas are layout root
  renderStartArea: function renderStartArea(_ref2) {
    var start = _ref2.start,
        classes = _ref2.classes;
    return start && React.createElement("div", _extends({
      className: cx(Layout.slotClassNames.start, classes.start)
    }, rtlTextContainer.getAttributes({
      forElements: [start]
    })), start);
  },
  renderMainArea: function renderMainArea(_ref3) {
    var main = _ref3.main,
        classes = _ref3.classes;
    return main && React.createElement("div", _extends({
      className: cx(Layout.slotClassNames.main, classes.main)
    }, rtlTextContainer.getAttributes({
      forElements: [main]
    })), main);
  },
  renderEndArea: function renderEndArea(_ref4) {
    var end = _ref4.end,
        classes = _ref4.classes;
    return end && React.createElement("div", _extends({
      className: cx(Layout.slotClassNames.end, classes.end)
    }, rtlTextContainer.getAttributes({
      forElements: [end]
    })), end);
  },
  // Heads up!
  // IE11 Doesn't support grid-gap, insert virtual columns instead
  renderGap: function renderGap(_ref5) {
    var gap = _ref5.gap,
        classes = _ref5.classes;
    return gap && React.createElement("span", {
      className: cx(Layout.slotClassNames.gap, classes.gap)
    });
  }
});

Layout.slotClassNames = {
  start: "".concat(Layout.className, "__start"),
  main: "".concat(Layout.className, "__main"),
  end: "".concat(Layout.className, "__end"),
  gap: "".concat(Layout.className, "__gap"),
  reducedStart: "".concat(Layout.className, "--reduced__start"),
  reducedMain: "".concat(Layout.className, "--reduced__main"),
  reducedEnd: "".concat(Layout.className, "--reduced__end")
  /**
   * (DEPRECATED) A layout is a utility for arranging the content of a component.
   */

};
export default withSafeTypeForAs(Layout);