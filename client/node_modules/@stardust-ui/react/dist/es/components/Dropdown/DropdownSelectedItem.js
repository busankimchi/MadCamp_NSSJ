import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _isNil from "lodash/isNil";
import _invoke from "lodash/invoke";
import { Ref } from '@stardust-ui/react-component-ref';
import * as customPropTypes from '@stardust-ui/react-proptypes';
import * as React from 'react';
import * as PropTypes from 'prop-types';
import keyboardKey from 'keyboard-key';
import { withSafeTypeForAs } from '../../types';
import { createShorthandFactory, UIComponent, commonPropTypes } from '../../lib';
import Icon from '../Icon/Icon';
import Image from '../Image/Image';
import Label from '../Label/Label';
import Box from '../Box/Box';

var DropdownSelectedItem =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(DropdownSelectedItem, _UIComponent);

  function DropdownSelectedItem() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, DropdownSelectedItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DropdownSelectedItem)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "itemRef", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "handleClick", function (e) {
      _invoke(_this.props, 'onClick', e, _this.props);
    });

    _defineProperty(_assertThisInitialized(_this), "handleKeyDown", function (e) {
      _invoke(_this.props, 'onKeyDown', e, _this.props);
    });

    _defineProperty(_assertThisInitialized(_this), "handleIconOverrides", function (props) {
      return function (predefinedProps) {
        return Object.assign({}, props, {
          onClick: function onClick(e, iconProps) {
            e.stopPropagation();

            _invoke(_this.props, 'onRemove', e, _this.props);

            _invoke(predefinedProps, 'onClick', e, iconProps);
          },
          onKeyDown: function onKeyDown(e, iconProps) {
            e.stopPropagation();

            if (keyboardKey.getCode(e) === keyboardKey.Enter) {
              _invoke(_this.props, 'onRemove', e, _this.props);
            }

            _invoke(predefinedProps, 'onKeyDown', e, iconProps);
          }
        });
      };
    });

    return _this;
  }

  _createClass(DropdownSelectedItem, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (!prevProps.active && this.props.active) {
        this.itemRef.current.focus();
      }
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var _this2 = this;

      var unhandledProps = _ref.unhandledProps,
          classes = _ref.classes,
          styles = _ref.styles;
      var _this$props = this.props,
          active = _this$props.active,
          header = _this$props.header,
          icon = _this$props.icon,
          image = _this$props.image;
      var contentElement = Box.create(header, {
        defaultProps: function defaultProps() {
          return {
            as: 'span',
            className: DropdownSelectedItem.slotClassNames.header,
            styles: styles.header
          };
        }
      });
      var renderIcon = _isNil(icon) ? icon : function (render) {
        return render(icon, function (ComponentType, props) {
          return Icon.create(icon, {
            defaultProps: function defaultProps() {
              return {
                'aria-label': "Remove ".concat(header, " from selection."),
                // TODO: Extract this in a behaviour.
                className: DropdownSelectedItem.slotClassNames.icon,
                styles: styles.icon
              };
            },
            overrideProps: _this2.handleIconOverrides(props)
          });
        });
      };
      var renderImage = _isNil(image) ? image : function (render) {
        return render(image, function (ComponentType, props) {
          return Image.create(image, {
            defaultProps: function defaultProps() {
              return {
                avatar: true,
                className: DropdownSelectedItem.slotClassNames.image,
                styles: styles.image
              };
            },
            overrideProps: props
          });
        });
      };
      return React.createElement(Ref, {
        innerRef: this.itemRef
      }, React.createElement(Label, _extends({
        className: classes.root,
        tabIndex: active ? 0 : -1,
        styles: styles.root,
        circular: true,
        onClick: this.handleClick,
        onKeyDown: this.handleKeyDown,
        content: contentElement,
        icon: renderIcon,
        image: renderImage
      }, unhandledProps)));
    }
  }]);

  return DropdownSelectedItem;
}(UIComponent);

_defineProperty(DropdownSelectedItem, "displayName", 'DropdownSelectedItem');

_defineProperty(DropdownSelectedItem, "create", void 0);

_defineProperty(DropdownSelectedItem, "slotClassNames", void 0);

_defineProperty(DropdownSelectedItem, "className", 'ui-dropdown__selecteditem');

_defineProperty(DropdownSelectedItem, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  accessibility: false,
  children: false
}), {
  active: PropTypes.bool,
  header: customPropTypes.itemShorthand,
  icon: customPropTypes.itemShorthandWithoutJSX,
  image: customPropTypes.itemShorthandWithoutJSX,
  onClick: PropTypes.func,
  onKeyDown: PropTypes.func,
  onRemove: PropTypes.func
}));

_defineProperty(DropdownSelectedItem, "defaultProps", {
  icon: 'close'
});

DropdownSelectedItem.slotClassNames = {
  header: "".concat(DropdownSelectedItem.className, "__header"),
  icon: "".concat(DropdownSelectedItem.className, "__icon"),
  image: "".concat(DropdownSelectedItem.className, "__image")
};
DropdownSelectedItem.create = createShorthandFactory({
  Component: DropdownSelectedItem,
  mappedProp: 'header'
});
/**
 * A DropdownSelectedItem represents a selected item of 'multiple-selection' Dropdown.
 */

export default withSafeTypeForAs(DropdownSelectedItem);