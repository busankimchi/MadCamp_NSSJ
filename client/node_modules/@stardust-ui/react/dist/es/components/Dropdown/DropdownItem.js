import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _invoke from "lodash/invoke";
import * as customPropTypes from '@stardust-ui/react-proptypes';
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { UIComponent, createShorthandFactory, commonPropTypes } from '../../lib';
import { withSafeTypeForAs } from '../../types';
import ListItem from '../List/ListItem';
import Icon from '../Icon/Icon';
import Image from '../Image/Image';
import Box from '../Box/Box';

var DropdownItem =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(DropdownItem, _UIComponent);

  function DropdownItem() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, DropdownItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DropdownItem)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "handleClick", function (e) {
      _invoke(_this.props, 'onClick', e, _this.props);
    });

    return _this;
  }

  _createClass(DropdownItem, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var classes = _ref.classes,
          styles = _ref.styles,
          unhandledProps = _ref.unhandledProps;
      var _this$props = this.props,
          content = _this$props.content,
          header = _this$props.header,
          image = _this$props.image,
          accessibilityItemProps = _this$props.accessibilityItemProps,
          selected = _this$props.selected,
          checkable = _this$props.checkable,
          checkableIndicator = _this$props.checkableIndicator;
      return React.createElement(ListItem, _extends({
        className: DropdownItem.className,
        styles: styles.root,
        onClick: this.handleClick,
        header: Box.create(header, {
          defaultProps: function defaultProps() {
            return {
              className: DropdownItem.slotClassNames.header,
              styles: styles.header
            };
          }
        }),
        media: Image.create(image, {
          defaultProps: function defaultProps() {
            return {
              avatar: true,
              className: DropdownItem.slotClassNames.image,
              styles: styles.image
            };
          }
        }),
        content: Box.create(content, {
          defaultProps: function defaultProps() {
            return {
              className: DropdownItem.slotClassNames.content,
              styles: styles.content
            };
          }
        }),
        endMedia: selected && checkable && {
          content: Icon.create(checkableIndicator, {
            defaultProps: function defaultProps() {
              return {
                className: DropdownItem.slotClassNames.checkableIndicator,
                styles: styles.checkableIndicator
              };
            }
          }),
          styles: styles.endMedia
        },
        truncateContent: true,
        truncateHeader: true
      }, accessibilityItemProps, unhandledProps));
    }
  }]);

  return DropdownItem;
}(UIComponent);

_defineProperty(DropdownItem, "displayName", 'DropdownItem');

_defineProperty(DropdownItem, "create", void 0);

_defineProperty(DropdownItem, "className", 'ui-dropdown__item');

_defineProperty(DropdownItem, "slotClassNames", void 0);

_defineProperty(DropdownItem, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  accessibility: false,
  children: false,
  content: false
}), {
  accessibilityItemProps: PropTypes.object,
  active: PropTypes.bool,
  content: customPropTypes.itemShorthand,
  checkable: PropTypes.bool,
  checkableIndicator: customPropTypes.itemShorthandWithoutJSX,
  header: customPropTypes.itemShorthand,
  image: customPropTypes.itemShorthandWithoutJSX,
  onClick: PropTypes.func,
  isFromKeyboard: PropTypes.bool,
  selected: PropTypes.bool
}));

DropdownItem.slotClassNames = {
  content: "".concat(DropdownItem.className, "__content"),
  header: "".concat(DropdownItem.className, "__header"),
  image: "".concat(DropdownItem.className, "__image"),
  checkableIndicator: "".concat(DropdownItem.className, "__checkable-indicator")
};
DropdownItem.create = createShorthandFactory({
  Component: DropdownItem,
  mappedProp: 'header'
});
/**
 * A DropdownItem represents an option of Dropdown list.
 * Displays an item with optional rich media metadata.
 */

export default withSafeTypeForAs(DropdownItem);