import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _invoke from "lodash/invoke";
import * as customPropTypes from '@stardust-ui/react-proptypes';
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { UIComponent, createShorthandFactory, commonPropTypes } from '../../lib';
import { withSafeTypeForAs } from '../../types';
import Input from '../Input/Input';

var DropdownSearchInput =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(DropdownSearchInput, _UIComponent);

  function DropdownSearchInput() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, DropdownSearchInput);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DropdownSearchInput)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "handleFocus", function (e) {
      _invoke(_this.props, 'onFocus', e, _this.props);
    });

    _defineProperty(_assertThisInitialized(_this), "handleInputKeyDown", function (e) {
      _invoke(_this.props, 'onInputKeyDown', e, _this.props);
    });

    _defineProperty(_assertThisInitialized(_this), "handleInputBlur", function (e) {
      _invoke(_this.props, 'onInputBlur', e, _this.props);
    });

    _defineProperty(_assertThisInitialized(_this), "handleKeyUp", function (e) {
      _invoke(_this.props, 'onKeyUp', e, _this.props);
    });

    return _this;
  }

  _createClass(DropdownSearchInput, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var unhandledProps = _ref.unhandledProps,
          styles = _ref.styles;
      var _this$props = this.props,
          accessibilityComboboxProps = _this$props.accessibilityComboboxProps,
          accessibilityInputProps = _this$props.accessibilityInputProps,
          inputRef = _this$props.inputRef,
          placeholder = _this$props.placeholder;
      return React.createElement(Input, _extends({
        inputRef: inputRef,
        onFocus: this.handleFocus,
        onKeyUp: this.handleKeyUp
      }, unhandledProps, {
        wrapper: Object.assign({
          className: DropdownSearchInput.slotClassNames.wrapper,
          styles: styles.root
        }, accessibilityComboboxProps, unhandledProps.wrapper),
        input: Object.assign({
          type: 'text',
          className: DropdownSearchInput.slotClassNames.input,
          styles: styles.input,
          placeholder: placeholder,
          onBlur: this.handleInputBlur,
          onKeyDown: this.handleInputKeyDown
        }, accessibilityInputProps, unhandledProps.input)
      }));
    }
  }]);

  return DropdownSearchInput;
}(UIComponent);

_defineProperty(DropdownSearchInput, "displayName", 'DropdownSearchInput');

_defineProperty(DropdownSearchInput, "create", void 0);

_defineProperty(DropdownSearchInput, "slotClassNames", void 0);

_defineProperty(DropdownSearchInput, "className", 'ui-dropdown__searchinput');

_defineProperty(DropdownSearchInput, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  accessibility: false,
  children: false,
  content: false
}), {
  accessibilityInputProps: PropTypes.object,
  accessibilityComboboxProps: PropTypes.object,
  inline: PropTypes.bool,
  inputRef: customPropTypes.ref,
  onFocus: PropTypes.func,
  onInputBlur: PropTypes.func,
  onInputKeyDown: PropTypes.func,
  onKeyUp: PropTypes.func,
  placeholder: PropTypes.string
}));

DropdownSearchInput.slotClassNames = {
  input: "".concat(DropdownSearchInput.className, "__input"),
  wrapper: "".concat(DropdownSearchInput.className, "__wrapper")
};
DropdownSearchInput.create = createShorthandFactory({
  Component: DropdownSearchInput
});
/**
 * A DropdownSearchInput represents item of 'search' Dropdown.
 * Used to display the search input field.
 */

export default withSafeTypeForAs(DropdownSearchInput);