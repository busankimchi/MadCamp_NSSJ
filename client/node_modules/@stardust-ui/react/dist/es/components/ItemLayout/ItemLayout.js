import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import * as React from 'react';
import * as PropTypes from 'prop-types';
import cx from 'classnames';
import { createShorthandFactory, pxToRem, UIComponent, commonPropTypes, rtlTextContainer } from '../../lib';
import Layout from '../Layout/Layout';
import { withSafeTypeForAs } from '../../types';

var ItemLayout =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(ItemLayout, _UIComponent);

  function ItemLayout() {
    _classCallCheck(this, ItemLayout);

    return _possibleConstructorReturn(this, _getPrototypeOf(ItemLayout).apply(this, arguments));
  }

  _createClass(ItemLayout, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var classes = _ref.classes,
          unhandledProps = _ref.unhandledProps,
          styles = _ref.styles;
      var _this$props = this.props,
          as = _this$props.as,
          debug = _this$props.debug,
          endMedia = _this$props.endMedia,
          media = _this$props.media,
          renderMainArea = _this$props.renderMainArea,
          rootCSS = _this$props.rootCSS,
          mediaCSS = _this$props.mediaCSS,
          endMediaCSS = _this$props.endMediaCSS;
      var startArea = media;
      var mainArea = renderMainArea(this.props, this.state, classes);
      var endArea = endMedia;
      var mergedMediaClasses = cx(ItemLayout.slotClassNames.media, classes.media);
      var mergedEndMediaClasses = cx(ItemLayout.slotClassNames.endMedia, classes.endMedia);
      return React.createElement(Layout, _extends({
        as: as,
        className: classes.root,
        styles: styles.root,
        rootCSS: rootCSS,
        alignItems: "center",
        gap: pxToRem(8),
        debug: debug,
        reducing: true,
        start: startArea && React.createElement("span", {
          style: mediaCSS,
          className: mergedMediaClasses
        }, rtlTextContainer.createFor({
          element: startArea
        })),
        main: mainArea,
        end: endArea && React.createElement("span", {
          style: endMediaCSS,
          className: mergedEndMediaClasses
        }, rtlTextContainer.createFor({
          element: endArea
        }))
      }, unhandledProps));
    }
  }]);

  return ItemLayout;
}(UIComponent);

_defineProperty(ItemLayout, "create", void 0);

_defineProperty(ItemLayout, "displayName", 'ItemLayout');

_defineProperty(ItemLayout, "className", 'ui-itemlayout');

_defineProperty(ItemLayout, "slotClassNames", void 0);

_defineProperty(ItemLayout, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  accessibility: false,
  children: false,
  content: false
}), {
  contentMedia: PropTypes.any,
  content: PropTypes.any,
  debug: PropTypes.bool,
  header: PropTypes.any,
  endMedia: PropTypes.any,
  headerMedia: PropTypes.any,
  media: PropTypes.any,
  renderContentArea: PropTypes.func,
  renderHeaderArea: PropTypes.func,
  renderMainArea: PropTypes.func,
  rootCSS: PropTypes.object,
  mediaCSS: PropTypes.object,
  headerCSS: PropTypes.object,
  headerMediaCSS: PropTypes.object,
  contentCSS: PropTypes.object,
  contentMediaCSS: PropTypes.object,
  endMediaCSS: PropTypes.object
}));

_defineProperty(ItemLayout, "defaultProps", {
  as: 'div',
  renderMainArea: function renderMainArea(props, state, classes) {
    var renderHeaderArea = props.renderHeaderArea,
        renderContentArea = props.renderContentArea;
    var headerArea = renderHeaderArea(props, state, classes);
    var contentArea = renderContentArea(props, state, classes);
    return React.createElement("div", {
      className: ItemLayout.slotClassNames.main,
      style: {
        gridTemplateRows: '1fr 1fr'
      }
    }, headerArea, contentArea);
  },
  renderHeaderArea: function renderHeaderArea(props, state, classes) {
    var debug = props.debug,
        header = props.header,
        headerMedia = props.headerMedia,
        headerCSS = props.headerCSS,
        headerMediaCSS = props.headerMediaCSS;
    var mergedClasses = cx(ItemLayout.slotClassNames.header, classes.header);
    var mediaClasses = cx(ItemLayout.slotClassNames.headerMedia, classes.headerMedia);
    return !header && !headerMedia ? null : React.createElement(Layout, {
      className: mergedClasses,
      alignItems: "end",
      gap: pxToRem(8),
      debug: debug,
      main: rtlTextContainer.createFor({
        element: header
      }),
      rootCSS: headerCSS,
      end: headerMedia && React.createElement("span", {
        style: headerMediaCSS,
        className: mediaClasses
      }, rtlTextContainer.createFor({
        element: headerMedia
      }))
    });
  },
  renderContentArea: function renderContentArea(props, state, classes) {
    var debug = props.debug,
        content = props.content,
        contentMedia = props.contentMedia,
        contentCSS = props.contentCSS,
        contentMediaCSS = props.contentMediaCSS;
    var mergedClasses = cx(ItemLayout.slotClassNames.content, classes.content);
    var mediaClasses = cx(ItemLayout.slotClassNames.contentMedia, classes.contentMedia);
    return !content && !contentMedia ? null : React.createElement(Layout, {
      className: mergedClasses,
      alignItems: "start",
      gap: pxToRem(8),
      debug: debug,
      rootCSS: contentCSS,
      main: rtlTextContainer.createFor({
        element: content
      }),
      end: contentMedia && React.createElement("span", {
        style: contentMediaCSS,
        className: mediaClasses
      }, rtlTextContainer.createFor({
        element: contentMedia
      }))
    });
  }
});

ItemLayout.create = createShorthandFactory({
  Component: ItemLayout,
  mappedProp: 'content'
});
ItemLayout.slotClassNames = {
  header: "".concat(ItemLayout.className, "__header"),
  headerMedia: "".concat(ItemLayout.className, "__headerMedia"),
  main: "".concat(ItemLayout.className, "__main"),
  content: "".concat(ItemLayout.className, "__content"),
  contentMedia: "".concat(ItemLayout.className, "__contentMedia"),
  media: "".concat(ItemLayout.className, "__media"),
  endMedia: "".concat(ItemLayout.className, "__endMedia")
  /**
   * (DEPRECATED) The Item Layout handles layout styles for menu items, list items and other similar item templates.
   */

};
export default withSafeTypeForAs(ItemLayout);