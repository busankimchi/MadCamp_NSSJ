import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _invoke from "lodash/invoke";
import _get from "lodash/get";
import { textAreaBehavior } from '@stardust-ui/accessibility';
import { withSafeTypeForAs } from '../../types';
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { commonPropTypes, AutoControlledComponent, applyAccessibilityKeyHandlers } from '../../lib';

var TextArea =
/*#__PURE__*/
function (_AutoControlledCompon) {
  _inherits(TextArea, _AutoControlledCompon);

  function TextArea() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, TextArea);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TextArea)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "handleChange", function (e) {
      var value = _get(e, 'target.value');

      _invoke(_this.props, 'onChange', e, Object.assign({}, _this.props, {
        value: value
      }));

      _this.setState({
        value: value
      });
    });

    return _this;
  }

  _createClass(TextArea, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          accessibility = _ref.accessibility,
          variables = _ref.variables,
          styles = _ref.styles,
          unhandledProps = _ref.unhandledProps;
      var disabled = this.props.disabled;
      var _this$state$value = this.state.value,
          value = _this$state$value === void 0 ? '' : _this$state$value;
      return React.createElement(ElementType, _extends({
        value: value,
        className: classes.root,
        onChange: this.handleChange,
        disabled: disabled
      }, accessibility.attributes.root, unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)));
    }
  }]);

  return TextArea;
}(AutoControlledComponent);
/**
 * A TextArea is a multi-line plan-text editing control.
 *
 * @accessibility
 * For good screen reader experience set `aria-label` or `aria-labelledby` attribute for textarea.
 * When using maxlength attribute, provide the information about max length in label for screen reader.
 * @accessibilityIssues
 * [NVDA - No announcement of maxlength](https://github.com/nvaccess/nvda/issues/7910)
 * [JAWS - textarea - no announcement of maxlength](https://github.com/FreedomScientific/VFO-standards-support/issues/300)
 */


_defineProperty(TextArea, "className", 'ui-textarea');

_defineProperty(TextArea, "displayName", 'TextArea');

_defineProperty(TextArea, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  content: false
}), {
  defaultValue: PropTypes.string,
  onChange: PropTypes.func,
  value: PropTypes.string,
  disabled: PropTypes.bool
}));

_defineProperty(TextArea, "defaultProps", {
  as: 'textarea',
  accessibility: textAreaBehavior
});

_defineProperty(TextArea, "autoControlledProps", ['value']);

export default withSafeTypeForAs(TextArea);