import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _typeof from "@babel/runtime/helpers/esm/typeof";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _isBoolean from "lodash/isBoolean";
import _isFunction from "lodash/isFunction";
import _isPlainObject from "lodash/isPlainObject";
import _forEach from "lodash/forEach";
import * as customPropTypes from '@stardust-ui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react'; // @ts-ignore

import { RendererProvider, ThemeProvider, ThemeContext } from 'react-fela';
import { setUpWhatInput, tryCleanupWhatInput } from '../../lib';
import ProviderConsumer from './ProviderConsumer';
import { mergeSiteVariables } from '../../lib/mergeThemes';
import ProviderBox from './ProviderBox';
import { withSafeTypeForAs } from '../../types';
import mergeContexts from '../../lib/mergeProviderContexts';
import Telemetry from '../../lib/Telemetry';

/**
 * The Provider passes the CSS-in-JS renderer, theme styles and other settings to Stardust components.
 */
var Provider =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Provider, _React$Component);

  function Provider() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Provider);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Provider)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "outgoingContext", void 0);

    _defineProperty(_assertThisInitialized(_this), "staticStylesRendered", false);

    _defineProperty(_assertThisInitialized(_this), "telemetry", void 0);

    _defineProperty(_assertThisInitialized(_this), "renderStaticStyles", function (renderer, mergedTheme) {
      var siteVariables = mergedTheme.siteVariables;
      var staticStyles = _this.props.theme.staticStyles;
      if (!staticStyles) return;

      var renderObject = function renderObject(object) {
        _forEach(object, function (style, selector) {
          renderer.renderStatic(style, selector);
        });
      };

      staticStyles.forEach(function (staticStyle) {
        if (typeof staticStyle === 'string') {
          renderer.renderStatic(staticStyle);
        } else if (_isPlainObject(staticStyle)) {
          renderObject(staticStyle);
        } else if (_isFunction(staticStyle)) {
          var preparedSiteVariables = mergeSiteVariables(siteVariables);
          renderObject(staticStyle(preparedSiteVariables));
        } else {
          throw new Error("staticStyles array must contain CSS strings, style objects, or style functions, got: ".concat(_typeof(staticStyle)));
        }
      });
    });

    _defineProperty(_assertThisInitialized(_this), "renderFontFaces", function (renderer) {
      var fontFaces = _this.props.theme.fontFaces;
      if (!fontFaces) return;

      var renderFontObject = function renderFontObject(font) {
        if (!_isPlainObject(font)) {
          throw new Error("fontFaces must be objects, got: ".concat(_typeof(font)));
        }

        renderer.renderFont(font.name, font.paths, font.props);
      };

      fontFaces.forEach(function (font) {
        renderFontObject(font);
      });
    });

    _defineProperty(_assertThisInitialized(_this), "renderStaticStylesOnce", function (mergedTheme) {
      var staticStyles = _this.props.theme.staticStyles;

      if (!_this.staticStylesRendered && staticStyles) {
        _this.renderStaticStyles(_this.outgoingContext.renderer, mergedTheme);

        _this.staticStylesRendered = true;
      }
    });

    return _this;
  }

  _createClass(Provider, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.renderFontFaces(this.outgoingContext.renderer);

      if (this.props.target) {
        setUpWhatInput(this.props.target);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.props.target) {
        tryCleanupWhatInput(this.props.target);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          as = _this$props.as,
          children = _this$props.children,
          disableAnimations = _this$props.disableAnimations,
          overwrite = _this$props.overwrite,
          renderer = _this$props.renderer,
          rtl = _this$props.rtl,
          target = _this$props.target,
          theme = _this$props.theme,
          variables = _this$props.variables,
          telemetryRef = _this$props.telemetryRef,
          unhandledProps = _objectWithoutProperties(_this$props, ["as", "children", "disableAnimations", "overwrite", "renderer", "rtl", "target", "theme", "variables", "telemetryRef"]);

      if (telemetryRef) {
        if (!this.telemetry) {
          this.telemetry = new Telemetry();
        }

        telemetryRef['current'] = this.telemetry;
      } else if (this.telemetry) {
        delete this.telemetry;
      }

      var inputContext = {
        theme: theme,
        rtl: rtl,
        disableAnimations: disableAnimations,
        renderer: renderer,
        target: target,
        telemetry: this.telemetry
      };
      var incomingContext = overwrite ? {} : this.context; // rehydration disabled to avoid leaking styles between renderers
      // https://github.com/rofrischmann/fela/blob/master/docs/api/fela-dom/rehydrate.md

      this.outgoingContext = mergeContexts(incomingContext, inputContext);
      this.renderStaticStylesOnce(this.outgoingContext.theme);
      var rtlProps = {}; // only add dir attribute for top level provider or when direction changes from parent to child

      if (!this.context || this.context.rtl !== this.outgoingContext.rtl && _isBoolean(this.outgoingContext.rtl)) {
        rtlProps.dir = this.outgoingContext.rtl ? 'rtl' : 'ltr';
      }

      return React.createElement(RendererProvider, _extends({
        renderer: this.outgoingContext.renderer
      }, {
        rehydrate: false,
        targetDocument: this.outgoingContext.target
      }), React.createElement(ThemeProvider, {
        theme: this.outgoingContext,
        overwrite: true
      }, React.createElement(ProviderBox, _extends({
        as: as,
        variables: variables
      }, unhandledProps, rtlProps), children)));
    }
  }]);

  return Provider;
}(React.Component);

_defineProperty(Provider, "displayName", 'Provider');

_defineProperty(Provider, "propTypes", {
  as: PropTypes.elementType,
  variables: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),
  theme: PropTypes.shape({
    siteVariables: PropTypes.object,
    componentVariables: PropTypes.object,
    componentStyles: PropTypes.object,
    fontFaces: PropTypes.arrayOf(PropTypes.shape({
      name: PropTypes.string,
      paths: PropTypes.arrayOf(PropTypes.string),
      style: PropTypes.shape({
        fontStretch: PropTypes.string,
        fontStyle: PropTypes.string,
        fontVariant: PropTypes.string,
        fontWeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
        localAlias: PropTypes.string,
        unicodeRange: PropTypes.string
      })
    })),
    staticStyles: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.func])),
    animations: PropTypes.object
  }),
  renderer: PropTypes.object,
  rtl: PropTypes.bool,
  disableAnimations: PropTypes.bool,
  children: PropTypes.node.isRequired,
  target: PropTypes.object,
  telemetryRef: customPropTypes.ref
});

_defineProperty(Provider, "defaultProps", {
  theme: {}
});

_defineProperty(Provider, "Consumer", ProviderConsumer);

_defineProperty(Provider, "Box", ProviderBox);

_defineProperty(Provider, "contextType", ThemeContext);

export default withSafeTypeForAs(Provider);