import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import * as customPropTypes from '@stardust-ui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import Image from '../Image/Image';
import Label from '../Label/Label';
import Status from '../Status/Status';
import { withSafeTypeForAs } from '../../types';
import { createShorthandFactory, UIComponent, commonPropTypes } from '../../lib';

var Avatar =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(Avatar, _UIComponent);

  function Avatar() {
    _classCallCheck(this, Avatar);

    return _possibleConstructorReturn(this, _getPrototypeOf(Avatar).apply(this, arguments));
  }

  _createClass(Avatar, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var accessibility = _ref.accessibility,
          ElementType = _ref.ElementType,
          classes = _ref.classes,
          unhandledProps = _ref.unhandledProps,
          styles = _ref.styles,
          variables = _ref.variables;
      var _ref2 = this.props,
          name = _ref2.name,
          status = _ref2.status,
          image = _ref2.image,
          label = _ref2.label,
          getInitials = _ref2.getInitials,
          size = _ref2.size;
      return React.createElement(ElementType, _extends({}, accessibility.attributes.root, unhandledProps, {
        className: classes.root
      }), Image.create(image, {
        defaultProps: function defaultProps() {
          return {
            fluid: true,
            avatar: true,
            title: name,
            styles: styles.image
          };
        }
      }), !image && Label.create(label || {}, {
        defaultProps: function defaultProps() {
          return {
            content: getInitials(name),
            circular: true,
            title: name,
            styles: styles.label
          };
        }
      }), Status.create(status, {
        defaultProps: function defaultProps() {
          return {
            size: size,
            styles: styles.status,
            variables: {
              borderColor: variables.statusBorderColor,
              borderWidth: variables.statusBorderWidth
            }
          };
        }
      }));
    }
  }]);

  return Avatar;
}(UIComponent);

_defineProperty(Avatar, "create", void 0);

_defineProperty(Avatar, "className", 'ui-avatar');

_defineProperty(Avatar, "displayName", 'Avatar');

_defineProperty(Avatar, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  children: false,
  content: false
}), {
  name: PropTypes.string,
  image: customPropTypes.itemShorthandWithoutJSX,
  label: customPropTypes.itemShorthand,
  size: customPropTypes.size,
  status: customPropTypes.itemShorthand,
  getInitials: PropTypes.func
}));

_defineProperty(Avatar, "defaultProps", {
  size: 'medium',
  getInitials: function getInitials(name) {
    if (!name) {
      return '';
    }

    var reducedName = name.replace(/\s*\(.*?\)\s*/g, ' ').replace(/\s*{.*?}\s*/g, ' ').replace(/\s*\[.*?]\s*/g, ' ');
    var initials = reducedName.split(' ').filter(function (item) {
      return item !== '';
    }).map(function (item) {
      return item.charAt(0);
    }).reduce(function (accumulator, currentValue) {
      return accumulator + currentValue;
    });

    if (initials.length > 2) {
      return initials.charAt(0) + initials.charAt(initials.length - 1);
    }

    return initials;
  }
});

Avatar.create = createShorthandFactory({
  Component: Avatar,
  mappedProp: 'name'
});
/**
 * An Avatar is a graphical representation of a user.
 */

export default withSafeTypeForAs(Avatar);