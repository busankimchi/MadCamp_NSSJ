import * as React from 'react';
import { ThemeInput, Renderer, ThemePrepared } from './themes/types';
import Telemetry from './lib/Telemetry';
export declare type Extendable<T, V = any> = T & {
    [key: string]: V;
};
export declare type ResultOf<T> = T extends (...arg: any[]) => infer TResult ? TResult : never;
export declare type ObjectOf<T> = {
    [key: string]: T;
};
export declare type ObjectOrFunc<TResult, TArg = {}> = ((arg: TArg) => TResult) | TResult;
export declare type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export declare type Props<T = {}> = T & ObjectOf<any>;
export declare type ReactChildren = React.ReactNodeArray | React.ReactNode;
export declare type WithAsProp<T> = T & {
    as?: any;
};
export declare type ComponentEventHandler<TProps> = (event: React.SyntheticEvent<HTMLElement>, data?: TProps) => void;
export declare type ComponentKeyboardEventHandler<TProps> = (event: React.KeyboardEvent<any>, data?: TProps) => void;
export declare type InstanceOf<T> = T extends {
    new (...args: any[]): infer TInstance;
} ? TInstance : never;
export declare type PropsOf<T> = T extends React.Component<infer TProps> ? TProps : T extends React.FunctionComponent<infer TProps> ? TProps : T extends keyof JSX.IntrinsicElements ? JSX.IntrinsicElements[T] : never;
export declare type ShorthandRenderFunction<P> = (Component: React.ReactType, props: P) => React.ReactElement<any>;
export declare type ShorthandRenderer<P> = (value: ShorthandValue<P>, renderTree?: ShorthandRenderFunction<P>) => React.ReactElement<any>;
export declare type ShorthandRenderCallback<P> = (render: ShorthandRenderer<P>) => React.ReactElement<any>;
declare type ReactNode = React.ReactChild | React.ReactNodeArray | React.ReactPortal | boolean | null | undefined;
export declare type ShorthandValue<P> = ReactNode | Props<P>;
export declare type ShorthandCollection<P, K = never> = ShorthandValue<P & {
    kind?: K;
}>[];
declare type ValueOf<TFirst, TSecond, TKey extends keyof (TFirst & TSecond)> = TKey extends keyof TFirst ? TFirst[TKey] : TKey extends keyof TSecond ? TSecond[TKey] : {};
declare type Extended<TFirst, TSecond> = {
    [K in keyof (TFirst & TSecond)]: ValueOf<TFirst, TSecond, K>;
};
/**
 * TODO: introduce back this path once TS compiler issue that leads to
 * 'JS Heap Out Of Memory' exception will be fixed
 */
/**
 * TODO: restrict type further once TS compiler issue that leads to
 * 'JS Heap Out Of Memory' exception will be fixed
 */
declare type AsComponent<C, TProps> = {
    as: C;
} & TProps & {
    [K: string]: any;
};
declare type HoistedStaticPropsOf<T> = Exclude<keyof T, keyof React.ComponentType | 'prototype'> | 'displayName';
declare type Intersect<First extends string | number | symbol, Second extends string | number | symbol> = {
    [K in First]: K extends Second ? K : never;
}[First];
declare type PickProps<T, Props extends string | number | symbol> = {
    [K in Intersect<Props, keyof T>]: T[K];
};
export declare const withSafeTypeForAs: <TComponentType extends React.ComponentType<{}>, TProps, TAs extends "symbol" | "object" | "big" | "link" | "small" | "sub" | "sup" | "track" | "progress" | "a" | "abbr" | "address" | "area" | "article" | "aside" | "audio" | "b" | "base" | "bdo" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "footer" | "form" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "label" | "legend" | "li" | "map" | "mark" | "menu" | "meta" | "meter" | "nav" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "q" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "source" | "span" | "strong" | "style" | "table" | "tbody" | "td" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "u" | "ul" | "var" | "video" | "wbr" | "circle" | "clipPath" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "filter" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "marker" | "mask" | "path" | "metadata" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "svg" | "stop" | "switch" | "tspan" | "text" | "textPath" | "use" | "view" | "menuitem" | "bdi" | "keygen" | "main" | "noindex" | "rp" | "summary" | "webview" | "animate" | "animateMotion" | "animateTransform" | "feDropShadow" | "mpath" = "div">(componentType: TComponentType) => {
    <Tag>(x: AsComponent<Tag, TProps>): JSX.Element;
    (x: Extended<TProps, JSX.IntrinsicElements[TAs]>): JSX.Element;
} & PickProps<TComponentType, HoistedStaticPropsOf<TComponentType>>;
export declare type UNSAFE_TypedComponent<TComponentType, TProps> = React.FunctionComponent<TProps & {
    [K: string]: any;
}> & PickProps<TComponentType, keyof TComponentType>;
export declare const UNSAFE_typed: <TComponentType>(componentType: TComponentType) => {
    withProps: <TProps>() => UNSAFE_TypedComponent<TComponentType, TProps>;
};
export interface ProviderContextInput {
    renderer?: Renderer;
    rtl?: boolean;
    disableAnimations?: boolean;
    target?: Document;
    theme?: ThemeInput;
    telemetry?: Telemetry;
}
export interface ProviderContextPrepared {
    renderer: Renderer;
    rtl: boolean;
    disableAnimations: boolean;
    target: Document;
    theme: ThemePrepared;
    telemetry: Telemetry | undefined;
    _internal_resolvedComponentVariables: Record<string, object>;
}
export {};
