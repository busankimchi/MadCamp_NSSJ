import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import DropdownItem from '../../../../components/Dropdown/DropdownItem';
import getBorderFocusStyles from '../../getBorderFocusStyles';
import { pxToRem } from '../../../../lib';
var dropdownItemStyles = {
  root: function root(_ref) {
    var p = _ref.props,
        v = _ref.variables,
        siteVariables = _ref.theme.siteVariables;
    return Object.assign({
      minHeight: 0,
      padding: "".concat(pxToRem(4), " ").concat(pxToRem(11)),
      whiteSpace: 'nowrap',
      border: "".concat(v.listItemFocusBorderWidth, " solid transparent"),
      backgroundColor: v.listItemBackgroundColor
    }, p.selected && {
      fontWeight: v.listItemSelectedFontWeight,
      color: v.listItemSelectedColor
    }, {
      position: 'relative'
    }, p.active && Object.assign({}, p.isFromKeyboard && getBorderFocusStyles({
      siteVariables: siteVariables,
      borderRadius: 0
    })[':focus-visible'], !p.isFromKeyboard && Object.assign({
      color: v.listItemColorHover,
      backgroundColor: v.listItemBackgroundColorHover
    }, p.header && _defineProperty({}, "& .".concat(DropdownItem.slotClassNames.header), {
      color: v.listItemColorHover
    }), p.content && _defineProperty({}, "& .".concat(DropdownItem.slotClassNames.content), {
      color: v.listItemColorHover
    }))));
  },
  image: function image(_ref4) {
    var p = _ref4.props;
    return {
      margin: "".concat(pxToRem(3), " ").concat(pxToRem(12), " ").concat(pxToRem(3), " ").concat(pxToRem(4))
    };
  },
  header: function header(_ref5) {
    var p = _ref5.props,
        v = _ref5.variables;
    return Object.assign({
      fontSize: v.listItemHeaderFontSize,
      // if the item doesn't have content - i.e. it is header only - then it should use the content color
      color: v.listItemContentColor
    }, p.content && {
      // if there is content it needs to be "tightened up" to the header
      marginBottom: pxToRem(-1),
      color: v.listItemHeaderColor
    }, p.selected && {
      fontWeight: v.listItemSelectedFontWeight,
      color: v.listItemSelectedColor
    });
  },
  content: function content(_ref6) {
    var v = _ref6.variables;
    return {
      fontSize: v.listItemContentFontSize,
      color: v.listItemContentColor
    };
  },
  checkableIndicator: function checkableIndicator(_ref7) {
    var v = _ref7.variables;
    return {
      position: 'relative',
      left: pxToRem(3)
    };
  },
  endMedia: function endMedia() {
    return {
      lineHeight: pxToRem(16)
    };
  }
};
export default dropdownItemStyles;