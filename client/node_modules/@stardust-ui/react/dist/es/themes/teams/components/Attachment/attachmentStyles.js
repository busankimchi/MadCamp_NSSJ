import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { pxToRem } from '../../../../lib';
import Icon from '../../../../components/Icon/Icon';
import getBorderFocusStyles from '../../getBorderFocusStyles';
import getIconFillOrOutlineStyles from '../../getIconFillOrOutlineStyles';
var attachmentStyles = {
  root: function root(_ref) {
    var p = _ref.props,
        v = _ref.variables,
        siteVariables = _ref.theme.siteVariables;
    return Object.assign({
      position: 'relative',
      display: 'inline-flex',
      alignItems: 'center',
      width: '100%',
      maxWidth: pxToRem(440),
      minHeight: pxToRem(48),
      padding: v.padding,
      marginBottom: pxToRem(2),
      marginRight: pxToRem(2),
      background: v.backgroundColor,
      color: v.textColor,
      boxShadow: v.boxShadow,
      border: "".concat(siteVariables.borderWidth, " solid ").concat(v.borderColor),
      borderRadius: v.borderRadius
    }, getBorderFocusStyles({
      siteVariables: siteVariables,
      borderRadius: v.borderRadius
    }), (p.actionable || p.onClick) && {
      cursor: 'pointer',
      ':hover': {
        background: v.backgroundColorHover,
        color: v.textColorHover
      }
    });
  },
  content: function content() {
    return {
      flex: 1
    };
  },
  header: function header(_ref2) {
    var v = _ref2.variables;
    return {
      fontSize: v.headerFontSize,
      fontWeight: v.headerFontWeight,
      lineHeight: v.headerLineHeight
    };
  },
  description: function description(_ref3) {
    var v = _ref3.variables;
    return {
      display: 'block',
      opacity: 0.5,
      fontSize: v.descriptionFontSize,
      fontWeight: v.descriptionFontWeight,
      lineHeight: v.descriptionLineHeight
    };
  },
  icon: function icon(_ref4) {
    var v = _ref4.variables;
    return {
      flex: '0 0 auto',
      marginRight: v.iconSpace
    };
  },
  action: function action(_ref5) {
    var p = _ref5.props,
        v = _ref5.variables,
        siteVariables = _ref5.theme.siteVariables;
    var iconFilledStyles = getIconFillOrOutlineStyles({
      outline: false
    });
    var borderFocusStyles = getBorderFocusStyles({
      siteVariables: siteVariables,
      borderRadius: v.borderRadius
    });
    return Object.assign(_defineProperty({}, "& .".concat(Icon.className), {
      color: v.textColor // this breaks the color change on hover

    }), getIconFillOrOutlineStyles({
      outline: true
    }), {
      ':hover': iconFilledStyles,
      ':focus': borderFocusStyles[':focus'],
      ':focus-visible': Object.assign({}, iconFilledStyles, borderFocusStyles[':focus-visible'])
    });
  },
  progress: function progress(_ref6) {
    var p = _ref6.props,
        v = _ref6.variables;
    return {
      transition: 'width 0.2s',
      position: 'absolute',
      display: 'block',
      bottom: 0,
      left: 0,
      width: "".concat(p.progress, "%"),
      maxWidth: '100%',
      height: pxToRem(v.progressHeight),
      background: v.progressColor
    };
  }
};
export default attachmentStyles;