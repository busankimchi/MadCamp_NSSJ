import { getColorScheme } from '../../colors';
import { pxToRem } from '../../../../lib';
import getBorderFocusStyles from '../../getBorderFocusStyles';
var toolbarMenuItemStyles = {
  root: function root(_ref) {
    var p = _ref.props,
        v = _ref.variables,
        siteVariables = _ref.theme.siteVariables;
    var colors = getColorScheme(v.colorScheme);
    var borderFocusStyles = getBorderFocusStyles({
      siteVariables: siteVariables,
      borderRadius: 0
    });
    return Object.assign({
      position: 'relative',
      color: v.menuItemForeground || colors.foreground1,
      borderWidth: v.menuBorderWidth,
      backgroundColor: 'transparent',
      borderColor: 'transparent',
      display: 'flex',
      alignItems: 'center',
      width: '100%',
      maxWidth: '100%',
      padding: v.menuItemPadding,
      cursor: 'pointer',
      ':focus': {
        outline: 0
      },
      ':hover': {
        color: v.menuItemForegroundHover || colors.menuItemForegroundHover,
        backgroundColor: v.menuItemBackgroundHover || colors.menuItemBackgroundHover
      },
      ':focus-visible': borderFocusStyles[':focus-visible']
    }, p.disabled && {
      cursor: 'default',
      color: v.menuItemForegroundDisabled || colors.foregroundDisabled1,
      backgroundColor: v.menuItemBackgroundDisabled,
      ':hover': {// empty to overwrite all existing hover styles
      }
    });
  },
  activeIndicator: function activeIndicator(_ref2) {
    var v = _ref2.variables;
    return {
      position: 'absolute',
      right: pxToRem(7),
      top: pxToRem(7)
    };
  },
  submenuIndicator: function submenuIndicator(_ref3) {
    var v = _ref3.variables;
    return {
      position: 'absolute',
      right: pxToRem(7),
      top: pxToRem(7)
    };
  },
  wrapper: function wrapper() {
    return {
      display: 'block'
    };
  }
};
export default toolbarMenuItemStyles;