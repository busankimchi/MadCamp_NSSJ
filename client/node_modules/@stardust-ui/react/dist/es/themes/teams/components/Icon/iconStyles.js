import _get from "lodash/get";
import { callable } from '@stardust-ui/react-bindings';
import { pxToRem } from '../../../../lib';
import { getStyle as getSvgStyle } from './svg';
export var emptyIcon = {
  icon: {
    content: '?'
  }
};

var getPaddedStyle = function getPaddedStyle() {
  return {
    padding: pxToRem(4)
  };
};

var getBorderedStyles = function getBorderedStyles(boxShadowColor) {
  return Object.assign({}, getPaddedStyle(), {
    boxShadow: "0 0 0 .05rem ".concat(boxShadowColor, " inset")
  });
};

var getIconSize = function getIconSize(size, v) {
  var modifiedSizes = {
    large: {
      x: 24,
      xx: 28
    }
  };
  return v.sizeModifier && modifiedSizes[size] && modifiedSizes[size][v.sizeModifier] ? pxToRem(modifiedSizes[size][v.sizeModifier]) : v["".concat(size, "Size")];
};

var getIconColor = function getIconColor(variables, colors) {
  return _get(colors, 'foreground', variables.color || 'currentColor');
};

var getXSpacingStyles = function getXSpacingStyles(xSpacing, horizontalSpace) {
  switch (xSpacing) {
    case 'none':
      return {
        marginLeft: 0,
        marginRight: 0
      };

    case 'before':
      return {
        marginLeft: horizontalSpace,
        marginRight: 0
      };

    case 'after':
      return {
        marginLeft: 0,
        marginRight: horizontalSpace
      };

    case 'both':
      return {
        marginLeft: horizontalSpace,
        marginRight: horizontalSpace
      };
  }
};

var iconStyles = {
  root: function root(_ref) {
    var p = _ref.props,
        v = _ref.variables,
        t = _ref.theme,
        rtl = _ref.rtl;
    var iconSpec = t.icons[p.name] || emptyIcon;
    var isFontIcon = !iconSpec.isSvg;
    var colors = v.colorScheme[p.color];
    var maybeIcon = t.icons[p.name];
    var isSvgIcon = maybeIcon && maybeIcon.isSvg;
    return Object.assign({
      speak: 'none',
      verticalAlign: 'middle'
    }, getXSpacingStyles(p.xSpacing, v.horizontalSpace), p.circular && Object.assign({}, getPaddedStyle(), {
      borderRadius: '50%'
    }), p.disabled && {
      color: v.disabledColor
    }, {
      display: 'inline-block'
    }, (p.bordered || v.borderColor) && getBorderedStyles(v.borderColor || getIconColor(v, colors)), isFontIcon && {
      fontWeight: 900,
      // required for the fontAwesome to render
      alignItems: 'center',
      boxSizing: 'content-box',
      display: 'inline-flex',
      justifyContent: 'center',
      fontFamily: iconSpec.icon.fontFamily,
      fontSize: v["".concat(p.size, "Size")],
      lineHeight: 1,
      width: v["".concat(p.size, "Size")],
      height: v["".concat(p.size, "Size")],
      '::before': {
        content: iconSpec.icon.content
      },
      transform: rtl ? "scaleX(-1) rotate(".concat(-1 * p.rotate, "deg)") : "rotate(".concat(p.rotate, "deg)")
    }, isSvgIcon && {
      backgroundColor: v.backgroundColor
    });
  },
  outlinePart: function outlinePart(_ref2) {
    var p = _ref2.props;
    return Object.assign({
      display: 'none'
    }, p.outline && {
      display: 'block'
    });
  },
  filledPart: function filledPart(_ref3) {
    var p = _ref3.props;
    return Object.assign({}, p.outline && {
      display: 'none'
    });
  },
  svg: function svg(_ref4) {
    var _ref4$props = _ref4.props,
        size = _ref4$props.size,
        color = _ref4$props.color,
        disabled = _ref4$props.disabled,
        rotate = _ref4$props.rotate,
        v = _ref4.variables;
    var colors = v.colorScheme[color];
    var iconSizeInRems = getIconSize(size, v);
    return Object.assign({
      display: 'block',
      width: iconSizeInRems,
      height: iconSizeInRems,
      fill: getIconColor(v, colors)
    }, disabled && {
      fill: v.disabledColor
    }, {
      transform: "rotate(".concat(rotate, "deg)")
    }, getSvgStyle('svg'));
  },
  svgFlippingInRtl: function svgFlippingInRtl(config) {
    var props = config.props,
        rtl = config.rtl;
    return Object.assign({}, callable(iconStyles.svg)(config), rtl && {
      transform: "scaleX(-1) rotate(".concat(-1 * props.rotate, "deg)")
    });
  },
  g: getSvgStyle('g'),
  path: getSvgStyle('path'),
  secondaryPath: getSvgStyle('secondaryPath')
};
export default iconStyles;