import getBorderFocusStyles from '../../getBorderFocusStyles';
import getIconFillOrOutlineStyles from '../../getIconFillOrOutlineStyles';

var getIntentColorsFromProps = function getIntentColorsFromProps(p, v, siteVars) {
  var colors = siteVars.colors;

  if (p.danger) {
    return {
      color: v.dangerColor,
      backgroundColor: v.dangerBackgroundColor,
      borderColor: v.dangerBorderColor
    };
  }

  if (p.info) {
    return {
      color: v.infoColor,
      backgroundColor: v.infoBackgroundColor,
      borderColor: v.infoBorderColor
    };
  }

  if (v.oof) {
    return {
      color: v.oofColor,
      backgroundColor: v.oofBackgroundColor,
      borderColor: v.oofBorderColor
    };
  }

  if (v.urgent) {
    return {
      color: v.urgentColor,
      backgroundColor: v.urgentBackgroundColor,
      borderColor: v.urgentBorderColor
    };
  }

  if (p.success) {
    return {
      color: colors.green[600],
      // $app-green-04
      backgroundColor: colors.grey[50],
      // $app-white
      borderColor: colors.green[200] // $app-green

    };
  }

  if (p.warning) {
    return {
      color: siteVars.colors.grey[450],
      backgroundColor: colors.grey[50],
      // $app-white
      borderColor: colors.yellow[400] // $app-yellow

    };
  }

  return {
    color: v.color,
    backgroundColor: v.backgroundColor,
    borderColor: v.borderColor
  };
};

var alertStyles = {
  root: function root(_ref) {
    var p = _ref.props,
        v = _ref.variables,
        siteVariables = _ref.theme.siteVariables;
    return Object.assign({
      display: 'flex',
      alignItems: 'center',
      position: 'relative',
      borderStyle: v.borderStyle,
      borderWidth: v.borderWidth,
      borderRadius: v.borderRadius,
      minHeight: v.minHeight,
      padding: v.padding,
      fontWeight: v.fontWeight,
      visibility: 'visible'
    }, getIntentColorsFromProps(p, v, siteVariables), (p.attached === 'top' || p.attached === true) && {
      borderRadius: "".concat(v.borderRadius, " ").concat(v.borderRadius, " 0 0")
    }, p.attached === 'bottom' && {
      borderRadius: "0 0 ".concat(v.borderRadius, " ").concat(v.borderRadius)
    }, p.fitted && {
      display: 'inline-flex'
    }, p.dismissible && {
      padding: v.dismissiblePadding
    }, !p.visible && {
      visibility: 'hidden'
    });
  },
  actions: function actions(_ref2) {
    var v = _ref2.variables;
    return {
      margin: v.actionsMargin
    };
  },
  header: function header(_ref3) {
    var v = _ref3.variables;
    return {
      fontWeight: v.headerFontWeight,
      margin: v.headerMargin
    };
  },
  body: function body() {
    return {
      display: 'flex',
      flexGrow: 1
    };
  },
  content: function content() {
    return {
      flexGrow: 1
    };
  },
  icon: function icon(_ref4) {
    var v = _ref4.variables;
    return {
      margin: v.iconMargin
    };
  },
  dismissAction: function dismissAction(_ref5) {
    var v = _ref5.variables,
        p = _ref5.props,
        siteVariables = _ref5.theme.siteVariables;
    var iconFilledStyles = getIconFillOrOutlineStyles({
      outline: false
    });
    var borderFocusStyles = getBorderFocusStyles({
      siteVariables: siteVariables
    });
    return Object.assign({
      height: v.dismissActionSize,
      minWidth: v.dismissActionSize,
      color: v.dismissActionColor || 'currentColor',
      border: 0,
      borderRadius: v.borderRadius
    }, getIconFillOrOutlineStyles({
      outline: true
    }), {
      ':hover': Object.assign({
        color: 'currentColor'
      }, iconFilledStyles),
      ':focus': borderFocusStyles[':focus'],
      ':focus-visible': Object.assign({}, iconFilledStyles, borderFocusStyles[':focus-visible'])
    });
  }
};
export default alertStyles;