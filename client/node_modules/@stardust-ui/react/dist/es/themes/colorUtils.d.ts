import { ColorSchemeMapping, ColorScheme, ColorSchemeMappingOverrides, ComponentAreaName } from './types';
export declare const extendColorScheme: (colorScheme: ColorSchemeMapping<import("..").Extendable<Record<ComponentAreaName, string>, string>, "blue" | "green" | "grey" | "orange" | "pink" | "purple" | "red" | "teal" | "yellow" | "secondary" | "primary">, overrides: ColorSchemeMappingOverrides<import("..").Extendable<Record<ComponentAreaName, string>, string>, "blue" | "green" | "grey" | "orange" | "pink" | "purple" | "red" | "teal" | "yellow" | "secondary" | "primary">) => ColorSchemeMapping<import("..").Extendable<Record<ComponentAreaName, string>, string>, "blue" | "green" | "grey" | "orange" | "pink" | "purple" | "red" | "teal" | "yellow" | "secondary" | "primary">;
export declare function pickValuesFromColorScheme<T extends ComponentAreaName | string = ComponentAreaName>(colorScheme: ColorSchemeMapping, componentAreas: T[]): ColorSchemeMapping<ColorScheme<T>>;
