/**
 * Returns the parent node or the host of the node argument.
 * @argument {Node} node - DOM node.
 * @returns {Node} - parent DOM node.
 */
var getParentNode = function getParentNode(node) {
  if (node.nodeName === 'HTML') return node;
  return node.parentNode || node.host;
};
/**
 * Returns CSS styles of the given node.
 * @argument {Node} node - DOM node.
 * @returns {Partial<CSSStyleDeclaration>} - CSS styles.
 */


var getStyleComputedProperty = function getStyleComputedProperty(node) {
  if (node.nodeType !== 1) return {};
  var window = node.ownerDocument.defaultView;
  return window.getComputedStyle(node, null);
};
/**
 * Returns the first scrollable parent of the given element.
 * @argument {Node} node - DOM node.
 * @returns {Node} - the first scrollable parent.
 */


var getScrollParent = function getScrollParent(node) {
  // Return body, `getScroll` will take care to get the correct `scrollTop` from it
  var parentNode = node && getParentNode(node); // eslint-disable-next-line

  if (!parentNode) return document.body;

  switch (parentNode.nodeName) {
    case 'HTML':
    case 'BODY':
      return parentNode.ownerDocument.body;

    case '#document':
      return parentNode.body;
  } // If any of the overflow props is defined for the node then we return it as the parent


  var _getStyleComputedProp = getStyleComputedProperty(parentNode),
      overflow = _getStyleComputedProp.overflow,
      overflowX = _getStyleComputedProp.overflowX,
      overflowY = _getStyleComputedProp.overflowY;

  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) return parentNode;
  return getScrollParent(parentNode);
};

export default getScrollParent;