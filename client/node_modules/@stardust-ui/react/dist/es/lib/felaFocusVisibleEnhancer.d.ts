import { IRenderer } from 'fela';
declare type Renderer = IRenderer & {
    cache: Record<string, RendererChange>;
    _emitChange?: (change: RendererChange) => void;
};
declare type RendererChange = {
    type: 'RULE' | 'KEYFRAME' | 'FONT' | 'STATIC' | 'CLEAR';
    className: string;
    selector: string;
    declaration: Object;
    pseudo: string;
    media: string;
    support: string;
};
/**
 * A Fela enhancer that allows to use `:focus-visible`. Uses `what-input` library and its global
 * selector. Modifies generated selectors:
 * `.a:focus-visible {}` => `html[data-whatinput="keyboard"] a:focus`.
 */
declare const felaFocusVisibleEnhancer: (renderer: Renderer) => {
    _emitChange: (change: RendererChange) => void;
    renderRule<T = import("fela").TRuleProps>(rule: import("fela").TRule<T>, props: T): string;
    renderKeyframe<T = import("fela").TRuleProps>(keyFrame: import("fela").TKeyFrame<T>, props: T): string;
    renderFont<T = import("fela").TRuleProps>(family: string, files: string[], props: T): void;
    renderStatic(style: string, selector?: string): void;
    renderStatic(style: import("fela").IStyle, selector: string): void;
    renderToString(): string;
    subscribe(event: (msg: import("fela").ISubscribeRuleOrStaticObjectMessage | import("fela").ISubscribeKeyframesMessage | import("fela").ISubscribeFontFaceMessage | import("fela").ISubscribeStaticStringMessage | import("fela").ISubscribeClearMessage) => void): {
        unsubscribe: () => void;
    };
    clear(): void;
    cache: Record<string, RendererChange>;
};
export default felaFocusVisibleEnhancer;
