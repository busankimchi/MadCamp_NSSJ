import * as React from 'react';
import { ComponentVariablesObject, ComponentSlotClasses, ComponentSlotStylesPrepared, PropsWithVarsAndStyles, State, ThemePrepared } from '../themes/types';
import { Props, ProviderContextPrepared } from '../types';
import { ReactAccessibilityBehavior, AccessibilityActionHandlers } from './accessibility/reactTypes';
import { DebugData } from './debug/debugData';
export interface RenderResultConfig<P> {
    ElementType: React.ElementType<P>;
    classes: ComponentSlotClasses;
    unhandledProps: Props;
    variables: ComponentVariablesObject;
    styles: ComponentSlotStylesPrepared;
    accessibility: ReactAccessibilityBehavior;
    rtl: boolean;
    theme: ThemePrepared;
}
export declare type RenderComponentCallback<P> = (config: RenderResultConfig<P>) => any;
export interface RenderConfig<P> {
    className?: string;
    displayName: string;
    handledProps: string[];
    props: PropsWithVarsAndStyles;
    state: State;
    actionHandlers: AccessibilityActionHandlers;
    render: RenderComponentCallback<P>;
    saveDebug: (debug: DebugData | null) => void;
}
declare const renderComponent: <P extends {}>(config: RenderConfig<P>, context?: ProviderContextPrepared) => React.ReactElement<P, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
export default renderComponent;
