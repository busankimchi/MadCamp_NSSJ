export declare const htmlImageProps: string[];
export declare type HtmlInputEvents = 'onKeyDown' | 'onKeyPress' | 'onKeyUp' | 'onFocus' | 'onBlur' | 'onChange' | 'onInput' | 'onClick' | 'onContextMenu' | 'onDrag' | 'onDragEnd' | 'onDragEnter' | 'onDragExit' | 'onDragLeave' | 'onDragOver' | 'onDragStart' | 'onDrop' | 'onMouseDown' | 'onMouseEnter' | 'onMouseLeave' | 'onMouseMove' | 'onMouseOut' | 'onMouseOver' | 'onMouseUp' | 'onSelect' | 'onTouchCancel' | 'onTouchEnd' | 'onTouchMove' | 'onTouchStart';
export declare type HtmlInputAttrs = 'selected' | 'defaultValue' | 'defaultChecked' | 'accept' | 'autoCapitalize' | 'autoComplete' | 'autoCorrect' | 'autoFocus' | 'checked' | 'disabled' | 'form' | 'id' | 'list' | 'max' | 'maxLength' | 'min' | 'minLength' | 'multiple' | 'name' | 'pattern' | 'placeholder' | 'readOnly' | 'required' | 'step' | 'type' | 'value';
export declare type SupportedIntrinsicInputProps = {
    [K in HtmlInputProps]?: K extends keyof JSX.IntrinsicElements['input'] ? JSX.IntrinsicElements['input'][K] : any;
};
export declare const htmlInputAttrs: HtmlInputAttrs[];
export declare type HtmlInputProps = HtmlInputAttrs | HtmlInputEvents;
export declare const htmlInputEvents: HtmlInputEvents[];
export declare const htmlInputProps: HtmlInputProps[];
/**
 * Returns an array of objects consisting of: props of html input element and restProps.
 * @param {object} props A ReactElement props object
 * @param {Object} [options={}]
 * @param {Array} [options.htmlProps] An array of html input props
 * @param {boolean} [options.includeAria] Includes all input props that starts with "aria-"
 * @returns {[{}, {}]} An array of objects
 */
export declare const partitionHTMLProps: (props: any, options?: any) => {}[];
