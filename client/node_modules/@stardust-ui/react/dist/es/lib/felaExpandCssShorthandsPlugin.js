import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _typeof from "@babel/runtime/helpers/esm/typeof";
import _mapKeys from "lodash/mapKeys";
import _camelCase from "lodash/camelCase";
import expand from './cssExpandShorthand';
import * as _memoize from 'fast-memoize'; // `fast-memoize` is a CJS library, there are known issues with them:
// https://github.com/rollup/rollup/issues/1267#issuecomment-446681320

var memoize = _memoize.default || _memoize; // _.camelCase is quite fast, but we are running it for the same values many times

var camelCase = memoize(_camelCase);
var handledCssPropsMap = {
  font: 'font',
  padding: 'padding',
  margin: 'margin',
  border: 'border',
  borderWidth: 'border-width',
  borderStyle: 'border-style',
  borderColor: 'border-color',
  borderTop: 'border-top',
  borderRight: 'border-right',
  borderBottom: 'border-bottom',
  borderLeft: 'border-left',
  borderRadius: 'border-radius',
  background: 'background',
  outline: 'outline'
};
export default (function () {
  var expandCssShorthands = function expandCssShorthands(styles) {
    return Object.keys(styles).reduce(function (acc, cssPropertyName) {
      var cssPropertyValue = styles[cssPropertyName];

      if (_typeof(cssPropertyValue) === 'object') {
        return Object.assign({}, acc, _defineProperty({}, cssPropertyName, expandCssShorthands(cssPropertyValue)));
      }

      if (handledCssPropsMap[cssPropertyName]) {
        var expandedProps = expand(handledCssPropsMap[cssPropertyName], "".concat(cssPropertyValue));

        if (expandedProps) {
          return Object.assign({}, acc, convertKeysToCamelCase(expandedProps));
        }
      }

      return Object.assign({}, acc, _defineProperty({}, cssPropertyName, cssPropertyValue));
    }, {});
  };

  return expandCssShorthands;
});

var convertKeysToCamelCase = function convertKeysToCamelCase(obj) {
  return _mapKeys(obj, function (value, key) {
    return camelCase(key);
  });
};