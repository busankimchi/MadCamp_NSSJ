import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _keys from "lodash/keys";
import _intersection from "lodash/intersection";
import _isEmpty from "lodash/isEmpty";
import _pickBy from "lodash/pickBy";

var _rtlKeyMap;

import * as keyboardKey from 'keyboard-key';
import shouldHandleOnKeys from './shouldHandleOnKeys';
var rtlKeyMap = (_rtlKeyMap = {}, _defineProperty(_rtlKeyMap, keyboardKey.ArrowRight, keyboardKey.ArrowLeft), _defineProperty(_rtlKeyMap, keyboardKey.ArrowLeft, keyboardKey.ArrowRight), _rtlKeyMap);
/**
 * Assigns onKeyDown handler to the slot element, based on Component's actions
 * and keys mappings defined in Accessibility behavior
 * @param {AccessibilityActionHandlers} componentActionHandlers Actions handlers defined in a component.
 * @param {KeyActions} behaviorKeyActions Mappings of actions and keys defined in Accessibility behavior.
 * @param {boolean} isRtlEnabled Indicates if Left and Right arrow keys should be swapped in RTL mode.
 */

var getKeyDownHandlers = function getKeyDownHandlers(componentActionHandlers, behaviorKeyActions, isRtlEnabled) {
  var keyHandlers = {};
  if (!componentActionHandlers || !behaviorKeyActions) return keyHandlers;

  var _loop = function _loop(componentPart) {
    var componentPartKeyAction = _pickBy(behaviorKeyActions[componentPart], function (actions) {
      return !_isEmpty(actions.keyCombinations);
    });

    var handledActions = _intersection(_keys(componentPartKeyAction), _keys(componentActionHandlers));

    if (!handledActions.length) return "continue";
    keyHandlers[componentPart] = {
      onKeyDown: function onKeyDown(event) {
        handledActions.forEach(function (actionName) {
          var keyCombinations = componentPartKeyAction[actionName].keyCombinations;

          if (isRtlEnabled) {
            keyCombinations = keyCombinations.map(function (keyCombination) {
              var keyToRtlKey = rtlKeyMap[keyCombination.keyCode];

              if (keyToRtlKey) {
                keyCombination.keyCode = keyToRtlKey;
              }

              return keyCombination;
            });
          }

          if (shouldHandleOnKeys(event, keyCombinations)) {
            componentActionHandlers[actionName](event);
          }
        });
      }
    };
  };

  for (var componentPart in behaviorKeyActions) {
    var _ret = _loop(componentPart);

    if (_ret === "continue") continue;
  }

  return keyHandlers;
};

export default getKeyDownHandlers;