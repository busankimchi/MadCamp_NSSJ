import _typeof from "@babel/runtime/helpers/esm/typeof";

/* eslint-disable */

/* tslint:disable */
var mapObj = function mapObj(obj, cb) {
  var ret = {};
  var keys = Object.keys(obj);

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var res = cb(key, obj[key], obj);
    ret[res[0]] = res[1];
  }

  return ret;
};

var immutable = extend;
var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
  var target = {};

  for (var i = 0; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
}

var hexColorRegex = function hexColorRegex(opts) {
  opts = opts && _typeof(opts) === 'object' ? opts : {};
  return opts.strict ? /^#([a-f0-9]{3,4}|[a-f0-9]{4}(?:[a-f0-9]{2}){1,2})\b$/i : /#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})\b/gi;
};

var hslaRegex = function hslaRegex(options) {
  options = options || {};
  return options.exact ? /^hsla\((\d+),\s*([\d.]+)%,\s*([\d.]+)%,\s*(\d*(?:\.\d+)?)\)$/ : /hsla\((\d+),\s*([\d.]+)%,\s*([\d.]+)%,\s*(\d*(?:\.\d+)?)\)/gi;
};

var hslRegex = function hslRegex(options) {
  options = options || {};
  return options.exact ? /^hsl\(\s*(\d+)\s*,\s*(\d*(?:\.\d+)?%)\s*,\s*(\d*(?:\.\d+)?%)\)$/ : /hsl\(\s*(\d+)\s*,\s*(\d*(?:\.\d+)?%)\s*,\s*(\d*(?:\.\d+)?%)\)/gi;
};

var rgbRegex = function rgbRegex(options) {
  options = options || {};
  return options.exact ? /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/ : /rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)/gi;
};

var rgbaRegex = function rgbaRegex(options) {
  options = options || {};
  return options.exact ? /^rgba\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3}),\s*(\d*(?:\.\d+)?)\)$/ : /rgba\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3}),\s*(\d*(?:\.\d+)?)\)/gi;
};

var aqua = '#00ffff';
var aliceblue = '#f0f8ff';
var antiquewhite = '#faebd7';
var black = '#000000';
var blue = '#0000ff';
var cyan = '#00ffff';
var darkblue = '#00008b';
var darkcyan = '#008b8b';
var darkgreen = '#006400';
var darkturquoise = '#00ced1';
var deepskyblue = '#00bfff';
var green = '#008000';
var lime = '#00ff00';
var mediumblue = '#0000cd';
var mediumspringgreen = '#00fa9a';
var navy = '#000080';
var springgreen = '#00ff7f';
var teal = '#008080';
var midnightblue = '#191970';
var dodgerblue = '#1e90ff';
var lightseagreen = '#20b2aa';
var forestgreen = '#228b22';
var seagreen = '#2e8b57';
var darkslategray = '#2f4f4f';
var darkslategrey = '#2f4f4f';
var limegreen = '#32cd32';
var mediumseagreen = '#3cb371';
var turquoise = '#40e0d0';
var royalblue = '#4169e1';
var steelblue = '#4682b4';
var darkslateblue = '#483d8b';
var mediumturquoise = '#48d1cc';
var indigo = '#4b0082';
var darkolivegreen = '#556b2f';
var cadetblue = '#5f9ea0';
var cornflowerblue = '#6495ed';
var mediumaquamarine = '#66cdaa';
var dimgray = '#696969';
var dimgrey = '#696969';
var slateblue = '#6a5acd';
var olivedrab = '#6b8e23';
var slategray = '#708090';
var slategrey = '#708090';
var lightslategray = '#778899';
var lightslategrey = '#778899';
var mediumslateblue = '#7b68ee';
var lawngreen = '#7cfc00';
var aquamarine = '#7fffd4';
var chartreuse = '#7fff00';
var gray = '#808080';
var grey = '#808080';
var maroon = '#800000';
var olive = '#808000';
var purple = '#800080';
var lightskyblue = '#87cefa';
var skyblue = '#87ceeb';
var blueviolet = '#8a2be2';
var darkmagenta = '#8b008b';
var darkred = '#8b0000';
var saddlebrown = '#8b4513';
var darkseagreen = '#8fbc8f';
var lightgreen = '#90ee90';
var mediumpurple = '#9370db';
var darkviolet = '#9400d3';
var palegreen = '#98fb98';
var darkorchid = '#9932cc';
var yellowgreen = '#9acd32';
var sienna = '#a0522d';
var brown = '#a52a2a';
var darkgray = '#a9a9a9';
var darkgrey = '#a9a9a9';
var greenyellow = '#adff2f';
var lightblue = '#add8e6';
var paleturquoise = '#afeeee';
var lightsteelblue = '#b0c4de';
var powderblue = '#b0e0e6';
var firebrick = '#b22222';
var darkgoldenrod = '#b8860b';
var mediumorchid = '#ba55d3';
var rosybrown = '#bc8f8f';
var darkkhaki = '#bdb76b';
var silver = '#c0c0c0';
var mediumvioletred = '#c71585';
var indianred = '#cd5c5c';
var peru = '#cd853f';
var chocolate = '#d2691e';
var tan = '#d2b48c';
var lightgray = '#d3d3d3';
var lightgrey = '#d3d3d3';
var thistle = '#d8bfd8';
var goldenrod = '#daa520';
var orchid = '#da70d6';
var palevioletred = '#db7093';
var crimson = '#dc143c';
var gainsboro = '#dcdcdc';
var plum = '#dda0dd';
var burlywood = '#deb887';
var lightcyan = '#e0ffff';
var lavender = '#e6e6fa';
var darksalmon = '#e9967a';
var palegoldenrod = '#eee8aa';
var violet = '#ee82ee';
var azure = '#f0ffff';
var honeydew = '#f0fff0';
var khaki = '#f0e68c';
var lightcoral = '#f08080';
var sandybrown = '#f4a460';
var beige = '#f5f5dc';
var mintcream = '#f5fffa';
var wheat = '#f5deb3';
var whitesmoke = '#f5f5f5';
var ghostwhite = '#f8f8ff';
var lightgoldenrodyellow = '#fafad2';
var linen = '#faf0e6';
var salmon = '#fa8072';
var oldlace = '#fdf5e6';
var bisque = '#ffe4c4';
var blanchedalmond = '#ffebcd';
var coral = '#ff7f50';
var cornsilk = '#fff8dc';
var darkorange = '#ff8c00';
var deeppink = '#ff1493';
var floralwhite = '#fffaf0';
var fuchsia = '#ff00ff';
var gold = '#ffd700';
var hotpink = '#ff69b4';
var ivory = '#fffff0';
var lavenderblush = '#fff0f5';
var lemonchiffon = '#fffacd';
var lightpink = '#ffb6c1';
var lightsalmon = '#ffa07a';
var lightyellow = '#ffffe0';
var magenta = '#ff00ff';
var mistyrose = '#ffe4e1';
var moccasin = '#ffe4b5';
var navajowhite = '#ffdead';
var orange = '#ffa500';
var orangered = '#ff4500';
var papayawhip = '#ffefd5';
var peachpuff = '#ffdab9';
var pink = '#ffc0cb';
var red = '#ff0000';
var seashell = '#fff5ee';
var snow = '#fffafa';
var tomato = '#ff6347';
var white = '#ffffff';
var yellow = '#ffff00';
var rebeccapurple = '#663399';
var keywords = {
  aqua: aqua,
  aliceblue: aliceblue,
  antiquewhite: antiquewhite,
  black: black,
  blue: blue,
  cyan: cyan,
  darkblue: darkblue,
  darkcyan: darkcyan,
  darkgreen: darkgreen,
  darkturquoise: darkturquoise,
  deepskyblue: deepskyblue,
  green: green,
  lime: lime,
  mediumblue: mediumblue,
  mediumspringgreen: mediumspringgreen,
  navy: navy,
  springgreen: springgreen,
  teal: teal,
  midnightblue: midnightblue,
  dodgerblue: dodgerblue,
  lightseagreen: lightseagreen,
  forestgreen: forestgreen,
  seagreen: seagreen,
  darkslategray: darkslategray,
  darkslategrey: darkslategrey,
  limegreen: limegreen,
  mediumseagreen: mediumseagreen,
  turquoise: turquoise,
  royalblue: royalblue,
  steelblue: steelblue,
  darkslateblue: darkslateblue,
  mediumturquoise: mediumturquoise,
  indigo: indigo,
  darkolivegreen: darkolivegreen,
  cadetblue: cadetblue,
  cornflowerblue: cornflowerblue,
  mediumaquamarine: mediumaquamarine,
  dimgray: dimgray,
  dimgrey: dimgrey,
  slateblue: slateblue,
  olivedrab: olivedrab,
  slategray: slategray,
  slategrey: slategrey,
  lightslategray: lightslategray,
  lightslategrey: lightslategrey,
  mediumslateblue: mediumslateblue,
  lawngreen: lawngreen,
  aquamarine: aquamarine,
  chartreuse: chartreuse,
  gray: gray,
  grey: grey,
  maroon: maroon,
  olive: olive,
  purple: purple,
  lightskyblue: lightskyblue,
  skyblue: skyblue,
  blueviolet: blueviolet,
  darkmagenta: darkmagenta,
  darkred: darkred,
  saddlebrown: saddlebrown,
  darkseagreen: darkseagreen,
  lightgreen: lightgreen,
  mediumpurple: mediumpurple,
  darkviolet: darkviolet,
  palegreen: palegreen,
  darkorchid: darkorchid,
  yellowgreen: yellowgreen,
  sienna: sienna,
  brown: brown,
  darkgray: darkgray,
  darkgrey: darkgrey,
  greenyellow: greenyellow,
  lightblue: lightblue,
  paleturquoise: paleturquoise,
  lightsteelblue: lightsteelblue,
  powderblue: powderblue,
  firebrick: firebrick,
  darkgoldenrod: darkgoldenrod,
  mediumorchid: mediumorchid,
  rosybrown: rosybrown,
  darkkhaki: darkkhaki,
  silver: silver,
  mediumvioletred: mediumvioletred,
  indianred: indianred,
  peru: peru,
  chocolate: chocolate,
  tan: tan,
  lightgray: lightgray,
  lightgrey: lightgrey,
  thistle: thistle,
  goldenrod: goldenrod,
  orchid: orchid,
  palevioletred: palevioletred,
  crimson: crimson,
  gainsboro: gainsboro,
  plum: plum,
  burlywood: burlywood,
  lightcyan: lightcyan,
  lavender: lavender,
  darksalmon: darksalmon,
  palegoldenrod: palegoldenrod,
  violet: violet,
  azure: azure,
  honeydew: honeydew,
  khaki: khaki,
  lightcoral: lightcoral,
  sandybrown: sandybrown,
  beige: beige,
  mintcream: mintcream,
  wheat: wheat,
  whitesmoke: whitesmoke,
  ghostwhite: ghostwhite,
  lightgoldenrodyellow: lightgoldenrodyellow,
  linen: linen,
  salmon: salmon,
  oldlace: oldlace,
  bisque: bisque,
  blanchedalmond: blanchedalmond,
  coral: coral,
  cornsilk: cornsilk,
  darkorange: darkorange,
  deeppink: deeppink,
  floralwhite: floralwhite,
  fuchsia: fuchsia,
  gold: gold,
  hotpink: hotpink,
  ivory: ivory,
  lavenderblush: lavenderblush,
  lemonchiffon: lemonchiffon,
  lightpink: lightpink,
  lightsalmon: lightsalmon,
  lightyellow: lightyellow,
  magenta: magenta,
  mistyrose: mistyrose,
  moccasin: moccasin,
  navajowhite: navajowhite,
  orange: orange,
  orangered: orangered,
  papayawhip: papayawhip,
  peachpuff: peachpuff,
  pink: pink,
  red: red,
  seashell: seashell,
  snow: snow,
  tomato: tomato,
  white: white,
  yellow: yellow,
  rebeccapurple: rebeccapurple
};

var repeatElement = function repeat(ele, num) {
  var arr = new Array(num);

  for (var i = 0; i < num; i++) {
    arr[i] = ele;
  }

  return arr;
};

var cssUrlRegex = function cssUrlRegex() {
  return /url\(.*?\)/gi;
};
/**
 * @enum {number}
 */


var states = {
  VARIATION: 1,
  LINE_HEIGHT: 2,
  FONT_FAMILY: 3
  /**
   * @param {string} input
   * @return {Object}
   */

};

function parse(input) {
  var state = states.VARIATION,
      buffer = '',
      result = {
    'font-family': []
  };

  for (var c, i = 0; c = input.charAt(i); i += 1) {
    if (state === states.FONT_FAMILY && (c === '"' || c === "'")) {
      var _index = i + 1; // consume the entire string


      do {
        _index = input.indexOf(c, _index) + 1;

        if (!_index) {
          // If a string is not closed by a ' or " return null.
          // TODO: Check to see if this is correct.
          return null;
        }
      } while (input.charAt(_index - 2) === '\\');

      result['font-family'].push(input.slice(i + 1, _index - 1).replace(/\\('|")/g, '$1'));
      i = _index - 1;
      buffer = '';
    } else if (state === states.FONT_FAMILY && c === ',') {
      if (!/^\s*$/.test(buffer)) {
        result['font-family'].push(buffer.replace(/^\s+|\s+$/, '').replace(/\s+/g, ' '));
        buffer = '';
      }
    } else if (state === states.VARIATION && (c === ' ' || c === '/')) {
      if (/^((xx|x)-large|(xx|s)-small|small|large|medium)$/.test(buffer) || /^(larg|small)er$/.test(buffer) || /^(\+|-)?([0-9]*\.)?[0-9]+(em|ex|ch|rem|vh|vw|vmin|vmax|px|mm|cm|in|pt|pc|%)$/.test(buffer)) {
        state = c === '/' ? states.LINE_HEIGHT : states.FONT_FAMILY;
        result['font-size'] = buffer;
      } else if (/^(italic|oblique)$/.test(buffer)) {
        result['font-style'] = buffer;
      } else if (/^small-caps$/.test(buffer)) {
        result['font-variant'] = buffer;
      } else if (/^(bold(er)?|lighter|normal|[1-9]00)$/.test(buffer)) {
        result['font-weight'] = buffer;
      } else if (/^((ultra|extra|semi)-)?(condensed|expanded)$/.test(buffer)) {
        result['font-stretch'] = buffer;
      }

      buffer = '';
    } else if (state === states.LINE_HEIGHT && c === ' ') {
      if (/^(\+|-)?([0-9]*\.)?[0-9]+(em|ex|ch|rem|vh|vw|vmin|vmax|px|mm|cm|in|pt|pc|%)?$/.test(buffer)) {
        result['line-height'] = buffer;
      }

      state = states.FONT_FAMILY;
      buffer = '';
    } else {
      buffer += c;
    }
  }

  if (state === states.FONT_FAMILY && !/^\s*$/.test(buffer)) {
    result['font-family'].push(buffer.replace(/^\s+|\s+$/, '').replace(/\s+/g, ' '));
  }

  if (result['font-size'] && result['font-family'].length) {
    return result;
  }

  return null;
}

function font(input) {
  if (/^(inherit|initial)$/.test(input)) {
    return {
      'font-size': input,
      'line-height': input,
      'font-style': input,
      'font-weight': input,
      'font-variant': input,
      'font-stretch': input,
      'font-family': input
    };
  }

  input = input.replace(/\s*\/\s*/, '/');
  var result = parse(input);

  if (result) {
    // @ts-ignore
    result['font-family'] = result['font-family'].map(function (family) {
      return /^(serif|sans-serif|monospace|cursive|fantasy)$/.test(family) ? family : '"' + family + '"';
    }).join(', ');
  }

  return result;
}

function repeat(ele, num) {
  var arr = new Array(num);

  for (var i = 0; i < num; i++) {
    arr[i] = ele;
  }

  return arr;
}

function directional(value) {
  var values = value.split(/\s+/);
  if (values.length === 1) values = repeat(values[0], 4);else if (values.length === 2) values = values.concat(values);else if (values.length === 3) values.push(values[1]); // @ts-ignore
  else if (values.length > 4) return;
  return ['top', 'right', 'bottom', 'left'].reduce(function (acc, direction, i) {
    acc[direction] = values[i];
    return acc;
  }, {});
} // @ts-ignore


var HEX = new RegExp('^' + hexColorRegex().source + '$', 'i');
var HSLA = hslaRegex({
  exact: true
});
var HSL = hslRegex({
  exact: true
});
var RGB = rgbRegex({
  exact: true
});
var RGBA = rgbaRegex({
  exact: true
});

function isColor(value) {
  value = value.toLowerCase();
  return !!keywords[value] || value === 'currentcolor' || value === 'transparent' || HEX.test(value) || HSLA.test(value) || HSL.test(value) || RGB.test(value) || RGBA.test(value);
}

var LENGTH = /^(\+|-)?([0-9]*\.)?[0-9]+(em|ex|ch|rem|vh|vw|vmin|vmax|px|mm|cm|in|pt|pc|%)$/i;
var ZERO = /^(\+|-)?(0*\.)?0+$/;

function isLength(value) {
  return LENGTH.test(value) || ZERO.test(value);
} // @ts-ignore


var FUNCTIONS = [hslaRegex(), hslRegex(), rgbRegex(), rgbaRegex()];

function normalize(value) {
  return FUNCTIONS.reduce(function (acc, func) {
    return acc.replace(func, function (match) {
      return match.replace(/\s+/g, '');
    });
  }, value);
}

var WIDTH = /^(thin|medium|thick)$/;
var STYLE = /^(none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset)$/i;
var KEYWORD = /^(inherit|initial)$/i;

var suffix = function suffix(_suffix) {
  return function (value) {
    var longhand = directional(value);
    return longhand && mapObj(longhand, function (key, value) {
      return ['border-' + key + '-' + _suffix, value];
    });
  };
};

var direction = function direction(_direction) {
  return function (value) {
    var longhand = all(value);
    return longhand && mapObj(longhand, function (key, value) {
      return ['border-' + _direction + '-' + key, value];
    });
  };
};

var all = function all(value) {
  var values = normalize(value).split(/\s+/);
  var first = values[0]; // @ts-ignore

  if (values.length > 3) return;

  if (values.length === 1 && KEYWORD.test(first)) {
    return {
      width: first,
      style: first,
      color: first
    };
  }

  var result = {};

  for (var i = 0; i < values.length; i++) {
    var v = values[i];

    if (WIDTH.test(v) || isLength(v)) {
      // @ts-ignore
      if (result.width) return; // @ts-ignore

      result.width = v;
    } else if (STYLE.test(v)) {
      // @ts-ignore
      if (result.style) return; // @ts-ignore

      result.style = v;
    } else if (isColor(v)) {
      // @ts-ignore
      if (result.color) return; // @ts-ignore

      result.color = v;
    } else {
      // @ts-ignore
      return;
    }
  }

  return result;
};

var border = function border(value) {
  var longhand = all(value);
  return longhand && Object.keys(longhand).reduce(function (acc, key) {
    var props = border[key](longhand[key]); // @ts-ignore

    return immutable(acc, props);
  }, {});
}; // @ts-ignore


border.width = suffix('width'); // @ts-ignore

border.style = suffix('style'); // @ts-ignore

border.color = suffix('color'); // @ts-ignore

border.top = direction('top'); // @ts-ignore

border.right = direction('right'); // @ts-ignore

border.bottom = direction('bottom'); // @ts-ignore

border.left = direction('left');

var directional$1 = function directional(value) {
  var values = value.split(/\s+/);
  if (values.length === 1) values = repeatElement(values[0], 4);else if (values.length === 2) values = values.concat(values);else if (values.length === 3) values.push(values[1]); // @ts-ignore
  else if (values.length > 4) return;
  return ['top-left', 'top-right', 'bottom-right', 'bottom-left'].reduce(function (acc, direction, i) {
    acc[direction] = values[i];
    return acc;
  }, {});
};

var borderRadius = function borderRadius(value) {
  var longhand = directional$1(value);
  return longhand && mapObj(longhand, function (key, value) {
    return ['border-' + key + '-radius', value];
  });
};

var ATTACHMENT = /^(fixed|local|scroll)$/;
var BOX = /^(border-box|padding-box|content-box)$/;
var IMAGE = new RegExp('^(none|' + cssUrlRegex().source + ')$', 'i');
var REPEAT_SINGLE = /^(repeat-x|repeat-y)$/i;
var REPEAT_DOUBLE = /^(repeat|space|round|no-repeat)$/i;
var POSITION_HORIZONTAL = /^(left|center|right)$/;
var POSITION_VERTICAL = /^(top|center|bottom)$/;
var SIZE_SINGLE = /^(cover|contain)$/;
var KEYWORD$1 = /^(inherit|initial)$/i;

var normalizeUrl = function normalizeUrl(value) {
  return value.replace(cssUrlRegex(), function (match) {
    return match.replace(/^url\(\s+/, 'url(').replace(/\s+\)$/, ')');
  });
};

function background(value) {
  var result = {};
  var values = normalizeUrl(normalize(value)).replace(/\(.*\/.*\)|(\/)+/g, function (match, group1) {
    return !group1 ? match : ' / ';
  }).split(/\s+/);
  var first = values[0];

  if (values.length === 1 && KEYWORD$1.test(first)) {
    return {
      'background-attachment': first,
      'background-clip': first,
      'background-image': first,
      'background-repeat': first,
      'background-color': first,
      'background-position': first,
      'background-size': first
    };
  }

  for (var i = 0; i < values.length; i++) {
    var v = values[i];

    if (ATTACHMENT.test(v)) {
      // @ts-ignore
      if (result.attachment) return; // @ts-ignore

      result.attachment = v;
    } else if (BOX.test(v)) {
      // @ts-ignore
      if (result.clip) return; // @ts-ignore

      result.clip = v;
    } else if (IMAGE.test(v)) {
      // @ts-ignore
      if (result.image) return; // @ts-ignore

      result.image = v;
    } else if (REPEAT_SINGLE.test(v)) {
      // @ts-ignore
      if (result.repeat) return; // @ts-ignore

      result.repeat = v;
    } else if (REPEAT_DOUBLE.test(v)) {
      // @ts-ignore
      if (result.repeat) return;
      var n = values[i + 1];

      if (n && REPEAT_DOUBLE.test(n)) {
        v += ' ' + n;
        i++;
      } // @ts-ignore


      result.repeat = v;
    } else if (isColor(v)) {
      // @ts-ignore
      if (result.color) return; // @ts-ignore

      result.color = v;
    } else if (POSITION_HORIZONTAL.test(v) || POSITION_VERTICAL.test(v) || isLength(v)) {
      // @ts-ignore
      if (result.position) return;
      var _n = values[i + 1];
      var isHorizontal = POSITION_HORIZONTAL.test(v) || isLength(v);
      var isVertical = POSITION_VERTICAL.test(_n) || isLength(_n);

      if (isHorizontal && isVertical) {
        // @ts-ignore
        result.position = v + ' ' + _n;
        i++;
      } else {
        // @ts-ignore
        result.position = v;
      }

      v = values[i + 1];

      if (v === '/') {
        i += 2;
        v = values[i];

        if (SIZE_SINGLE.test(v)) {
          // @ts-ignore
          result.size = v;
        } else if (v === 'auto' || isLength(v)) {
          _n = values[i + 1];

          if (_n === 'auto' || isLength(_n)) {
            v += ' ' + _n;
            i++;
          } // @ts-ignore


          result.size = v;
        } else {
          // @ts-ignore
          return;
        }
      }
    } else {
      // @ts-ignore
      return;
    }
  }

  return mapObj(result, function (key, value) {
    return ['background-' + key, value];
  });
}

var WIDTH$1 = /^(thin|medium|thick)$/;
var STYLE$1 = /^(none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset)$/i;
var KEYWORD$2 = /^(inherit|initial)$/i;

var outline = function outline(value) {
  var values = normalize(value).split(/\s+/); // @ts-ignore

  if (values.length > 3) return;

  if (values.length === 1 && KEYWORD$2.test(values[0])) {
    return {
      'outline-width': values[0],
      'outline-style': values[0],
      'outline-color': values[0]
    };
  }

  var result = {};

  for (var i = 0; i < values.length; i++) {
    var v = values[i];

    if (isLength(v) || WIDTH$1.test(v)) {
      // @ts-ignore
      if (result['outline-width']) return;
      result['outline-width'] = v;
    } else if (STYLE$1.test(v)) {
      // @ts-ignore
      if (result['outline-style']) return;
      result['outline-style'] = v;
    } else if (isColor(v)) {
      // @ts-ignore
      if (result['outline-color']) return;
      result['outline-color'] = v;
    } else {
      // @ts-ignore
      return;
    }
  }

  return result;
};

var prefix = function prefix(_prefix) {
  return function (value) {
    var longhand = directional(value);
    return longhand && mapObj(longhand, function (key, value) {
      return [_prefix + '-' + key, value];
    });
  };
};

var shorthand = {
  font: font,
  padding: prefix('padding'),
  margin: prefix('margin'),
  border: border,
  // @ts-ignore
  'border-width': border.width,
  // @ts-ignore
  'border-style': border.style,
  // @ts-ignore
  'border-color': border.color,
  // @ts-ignore
  'border-top': border.top,
  // @ts-ignore
  'border-right': border.right,
  // @ts-ignore
  'border-bottom': border.bottom,
  // @ts-ignore
  'border-left': border.left,
  'border-radius': borderRadius,
  background: background,
  outline: outline
};

function index(property, value) {
  var normalized = value.trim();
  var important = /\s+!important$/.test(normalized);
  normalized = normalized.replace(/\s+!important$/, '');
  var parse = shorthand[property];
  var longhand = parse && parse(normalized);
  if (!longhand) return;
  if (!important) return longhand;
  return mapObj(longhand, function (key, value) {
    return [key, value + ' !important'];
  });
}

export default index;