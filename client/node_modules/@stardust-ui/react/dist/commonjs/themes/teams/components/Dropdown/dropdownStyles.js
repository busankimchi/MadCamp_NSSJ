"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _Dropdown = _interopRequireDefault(require("../../../../components/Dropdown/Dropdown"));

var _lib = require("../../../../lib");

var _getBorderFocusStyles = _interopRequireDefault(require("../../getBorderFocusStyles"));

var transparentColorStyle = {
  backgroundColor: 'transparent',
  borderColor: 'transparent',
  borderBottomColor: 'transparent'
};
var transparentColorStyleObj = Object.assign({}, transparentColorStyle, {
  ':hover': transparentColorStyle,
  ':active': transparentColorStyle,
  ':focus': Object.assign({}, transparentColorStyle, {
    ':active': transparentColorStyle
  })
});

var getIndicatorStyles = function getIndicatorStyles(_ref) {
  var v = _ref.variables;
  return {
    alignItems: 'center',
    display: 'flex',
    justifyContent: 'center',
    backgroundColor: 'transparent',
    cursor: 'pointer',
    userSelect: 'none',
    margin: 0,
    position: 'absolute',
    right: (0, _lib.pxToRem)(-2),
    height: '100%',
    width: v.toggleIndicatorSize
  };
};

var getWidth = function getWidth(p, v) {
  if (p.fluid) {
    return '100%';
  }

  if (p.inline) {
    return 'initial';
  }

  return v.width;
};

var dropdownStyles = {
  root: function root(_ref2) {
    var p = _ref2.props;
    return Object.assign({}, p.inline && {
      display: 'inline-flex'
    });
  },
  clearIndicator: getIndicatorStyles,
  container: function container(_ref3) {
    var p = _ref3.props,
        v = _ref3.variables,
        siteVariables = _ref3.theme.siteVariables;
    return Object.assign({
      display: 'flex',
      flexWrap: 'wrap',
      position: 'relative',
      borderStyle: 'solid',
      borderColor: v.borderColor,
      outline: 0,
      width: getWidth(p, v),
      borderWidth: p.search ? "0 0 ".concat(v.searchBorderBottomWidth, " 0") : v.borderWidth,
      color: v.color,
      backgroundColor: v.backgroundColor,
      borderRadius: v.containerBorderRadius
    }, p.open && p.position === 'above' && {
      borderRadius: v.openAboveContainerBorderRadius
    }, p.open && p.position === 'below' && {
      borderRadius: v.openBelowContainerBorderRadius
    }, {
      ':hover': (0, _defineProperty2.default)({
        backgroundColor: v.backgroundColorHover
      }, "& .".concat(_Dropdown.default.slotClassNames.triggerButton), {// reset all styles
      })
    }, p.focused && Object.assign({}, p.search && {
      borderBottomColor: v.borderColorFocus
    }, !p.search && !p.open && p.isFromKeyboard && (0, _getBorderFocusStyles.default)({
      siteVariables: siteVariables
    })[':focus-visible']), p.inline && Object.assign({}, transparentColorStyleObj, {
      alignItems: 'center'
    }));
  },
  selectedItems: function selectedItems(_ref4) {
    var p = _ref4.props,
        v = _ref4.variables;
    return Object.assign({
      display: 'flex',
      flexWrap: 'wrap',
      overflowY: 'auto',
      maxHeight: v.selectedItemsMaxHeight,
      width: '100%'
    }, p.toggleIndicator && {
      paddingRight: v.toggleIndicatorSize
    });
  },
  triggerButton: function triggerButton(_ref5) {
    var p = _ref5.props,
        v = _ref5.variables;
    return Object.assign({
      overflow: 'hidden',
      boxShadow: 'none',
      margin: '0',
      justifyContent: 'left',
      padding: v.comboboxPaddingButton
    }, p.multiple && {
      minWidth: 0,
      flex: 1
    }, transparentColorStyleObj, {
      ':focus': {
        color: v.color
      },
      ':focus-visible': Object.assign({
        color: v.color
      }, transparentColorStyle, {
        ':after': {
          borderColor: 'transparent'
        },
        ':before': {
          borderColor: 'transparent'
        },
        ':active': transparentColorStyle
      }),
      ':hover': Object.assign({}, transparentColorStyle)
    }, p.inline && {
      paddingLeft: 0,
      paddingRight: 0,
      width: 'initial'
    });
  },
  list: function list(_ref6) {
    var p = _ref6.props,
        v = _ref6.variables;
    return Object.assign({
      outline: 0,
      borderStyle: 'solid',
      borderWidth: p.open ? v.listBorderWidth : '0px',
      borderColor: v.listBorderColor,
      zIndex: 1000,
      maxHeight: v.listMaxHeight,
      overflowY: 'auto',
      width: getWidth(p, v),
      background: v.listBackgroundColor
    }, p.position === 'above' && {
      borderRadius: v.aboveListBorderRadius
    }, p.position === 'below' && {
      borderRadius: v.belowListBorderRadius
    }, p.open && {
      boxShadow: v.listBoxShadow,
      padding: v.listPadding
    });
  },
  loadingMessage: function loadingMessage(_ref7) {
    var v = _ref7.variables;
    return {
      backgroundColor: v.listItemBackgroundColor
    };
  },
  noResultsMessage: function noResultsMessage(_ref8) {
    var v = _ref8.variables;
    return {
      backgroundColor: v.listItemBackgroundColor,
      fontWeight: 'bold'
    };
  },
  toggleIndicator: getIndicatorStyles
};
var _default = dropdownStyles;
exports.default = _default;