"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.underlinedItem = exports.verticalPointingBottomMargin = exports.horizontalPillsRightMargin = exports.verticalPillsBottomMargin = void 0;

var _lib = require("../../../../lib");

var _colors = require("../../colors");

var _getIconFillOrOutlineStyles = _interopRequireDefault(require("../../getIconFillOrOutlineStyles"));

var verticalPillsBottomMargin = (0, _lib.pxToRem)(5);
exports.verticalPillsBottomMargin = verticalPillsBottomMargin;
var horizontalPillsRightMargin = (0, _lib.pxToRem)(8);
exports.horizontalPillsRightMargin = horizontalPillsRightMargin;
var verticalPointingBottomMargin = (0, _lib.pxToRem)(12);
exports.verticalPointingBottomMargin = verticalPointingBottomMargin;

var underlinedItem = function underlinedItem(color) {
  return {
    paddingBottom: 0,
    borderBottom: "solid ".concat((0, _lib.pxToRem)(4), " ").concat(color),
    transition: 'color .1s ease'
  };
};

exports.underlinedItem = underlinedItem;

var getActionStyles = function getActionStyles(_ref) {
  var _ref$props = _ref.props,
      primary = _ref$props.primary,
      underlined = _ref$props.underlined,
      iconOnly = _ref$props.iconOnly,
      v = _ref.variables,
      colors = _ref.colors;
  return underlined || iconOnly ? {
    color: v.color
  } : primary ? {
    color: colors.foregroundActive,
    background: v.backgroundColorActive || colors.backgroundActive
  } : {
    color: v.color,
    background: v.backgroundColorActive || colors.backgroundActive
  };
};

var getFocusedStyles = function getFocusedStyles(_ref2) {
  var props = _ref2.props,
      v = _ref2.variables,
      colors = _ref2.colors;
  var primary = props.primary,
      underlined = props.underlined,
      isFromKeyboard = props.isFromKeyboard,
      active = props.active,
      vertical = props.vertical;
  if (active && !underlined && !vertical) return {};
  return Object.assign({
    color: primary ? colors.foregroundFocus : v.colorActive,
    background: v.backgroundColorFocus || colors.backgroundFocus
  }, vertical && isFromKeyboard && !primary ? {
    border: "solid 1px ".concat(v.borderColorFocus),
    outline: "solid 1px ".concat(v.outlineColorFocus),
    margin: (0, _lib.pxToRem)(1),
    background: v.verticalBackgroundColorFocus || colors.backgroundFocus
  } : {});
};

var getHoverStyles = function getHoverStyles(_ref3) {
  var props = _ref3.props,
      v = _ref3.variables,
      colors = _ref3.colors;
  var underlined = props.underlined,
      active = props.active,
      vertical = props.vertical;
  if (active && !underlined && !vertical) return {};
  return Object.assign({}, underlined ? {
    color: v.colorActive
  } : {
    color: colors.foregroundHover,
    background: v.backgroundColorHover || colors.backgroundHover
  });
};

var pointingBeak = function pointingBeak(_ref4) {
  var props = _ref4.props,
      v = _ref4.variables,
      colors = _ref4.colors;
  var pointing = props.pointing,
      primary = props.primary;
  var top;
  var borders;
  var backgroundColor = v.backgroundColorActive || colors.backgroundActive;
  var borderColor = v.borderColor || primary ? v.primaryBorderColor : colors.border;

  if (pointing === 'start') {
    borders = {
      borderTop: "1px solid ".concat(borderColor),
      borderLeft: "1px solid ".concat(borderColor)
    };
    top = '-1px'; // 1px for the border
  } else {
    borders = {
      borderBottom: "1px solid ".concat(borderColor),
      borderRight: "1px solid ".concat(borderColor)
    };
    top = '100%';
  }

  return {
    '::after': Object.assign({
      visibility: 'visible',
      background: backgroundColor,
      position: 'absolute',
      content: '""',
      top: top,
      left: '50%',
      transform: 'translateX(-50%) translateY(-50%) rotate(45deg)',
      margin: '.5px 0 0',
      width: (0, _lib.pxToRem)(10),
      height: (0, _lib.pxToRem)(10),
      border: 'none'
    }, borders, {
      zIndex: 2,
      transition: 'background .1s ease'
    })
  };
};

var menuItemStyles = {
  wrapper: function wrapper(_ref5) {
    var props = _ref5.props,
        v = _ref5.variables,
        theme = _ref5.theme;
    var active = props.active,
        disabled = props.disabled,
        iconOnly = props.iconOnly,
        isFromKeyboard = props.isFromKeyboard,
        pills = props.pills,
        pointing = props.pointing,
        secondary = props.secondary,
        underlined = props.underlined,
        vertical = props.vertical,
        primary = props.primary;
    var colors = (0, _colors.getColorScheme)(v.colorScheme, null, primary);
    return Object.assign({
      color: 'inherit',
      lineHeight: 1,
      position: 'relative',
      verticalAlign: 'middle',
      display: 'block'
    }, secondary && {
      background: 'salmon'
    }, vertical && {
      border: "solid ".concat(v.verticalItemBorderWidth, " ").concat(v.verticalItemBorderColor)
    }, pills && Object.assign({}, vertical ? {
      margin: "0 0 ".concat(verticalPillsBottomMargin, " 0")
    } : {
      margin: "0 ".concat(horizontalPillsRightMargin, " 0 0")
    }, {
      borderRadius: (0, _lib.pxToRem)(5)
    }), underlined && {
      display: 'flex',
      alignItems: 'center',
      height: (0, _lib.pxToRem)(29),
      lineHeight: v.lineHeightBase,
      padding: "0 ".concat((0, _lib.pxToRem)(4)),
      margin: "0 ".concat((0, _lib.pxToRem)(4), " 0 0"),
      ':nth-child(n+2)': {
        marginLeft: "".concat((0, _lib.pxToRem)(4))
      },
      boxShadow: 'none'
    }, !vertical && !pills && !underlined && !iconOnly && {
      boxShadow: "-1px 0 0 0 ".concat(primary ? v.primaryBorderColor : v.borderColor || colors.border, " inset")
    }, active && Object.assign({}, getActionStyles({
      props: props,
      variables: v,
      colors: colors
    }), pointing && vertical && !isFromKeyboard && {
      '::before': Object.assign({
        content: "''",
        position: 'absolute',
        width: (0, _lib.pxToRem)(3),
        height: "calc(100% + ".concat((0, _lib.pxToRem)(4), ")"),
        top: (0, _lib.pxToRem)(-2),
        backgroundColor: v.pointingIndicatorBackgroundColor
      }, pointing === 'end' ? {
        right: (0, _lib.pxToRem)(-2)
      } : {
        left: (0, _lib.pxToRem)(-2)
      })
    }, pointing && !vertical && Object.assign({}, pointingBeak({
      props: props,
      variables: v,
      colors: colors
    }))), iconOnly && Object.assign({
      display: 'flex'
    }, isFromKeyboard && {
      color: v.iconOnlyColorActive
    }, {
      // hover styles
      ':hover': {
        color: v.iconOnlyColorActive
      }
    }), !iconOnly && Object.assign({}, isFromKeyboard && getFocusedStyles({
      props: props,
      variables: v,
      colors: colors
    }), {
      // hover styles
      ':hover': getHoverStyles({
        props: props,
        variables: v,
        colors: colors
      })
    }), {
      ':first-child': Object.assign({}, !pills && !iconOnly && !(pointing && vertical) && !underlined && Object.assign({}, vertical && {
        '::before': {
          display: 'none'
        }
      }, !vertical && {
        borderBottomLeftRadius: (0, _lib.pxToRem)(3),
        borderTopLeftRadius: (0, _lib.pxToRem)(3)
      }))
    }, disabled && {
      color: v.colorDisabled || colors.foregroundDisabled,
      ':hover': {// empty - overwrite all existing hover styles
      }
    });
  },
  root: function root(_ref6) {
    var p = _ref6.props,
        v = _ref6.variables;
    var active = p.active,
        iconOnly = p.iconOnly,
        isFromKeyboard = p.isFromKeyboard,
        pointing = p.pointing,
        primary = p.primary,
        underlined = p.underlined,
        vertical = p.vertical,
        disabled = p.disabled;
    var colors = (0, _colors.getColorScheme)(v.colorScheme, null, primary);
    return Object.assign({
      color: 'inherit',
      display: 'block',
      cursor: 'pointer',
      whiteSpace: 'nowrap'
    }, pointing && vertical && {
      border: '1px solid transparent'
    }, iconOnly && {
      border: "".concat((0, _lib.pxToRem)(2), " solid transparent")
    }, underlined ? {
      padding: "".concat((0, _lib.pxToRem)(4), " 0")
    } : pointing && vertical ? {
      padding: "".concat((0, _lib.pxToRem)(8), " ").concat((0, _lib.pxToRem)(18))
    } : vertical ? {
      padding: v.verticalItemPadding
    } : {
      padding: v.horizontalPadding
    }, iconOnly && {
      margin: (0, _lib.pxToRem)(1),
      padding: (0, _lib.pxToRem)(5),
      // padding works this way to get the border to only be 30x30px on focus which is the current design
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center'
    }, active && Object.assign({}, iconOnly && Object.assign({
      color: v.iconOnlyColorActive
    }, (0, _getIconFillOrOutlineStyles.default)({
      outline: false
    })), primary ? Object.assign({}, underlined && Object.assign({
      color: colors.borderActive
    }, underlinedItem(v.borderColorActive || colors.borderActive))) : underlined && Object.assign({
      fontWeight: 700
    }, underlinedItem(v.colorActive))), isFromKeyboard && Object.assign({}, iconOnly && Object.assign({
      borderRadius: '50%',
      borderColor: v.iconOnlyColorActive
    }, (0, _getIconFillOrOutlineStyles.default)({
      outline: false
    })), primary ? Object.assign({}, iconOnly && {
      color: 'inherit',
      borderColor: v.borderColorActive || colors.borderActive
    }, underlined && {
      color: 'inherit'
    }, underlined && active && underlinedItem(colors.foregroundActive)) : Object.assign({}, underlined && {
      fontWeight: 700
    }, underlined && active && underlinedItem(v.colorActive))), {
      ':focus': {
        outline: 0
      },
      // hover styles
      ':hover': Object.assign({
        color: 'inherit'
      }, iconOnly && (0, _getIconFillOrOutlineStyles.default)({
        outline: false
      }), primary ? Object.assign({}, iconOnly && {
        color: 'inherit'
      }, !active && underlined && underlinedItem(v.underlinedBorderColor || colors.backgroundActive)) : !active && underlined && underlinedItem(v.backgroundColorActive || colors.backgroundActive))
    }, disabled && {
      cursor: 'default',
      ':hover': {
        // reset all existing hover styles
        color: 'inherit'
      }
    });
  },
  content: function content(_ref7) {
    var p = _ref7.props;
    var widthAdjust = (p.icon ? 26 : 0) + (p.menu ? 16 : 0);
    return Object.assign({
      whiteSpace: 'normal',
      lineHeight: 1.5,
      marginTop: (0, _lib.pxToRem)(-4),
      marginBottom: (0, _lib.pxToRem)(-4),
      display: 'inline-block'
    }, (p.inSubmenu || p.vertical) && {
      width: 'max-content',
      minWidth: (0, _lib.pxToRem)(46 - widthAdjust),
      maxWidth: (0, _lib.pxToRem)(262 - widthAdjust),
      marginRight: (0, _lib.pxToRem)(16)
    });
  },
  icon: function icon(_ref8) {
    var p = _ref8.props;
    return Object.assign({}, !p.iconOnly && {
      // reduce margins so text has the dominant influence on the vertical height
      marginTop: 0,
      marginBottom: (0, _lib.pxToRem)(-8),
      verticalAlign: 'top'
    });
  },
  menu: function menu() {
    return {
      zIndex: 1000
    };
  },
  indicator: function indicator(_ref9) {
    var p = _ref9.props;
    return Object.assign({
      position: 'relative',
      float: 'right',
      left: (0, _lib.pxToRem)(12),
      userSelect: 'none',
      marginRight: (0, _lib.pxToRem)(4)
    }, p.inSubmenu && {
      position: 'absolute',
      top: (0, _lib.pxToRem)(6),
      right: (0, _lib.pxToRem)(2),
      left: 'unset'
    });
  }
};
var _default = menuItemStyles;
exports.default = _default;