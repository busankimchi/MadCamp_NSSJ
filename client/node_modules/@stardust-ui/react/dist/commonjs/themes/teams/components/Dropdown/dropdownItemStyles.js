"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _DropdownItem = _interopRequireDefault(require("../../../../components/Dropdown/DropdownItem"));

var _getBorderFocusStyles = _interopRequireDefault(require("../../getBorderFocusStyles"));

var _lib = require("../../../../lib");

var dropdownItemStyles = {
  root: function root(_ref) {
    var p = _ref.props,
        v = _ref.variables,
        siteVariables = _ref.theme.siteVariables;
    return Object.assign({
      minHeight: 0,
      padding: "".concat((0, _lib.pxToRem)(4), " ").concat((0, _lib.pxToRem)(11)),
      whiteSpace: 'nowrap',
      border: "".concat(v.listItemFocusBorderWidth, " solid transparent"),
      backgroundColor: v.listItemBackgroundColor
    }, p.selected && {
      fontWeight: v.listItemSelectedFontWeight,
      color: v.listItemSelectedColor
    }, {
      position: 'relative'
    }, p.active && Object.assign({}, p.isFromKeyboard && (0, _getBorderFocusStyles.default)({
      siteVariables: siteVariables,
      borderRadius: 0
    })[':focus-visible'], !p.isFromKeyboard && Object.assign({
      color: v.listItemColorHover,
      backgroundColor: v.listItemBackgroundColorHover
    }, p.header && (0, _defineProperty2.default)({}, "& .".concat(_DropdownItem.default.slotClassNames.header), {
      color: v.listItemColorHover
    }), p.content && (0, _defineProperty2.default)({}, "& .".concat(_DropdownItem.default.slotClassNames.content), {
      color: v.listItemColorHover
    }))));
  },
  image: function image(_ref4) {
    var p = _ref4.props;
    return {
      margin: "".concat((0, _lib.pxToRem)(3), " ").concat((0, _lib.pxToRem)(12), " ").concat((0, _lib.pxToRem)(3), " ").concat((0, _lib.pxToRem)(4))
    };
  },
  header: function header(_ref5) {
    var p = _ref5.props,
        v = _ref5.variables;
    return Object.assign({
      fontSize: v.listItemHeaderFontSize,
      // if the item doesn't have content - i.e. it is header only - then it should use the content color
      color: v.listItemContentColor
    }, p.content && {
      // if there is content it needs to be "tightened up" to the header
      marginBottom: (0, _lib.pxToRem)(-1),
      color: v.listItemHeaderColor
    }, p.selected && {
      fontWeight: v.listItemSelectedFontWeight,
      color: v.listItemSelectedColor
    });
  },
  content: function content(_ref6) {
    var v = _ref6.variables;
    return {
      fontSize: v.listItemContentFontSize,
      color: v.listItemContentColor
    };
  },
  checkableIndicator: function checkableIndicator(_ref7) {
    var v = _ref7.variables;
    return {
      position: 'relative',
      left: (0, _lib.pxToRem)(3)
    };
  },
  endMedia: function endMedia() {
    return {
      lineHeight: (0, _lib.pxToRem)(16)
    };
  }
};
var _default = dropdownItemStyles;
exports.default = _default;