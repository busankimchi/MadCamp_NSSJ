"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _accessibility = require("@stardust-ui/accessibility");

var customPropTypes = _interopRequireWildcard(require("@stardust-ui/react-proptypes"));

var React = _interopRequireWildcard(require("react"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var _lib = require("../../lib");

var _types = require("../../types");

var _Icon = _interopRequireDefault(require("../Icon/Icon"));

var _Text = _interopRequireDefault(require("../Text/Text"));

var Checkbox =
/*#__PURE__*/
function (_AutoControlledCompon) {
  (0, _inherits2.default)(Checkbox, _AutoControlledCompon);

  function Checkbox() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Checkbox);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Checkbox)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "actionHandlers", {
      performClick: function performClick(e)
      /* TODO: use React.KeyboardEvent */
      {
        e.preventDefault();

        _this.handleClick(e);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleChange", function (e) {
      // Checkbox component doesn't present any `input` component in markup, however all of our
      // components should handle events transparently.
      var disabled = _this.props.disabled;
      var checked = !_this.state.checked;

      if (!disabled) {
        _this.setState({
          checked: checked
        });

        (0, _invoke2.default)(_this.props, 'onChange', e, Object.assign({}, _this.props, {
          checked: checked
        }));
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleClick", function (e) {
      var disabled = _this.props.disabled;
      var checked = !_this.state.checked;

      if (!disabled) {
        _this.setState({
          checked: checked
        });

        (0, _invoke2.default)(_this.props, 'onClick', e, Object.assign({}, _this.props, {
          checked: checked
        }));
        (0, _invoke2.default)(_this.props, 'onChange', e, Object.assign({}, _this.props, {
          checked: checked
        }));
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleFocus", function (e) {
      (0, _invoke2.default)(_this.props, 'onFocus', e, _this.props);
    });
    return _this;
  }

  (0, _createClass2.default)(Checkbox, [{
    key: "getInitialAutoControlledState",
    value: function getInitialAutoControlledState() {
      return {
        checked: false
      };
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var _this2 = this;

      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          unhandledProps = _ref.unhandledProps,
          styles = _ref.styles,
          accessibility = _ref.accessibility;
      var _this$props = this.props,
          label = _this$props.label,
          labelPosition = _this$props.labelPosition,
          icon = _this$props.icon,
          toggle = _this$props.toggle;

      var labelElement = _Text.default.create(label, {
        defaultProps: function defaultProps() {
          return {
            styles: styles.label,
            className: Checkbox.slotClassNames.label
          };
        }
      });

      return React.createElement(ElementType, (0, _extends2.default)({
        className: classes.root,
        onClick: this.handleClick,
        onChange: this.handleChange,
        onFocus: this.handleFocus
      }, accessibility.attributes.root, unhandledProps, (0, _lib.applyAccessibilityKeyHandlers)(accessibility.keyHandlers.root, unhandledProps)), labelPosition === 'start' && labelElement, _Icon.default.create(icon, {
        defaultProps: function defaultProps() {
          return {
            outline: toggle && !_this2.state.checked,
            size: toggle ? 'medium' : 'smaller',
            className: Checkbox.slotClassNames.indicator,
            name: toggle ? 'stardust-circle' : 'stardust-checkmark',
            styles: toggle ? styles.toggle : styles.checkbox
          };
        }
      }), labelPosition === 'end' && labelElement);
    }
  }]);
  return Checkbox;
}(_lib.AutoControlledComponent);

(0, _defineProperty2.default)(Checkbox, "slotClassNames", void 0);
(0, _defineProperty2.default)(Checkbox, "create", void 0);
(0, _defineProperty2.default)(Checkbox, "displayName", 'Checkbox');
(0, _defineProperty2.default)(Checkbox, "className", 'ui-checkbox');
(0, _defineProperty2.default)(Checkbox, "propTypes", Object.assign({}, _lib.commonPropTypes.createCommon({
  content: false
}), {
  checked: PropTypes.bool,
  defaultChecked: PropTypes.bool,
  disabled: PropTypes.bool,
  icon: customPropTypes.itemShorthandWithoutJSX,
  label: customPropTypes.itemShorthand,
  labelPosition: PropTypes.oneOf(['start', 'end']),
  onChange: PropTypes.func,
  onClick: PropTypes.func,
  toggle: PropTypes.bool
}));
(0, _defineProperty2.default)(Checkbox, "defaultProps", {
  accessibility: _accessibility.checkboxBehavior,
  icon: {},
  labelPosition: 'end'
});
(0, _defineProperty2.default)(Checkbox, "autoControlledProps", ['checked']);
Checkbox.slotClassNames = {
  label: "".concat(Checkbox.className, "__label"),
  indicator: "".concat(Checkbox.className, "__indicator")
};
Checkbox.create = (0, _lib.createShorthandFactory)({
  Component: Checkbox,
  mappedProp: 'label'
});
/**
 * A Checkbox allows a user to make a choice between two mutually exclusive options.
 *
 * @accessibility
 * Implements [ARIA Checkbox](https://www.w3.org/TR/wai-aria-practices-1.1/#checkbox) design pattern.
 */

var _default = (0, _types.withSafeTypeForAs)(Checkbox);

exports.default = _default;