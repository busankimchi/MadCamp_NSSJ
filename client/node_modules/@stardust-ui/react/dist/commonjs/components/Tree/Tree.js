"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _reduce2 = _interopRequireDefault(require("lodash/reduce"));

var _accessibility = require("@stardust-ui/accessibility");

var _reactBindings = require("@stardust-ui/react-bindings");

var customPropTypes = _interopRequireWildcard(require("@stardust-ui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _reactComponentRef = require("@stardust-ui/react-component-ref");

var _TreeItem = _interopRequireDefault(require("./TreeItem"));

var _lib = require("../../lib");

var _types = require("../../types");

var _lib2 = require("./lib");

var Tree =
/*#__PURE__*/
function (_AutoControlledCompon) {
  (0, _inherits2.default)(Tree, _AutoControlledCompon);

  function Tree() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Tree);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Tree)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "treeRef", React.createRef());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleTreeItemOverrides", function (predefinedProps) {
      return {
        onTitleClick: function onTitleClick(e, treeItemProps) {
          if (!(0, _lib2.hasSubtree)(treeItemProps)) {
            return;
          }

          var activeItemIds = _this.state.activeItemIds;
          var id = treeItemProps.id,
              siblings = treeItemProps.siblings;
          var exclusive = _this.props.exclusive;
          var activeItemIdIndex = activeItemIds.indexOf(id);

          if (activeItemIdIndex > -1) {
            activeItemIds = (0, _lib2.removeItemAtIndex)(activeItemIds, activeItemIdIndex);
          } else {
            if (exclusive) {
              siblings.some(function (sibling) {
                var activeSiblingIdIndex = activeItemIds.indexOf(sibling['id']);

                if (activeSiblingIdIndex > -1) {
                  activeItemIds = (0, _lib2.removeItemAtIndex)(activeItemIds, activeSiblingIdIndex);
                  return true;
                }

                return false;
              });
            }

            activeItemIds = [].concat((0, _toConsumableArray2.default)(activeItemIds), [id]);
          }

          _this.setState({
            activeItemIds: activeItemIds
          });

          (0, _invoke2.default)(predefinedProps, 'onTitleClick', e, treeItemProps);
        },
        onFocusParent: function onFocusParent(e, treeItemProps) {
          var parent = treeItemProps.parent;

          if (!parent) {
            return;
          }

          var itemsForRender = _this.state.itemsForRender;
          var parentItemForRender = itemsForRender[parent['id']];

          if (!parentItemForRender || !parentItemForRender.elementRef || !parentItemForRender.elementRef.current) {
            return;
          }

          parentItemForRender.elementRef.current.focus();
          (0, _invoke2.default)(predefinedProps, 'onFocusParent', e, treeItemProps);
        },
        onFocusFirstChild: function onFocusFirstChild(e, treeItemProps) {
          var id = treeItemProps.id;
          var itemsForRender = _this.state.itemsForRender;
          var currentElement = itemsForRender[id].elementRef;

          if (!currentElement || !currentElement.current) {
            return;
          }

          var elementToBeFocused = (0, _reactBindings.getNextElement)(_this.treeRef.current, currentElement.current);

          if (!elementToBeFocused) {
            return;
          }

          elementToBeFocused.focus();
          (0, _invoke2.default)(predefinedProps, 'onFocusFirstChild', e, treeItemProps);
        },
        onSiblingsExpand: function onSiblingsExpand(e, treeItemProps) {
          if (_this.props.exclusive) {
            return;
          }

          var id = treeItemProps.id,
              siblings = treeItemProps.siblings;
          var activeItemIds = _this.state.activeItemIds;
          siblings.forEach(function (sibling) {
            if ((0, _lib2.hasSubtree)(sibling) && !_this.isActiveItem(sibling['id'])) {
              activeItemIds.push(sibling['id']);
            }
          });

          if ((0, _lib2.hasSubtree)(treeItemProps) && !_this.isActiveItem(id)) {
            activeItemIds.push(id);
          }

          _this.setState({
            activeItemIds: activeItemIds
          });

          (0, _invoke2.default)(predefinedProps, 'onSiblingsExpand', e, treeItemProps);
        }
      };
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isActiveItem", function (id) {
      var activeItemIds = _this.state.activeItemIds;
      return activeItemIds.indexOf(id) > -1;
    });
    return _this;
  }

  (0, _createClass2.default)(Tree, [{
    key: "getInitialAutoControlledState",
    value: function getInitialAutoControlledState() {
      return {
        activeItemIds: []
      };
    }
  }, {
    key: "renderContent",
    value: function renderContent(accessibility) {
      var _this2 = this;

      var itemsForRender = this.state.itemsForRender;
      var _this$props = this.props,
          items = _this$props.items,
          renderItemTitle = _this$props.renderItemTitle;
      if (!items) return null;

      var renderItems = function renderItems(items) {
        return items.reduce(function (renderedItems, item) {
          var itemForRender = itemsForRender[item['id']];
          var elementRef = itemForRender.elementRef,
              restItemForRender = (0, _objectWithoutProperties2.default)(itemForRender, ["elementRef"]);
          var isSubtree = (0, _lib2.hasSubtree)(item);

          var isSubtreeOpen = isSubtree && _this2.isActiveItem(item['id']);

          var renderedItem = _TreeItem.default.create(item, {
            defaultProps: function defaultProps() {
              return Object.assign({
                accessibility: accessibility.childBehaviors ? accessibility.childBehaviors.item : undefined,
                className: Tree.slotClassNames.item,
                open: isSubtreeOpen,
                renderItemTitle: renderItemTitle,
                key: item['id'],
                contentRef: elementRef
              }, restItemForRender);
            },
            overrideProps: _this2.handleTreeItemOverrides
          });

          return [].concat((0, _toConsumableArray2.default)(renderedItems), [renderedItem], (0, _toConsumableArray2.default)(isSubtreeOpen ? renderItems(item['items']) : []));
        }, []);
      };

      return renderItems(items);
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          accessibility = _ref.accessibility,
          unhandledProps = _ref.unhandledProps;
      var _this$props2 = this.props,
          children = _this$props2.children,
          renderedItems = _this$props2.renderedItems;
      return React.createElement(_reactComponentRef.Ref, {
        innerRef: this.treeRef
      }, React.createElement(ElementType, (0, _extends2.default)({
        className: classes.root
      }, accessibility.attributes.root, _lib.rtlTextContainer.getAttributes({
        forElements: [children]
      }), unhandledProps, (0, _lib.applyAccessibilityKeyHandlers)(accessibility.keyHandlers.root, unhandledProps)), (0, _lib.childrenExist)(children) ? children : renderedItems ? renderedItems(this.renderContent(accessibility)) : this.renderContent(accessibility)));
    }
  }], [{
    key: "getAutoControlledStateFromProps",
    value: function getAutoControlledStateFromProps(nextProps, prevState) {
      var itemsForRender = Tree.getItemsForRender(nextProps.items);
      return {
        itemsForRender: itemsForRender
      };
    }
  }]);
  return Tree;
}(_lib.AutoControlledComponent);

(0, _defineProperty2.default)(Tree, "create", void 0);
(0, _defineProperty2.default)(Tree, "displayName", 'Tree');
(0, _defineProperty2.default)(Tree, "className", 'ui-tree');
(0, _defineProperty2.default)(Tree, "slotClassNames", {
  item: "".concat(Tree.className, "__item")
});
(0, _defineProperty2.default)(Tree, "propTypes", Object.assign({}, _lib.commonPropTypes.createCommon({
  content: false
}), {
  activeItemIds: customPropTypes.collectionShorthand,
  defaultActiveItemIds: customPropTypes.collectionShorthand,
  exclusive: PropTypes.bool,
  items: customPropTypes.collectionShorthand,
  renderItemTitle: PropTypes.func,
  renderedItems: PropTypes.func
}));
(0, _defineProperty2.default)(Tree, "defaultProps", {
  as: 'div',
  accessibility: _accessibility.treeBehavior
});
(0, _defineProperty2.default)(Tree, "autoControlledProps", ['activeItemIds']);
(0, _defineProperty2.default)(Tree, "getItemsForRender", function (itemsFromProps) {
  var itemsForRenderGenerator = function itemsForRenderGenerator() {
    var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : itemsFromProps;
    var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var parent = arguments.length > 2 ? arguments[2] : undefined;
    return (0, _reduce2.default)(items, function (acc, item, index) {
      var id = item['id'];
      var isSubtree = (0, _lib2.hasSubtree)(item);
      acc[id] = {
        elementRef: React.createRef(),
        level: level,
        index: index + 1,
        // Used for aria-posinset and it's 1-based.
        parent: parent,
        siblings: items.filter(function (currentItem) {
          return currentItem !== item;
        })
      };
      return Object.assign({}, acc, isSubtree ? itemsForRenderGenerator(item['items'], level + 1, item) : {});
    }, {});
  };

  return itemsForRenderGenerator(itemsFromProps);
});
Tree.create = (0, _lib.createShorthandFactory)({
  Component: Tree,
  mappedArrayProp: 'items'
});
/**
 * A Tree displays data organised in tree hierarchy.
 *
 * @accessibility
 * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.
 */

var _default = (0, _types.withSafeTypeForAs)(Tree);

exports.default = _default;