"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _lib = require("../../lib");

var _accessibility = require("@stardust-ui/accessibility");

var _types = require("../../types");

var TreeTitle =
/*#__PURE__*/
function (_UIComponent) {
  (0, _inherits2.default)(TreeTitle, _UIComponent);

  function TreeTitle() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, TreeTitle);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(TreeTitle)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "actionHandlers", {
      performClick: function performClick(e) {
        e.preventDefault();

        _this.handleClick(e);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleClick", function (e) {
      (0, _invoke2.default)(_this.props, 'onClick', e, _this.props);
    });
    return _this;
  }

  (0, _createClass2.default)(TreeTitle, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          accessibility = _ref.accessibility,
          unhandledProps = _ref.unhandledProps;
      var _this$props = this.props,
          children = _this$props.children,
          content = _this$props.content;
      return React.createElement(ElementType, (0, _extends2.default)({
        className: classes.root,
        onClick: this.handleClick
      }, accessibility.attributes.root, _lib.rtlTextContainer.getAttributes({
        forElements: [children, content]
      }), unhandledProps, (0, _lib.applyAccessibilityKeyHandlers)(accessibility.keyHandlers.root, unhandledProps)), (0, _lib.childrenExist)(children) ? children : content);
    }
  }]);
  return TreeTitle;
}(_lib.UIComponent);

(0, _defineProperty2.default)(TreeTitle, "create", void 0);
(0, _defineProperty2.default)(TreeTitle, "className", 'ui-tree__title');
(0, _defineProperty2.default)(TreeTitle, "displayName", 'TreeTitle');
(0, _defineProperty2.default)(TreeTitle, "propTypes", Object.assign({}, _lib.commonPropTypes.createCommon(), {
  hasSubtree: PropTypes.bool,
  index: PropTypes.number,
  level: PropTypes.number,
  onClick: PropTypes.func,
  open: PropTypes.bool,
  treeSize: PropTypes.number
}));
(0, _defineProperty2.default)(TreeTitle, "defaultProps", {
  as: 'a',
  accessibility: _accessibility.treeTitleBehavior
});
TreeTitle.create = (0, _lib.createShorthandFactory)({
  Component: TreeTitle,
  mappedProp: 'content'
});
/**
 * A TreeTitle renders a title of TreeItem.
 */

var _default = (0, _types.withSafeTypeForAs)(TreeTitle);

exports.default = _default;