"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _accessibility = require("@stardust-ui/accessibility");

var customPropTypes = _interopRequireWildcard(require("@stardust-ui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _types = require("../../types");

var _lib = require("../../lib");

var _Button = _interopRequireDefault(require("../Button/Button"));

var _MenuButton = _interopRequireDefault(require("../MenuButton/MenuButton"));

var SplitButton =
/*#__PURE__*/
function (_AutoControlledCompon) {
  (0, _inherits2.default)(SplitButton, _AutoControlledCompon);

  function SplitButton() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, SplitButton);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(SplitButton)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleMenuButtonOverrides", function (predefinedProps) {
      return {
        onMenuItemClick: function onMenuItemClick(e, menuItemProps) {
          _this.setState({
            open: false
          });

          (0, _invoke2.default)(_this.props, 'onOpenChange', e, Object.assign({}, _this.props, {
            open: false
          }));
          (0, _invoke2.default)(predefinedProps, 'onMenuItemClick', e, menuItemProps);
          (0, _invoke2.default)(_this.props, 'onMenuItemClick', e, menuItemProps);
        },
        onOpenChange: function onOpenChange(e, popupProps) {
          e.stopPropagation();

          _this.setState({
            open: popupProps.open
          });

          (0, _invoke2.default)(_this.props, 'onOpenChange', e, Object.assign({}, _this.props, {
            open: popupProps.open
          }));
        }
      };
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleMenuButtonTriggerOverrides", function (predefinedProps) {
      return {
        onClick: function onClick(e, buttonProps) {
          (0, _invoke2.default)(predefinedProps, 'onClick', e, buttonProps);
          (0, _invoke2.default)(_this.props, 'onMainButtonClick', e, buttonProps);
        },
        onFocus: function onFocus(e, buttonProps) {
          (0, _invoke2.default)(predefinedProps, 'onFocus', e, buttonProps);

          _this.setState({
            isFromKeyboard: (0, _lib.isFromKeyboard)()
          });
        }
      };
    });
    return _this;
  }

  (0, _createClass2.default)(SplitButton, [{
    key: "getInitialAutoControlledState",
    value: function getInitialAutoControlledState() {
      return {
        isFromKeyboard: false,
        open: false
      };
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var _this2 = this;

      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          accessibility = _ref.accessibility,
          styles = _ref.styles,
          unhandledProps = _ref.unhandledProps;
      var _this$props = this.props,
          button = _this$props.button,
          disabled = _this$props.disabled,
          menu = _this$props.menu,
          primary = _this$props.primary,
          secondary = _this$props.secondary,
          toggleButton = _this$props.toggleButton;

      var trigger = _Button.default.create(button, {
        defaultProps: function defaultProps() {
          return {
            styles: styles.button,
            primary: primary,
            secondary: secondary,
            disabled: disabled
          };
        },
        overrideProps: this.handleMenuButtonTriggerOverrides
      });

      return React.createElement(ElementType, (0, _extends2.default)({
        className: classes.root
      }, accessibility.attributes.root, unhandledProps), _MenuButton.default.create({}, {
        defaultProps: function defaultProps() {
          return {
            accessibility: accessibility.childBehaviors ? accessibility.childBehaviors.menuButton : undefined,
            menu: menu,
            // Opening is handled manually.
            on: [],
            open: _this2.state.open,
            trigger: trigger
          };
        },
        overrideProps: this.handleMenuButtonOverrides
      }), _Button.default.create(toggleButton, {
        defaultProps: function defaultProps() {
          return Object.assign({
            className: SplitButton.slotClassNames.toggleButton,
            disabled: disabled,
            icon: 'stardust-arrow-down',
            iconOnly: true,
            primary: primary,
            secondary: secondary
          }, accessibility.attributes.toggleButton);
        },
        overrideProps: function overrideProps(predefinedProps) {
          return {
            onClick: function onClick(e, buttonProps) {
              (0, _invoke2.default)(predefinedProps, 'onClick', e, buttonProps);

              _this2.setState(function (state) {
                var open = !state.open;
                (0, _invoke2.default)(_this2.props, 'onOpenChange', e, Object.assign({}, _this2.props, {
                  open: open
                }));
                return {
                  open: open
                };
              });
            }
          };
        }
      }));
    }
  }]);
  return SplitButton;
}(_lib.AutoControlledComponent);
/**
 * A SplitButton enables users to take one of several related actions, one being dominant and rest being displayed in a menu.
 */


(0, _defineProperty2.default)(SplitButton, "create", void 0);
(0, _defineProperty2.default)(SplitButton, "displayName", 'SplitButton');
(0, _defineProperty2.default)(SplitButton, "className", 'ui-splitbutton');
(0, _defineProperty2.default)(SplitButton, "slotClassNames", {
  toggleButton: "".concat(SplitButton.className, "__toggleButton")
});
(0, _defineProperty2.default)(SplitButton, "propTypes", Object.assign({}, _lib.commonPropTypes.createCommon({
  content: false
}), {
  button: customPropTypes.itemShorthand,
  defaultOpen: PropTypes.bool,
  menu: PropTypes.oneOfType([customPropTypes.itemShorthand, PropTypes.arrayOf(customPropTypes.itemShorthandWithoutJSX)]),
  onMainButtonClick: PropTypes.func,
  onMenuItemClick: PropTypes.func,
  onOpenChange: PropTypes.func,
  open: PropTypes.bool,
  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),
  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),
  toggleButton: customPropTypes.itemShorthand
}));
(0, _defineProperty2.default)(SplitButton, "defaultProps", {
  accessibility: _accessibility.splitButtonBehavior,
  as: 'span',
  toggleButton: {}
});
(0, _defineProperty2.default)(SplitButton, "autoControlledProps", ['open']);

var _default = (0, _types.withSafeTypeForAs)(SplitButton);

exports.default = _default;