"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _toNumber2 = _interopRequireDefault(require("lodash/toNumber"));

var _accessibility = require("@stardust-ui/accessibility");

var React = _interopRequireWildcard(require("react"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var customPropTypes = _interopRequireWildcard(require("@stardust-ui/react-proptypes"));

var _reactComponentRef = require("@stardust-ui/react-component-ref");

var _classnames = _interopRequireDefault(require("classnames"));

var _lib = require("../../lib");

var _types = require("../../types");

var _Box = _interopRequireDefault(require("../Box/Box"));

var processInputValues = function processInputValues(p) {
  var min = (0, _toNumber2.default)(p.min);
  var max = (0, _toNumber2.default)(p.max);
  var value = (0, _toNumber2.default)(p.value);
  if (isNaN(min)) min = Number(Slider.defaultProps.min);
  if (isNaN(max)) max = Number(Slider.defaultProps.max);
  value = isNaN(value) ? min + (max - min) / 2 : Math.min(max, Math.max(min, value));
  var valueAsPercentage = "".concat(100 * (value - min) / (max - min), "%");
  return {
    min: min,
    max: max,
    value: value,
    valueAsPercentage: valueAsPercentage
  };
};

var Slider =
/*#__PURE__*/
function (_AutoControlledCompon) {
  (0, _inherits2.default)(Slider, _AutoControlledCompon);

  function Slider() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Slider);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Slider)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "inputRef", React.createRef());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleInputOverrides", function () {
      return {
        onChange: function onChange(e) {
          var value = (0, _get2.default)(e, 'target.value');
          (0, _invoke2.default)(_this.props, 'onChange', e, Object.assign({}, _this.props, {
            value: value
          }));

          _this.setState({
            value: value
          });
        },
        onMouseDown: function onMouseDown(e) {
          (0, _lib.setWhatInputSource)('mouse');
          (0, _invoke2.default)(_this.props, 'onMouseDown', e, _this.props);
        }
      };
    });
    return _this;
  }

  (0, _createClass2.default)(Slider, [{
    key: "getInitialAutoControlledState",
    value: function getInitialAutoControlledState() {
      return {
        value: 50
      };
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var _this2 = this;

      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          accessibility = _ref.accessibility,
          rtl = _ref.rtl,
          styles = _ref.styles,
          unhandledProps = _ref.unhandledProps;
      var _this$props = this.props,
          input = _this$props.input,
          inputRef = _this$props.inputRef,
          step = _this$props.step;

      var _partitionHTMLProps = (0, _lib.partitionHTMLProps)(unhandledProps),
          _partitionHTMLProps2 = (0, _slicedToArray2.default)(_partitionHTMLProps, 2),
          htmlInputProps = _partitionHTMLProps2[0],
          restProps = _partitionHTMLProps2[1];

      var type = 'range';

      var _processInputValues = processInputValues({
        min: this.props.min,
        max: this.props.max,
        value: this.state.value || ''
      }),
          min = _processInputValues.min,
          max = _processInputValues.max,
          value = _processInputValues.value,
          valueAsPercentage = _processInputValues.valueAsPercentage; // we need 2 wrappers around the slider rail, track, input and thumb slots to achieve correct component sizes


      return React.createElement(ElementType, (0, _extends2.default)({
        className: classes.root
      }, accessibility.attributes.root, restProps), React.createElement("div", {
        className: (0, _classnames.default)(Slider.slotClassNames.inputWrapper, classes.inputWrapper)
      }, React.createElement("span", {
        className: (0, _classnames.default)(Slider.slotClassNames.rail, classes.rail)
      }), React.createElement("span", {
        className: (0, _classnames.default)(Slider.slotClassNames.track, classes.track),
        style: {
          width: valueAsPercentage
        }
      }), React.createElement(_reactComponentRef.Ref, {
        innerRef: function innerRef(inputElement) {
          (0, _reactComponentRef.handleRef)(_this2.inputRef, inputElement);
          (0, _reactComponentRef.handleRef)(inputRef, inputElement);
        }
      }, _Box.default.create(input || type, {
        defaultProps: function defaultProps() {
          return Object.assign({}, htmlInputProps, accessibility.attributes.input, {
            className: Slider.slotClassNames.input,
            as: 'input',
            min: min,
            max: max,
            step: step,
            type: type,
            value: value,
            styles: styles.input
          }, (0, _lib.applyAccessibilityKeyHandlers)(accessibility.keyHandlers.input, htmlInputProps));
        },
        overrideProps: this.handleInputOverrides
      })), React.createElement("span", {
        className: (0, _classnames.default)(Slider.slotClassNames.thumb, classes.thumb),
        style: (0, _defineProperty2.default)({}, rtl ? 'right' : 'left', valueAsPercentage)
      })));
    }
  }]);
  return Slider;
}(_lib.AutoControlledComponent);

(0, _defineProperty2.default)(Slider, "displayName", 'Slider');
(0, _defineProperty2.default)(Slider, "className", 'ui-slider');
(0, _defineProperty2.default)(Slider, "slotClassNames", void 0);
(0, _defineProperty2.default)(Slider, "propTypes", Object.assign({}, _lib.commonPropTypes.createCommon({
  content: false
}), {
  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  fluid: PropTypes.bool,
  getA11yValueMessageOnChange: PropTypes.func,
  input: customPropTypes.itemShorthand,
  inputRef: customPropTypes.ref,
  max: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  min: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  onChange: PropTypes.func,
  step: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  vertical: PropTypes.bool
}));
(0, _defineProperty2.default)(Slider, "defaultProps", {
  accessibility: _accessibility.sliderBehavior,
  getA11yValueMessageOnChange: function getA11yValueMessageOnChange(_ref3) {
    var value = _ref3.value;
    return String(value);
  },
  max: 100,
  min: 0,
  step: 1
});
(0, _defineProperty2.default)(Slider, "autoControlledProps", ['value']);
Slider.slotClassNames = {
  input: "".concat(Slider.className, "__input"),
  inputWrapper: "".concat(Slider.className, "__input-wrapper"),
  rail: "".concat(Slider.className, "__rail"),
  thumb: "".concat(Slider.className, "__thumb"),
  track: "".concat(Slider.className, "__track")
  /**
   * A Slider represents an input that allows user to choose a value from within a specific range.
   *
   * @accessibility
   * Implements [ARIA Slider](https://www.w3.org/TR/wai-aria-practices-1.1/#slider) design pattern.
   * @accessibilityIssues
   * [Slider - JAWS narrates slider value twice when using PageUp / PageDown](https://github.com/FreedomScientific/VFO-standards-support/issues/220)
   * [Slider - JAWS narrates current and new value in vertical slider](https://github.com/FreedomScientific/VFO-standards-support/issues/219)
   */

};

var _default = (0, _types.withSafeTypeForAs)(Slider);

exports.default = _default;