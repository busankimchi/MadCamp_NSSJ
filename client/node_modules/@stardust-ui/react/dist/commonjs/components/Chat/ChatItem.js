"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var customPropTypes = _interopRequireWildcard(require("@stardust-ui/react-proptypes"));

var React = _interopRequireWildcard(require("react"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var _types = require("../../types");

var _lib = require("../../lib");

var _Box = _interopRequireDefault(require("../Box/Box"));

var _ChatMessage = _interopRequireDefault(require("./ChatMessage"));

var ChatItem =
/*#__PURE__*/
function (_UIComponent) {
  (0, _inherits2.default)(ChatItem, _UIComponent);

  function ChatItem() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, ChatItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ChatItem)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setAttachedPropValueForChatMessage", function (styles) {
      var _this$props = _this.props,
          message = _this$props.message,
          attached = _this$props.attached;

      var messageElement = _Box.default.create(message, {
        defaultProps: function defaultProps() {
          return {
            className: ChatItem.slotClassNames.message,
            styles: styles.message
          };
        }
      }); // the element is ChatMessage


      if (_ChatMessage.default.isTypeOfElement(messageElement)) {
        return _this.cloneElementWithCustomProps(messageElement, {
          attached: attached
        });
      } // the children is ChatMessage


      if (_ChatMessage.default.isTypeOfElement((0, _lib.getElementProp)(messageElement, 'children'))) {
        return _this.cloneElementWithCustomProps(messageElement, {
          attached: attached
        }, 'children');
      } // the content is ChatMessage


      if (_ChatMessage.default.isTypeOfElement((0, _lib.getElementProp)(messageElement, 'content'))) {
        return _this.cloneElementWithCustomProps(messageElement, {
          attached: attached
        }, 'content');
      }

      return messageElement;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "cloneElementWithCustomProps", function (element, props, prop) {
      if (!prop) {
        return React.cloneElement(element, props);
      }

      return React.cloneElement(element, (0, _defineProperty2.default)({}, prop, React.cloneElement((0, _lib.getElementProp)(element, prop), props)));
    });
    return _this;
  }

  (0, _createClass2.default)(ChatItem, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var accessibility = _ref.accessibility,
          ElementType = _ref.ElementType,
          classes = _ref.classes,
          unhandledProps = _ref.unhandledProps,
          styles = _ref.styles;
      var children = this.props.children;
      return React.createElement(ElementType, (0, _extends2.default)({}, _lib.rtlTextContainer.getAttributes({
        forElements: [children]
      }), accessibility.attributes.root, unhandledProps, {
        className: classes.root
      }), (0, _lib.childrenExist)(children) ? children : this.renderChatItem(styles));
    }
  }, {
    key: "renderChatItem",
    value: function renderChatItem(styles) {
      var _this$props2 = this.props,
          gutter = _this$props2.gutter,
          contentPosition = _this$props2.contentPosition;

      var gutterElement = gutter && _Box.default.create(gutter, {
        defaultProps: function defaultProps() {
          return {
            className: ChatItem.slotClassNames.gutter,
            styles: styles.gutter
          };
        }
      });

      var messageElement = this.setAttachedPropValueForChatMessage(styles);
      return React.createElement(React.Fragment, null, contentPosition === 'start' && gutterElement, messageElement, contentPosition === 'end' && gutterElement);
    }
  }]);
  return ChatItem;
}(_lib.UIComponent);

(0, _defineProperty2.default)(ChatItem, "className", 'ui-chat__item');
(0, _defineProperty2.default)(ChatItem, "create", void 0);
(0, _defineProperty2.default)(ChatItem, "displayName", 'ChatItem');
(0, _defineProperty2.default)(ChatItem, "slotClassNames", void 0);
(0, _defineProperty2.default)(ChatItem, "propTypes", Object.assign({}, _lib.commonPropTypes.createCommon({
  content: false
}), {
  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),
  gutter: customPropTypes.itemShorthand,
  contentPosition: PropTypes.oneOf(['start', 'end']),
  message: customPropTypes.itemShorthand
}));
(0, _defineProperty2.default)(ChatItem, "defaultProps", {
  as: 'li',
  contentPosition: 'start',
  attached: false
});
ChatItem.create = (0, _lib.createShorthandFactory)({
  Component: ChatItem,
  mappedProp: 'message'
});
ChatItem.slotClassNames = {
  message: "".concat(ChatItem.className, "__message"),
  gutter: "".concat(ChatItem.className, "__gutter")
  /**
   * A ChatItem is container for single entity in Chat (e.g. message, notification, etc).
   */

};

var _default = (0, _types.withSafeTypeForAs)(ChatItem);

exports.default = _default;