"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _isBoolean2 = _interopRequireDefault(require("lodash/isBoolean"));

var _isFunction2 = _interopRequireDefault(require("lodash/isFunction"));

var _isPlainObject2 = _interopRequireDefault(require("lodash/isPlainObject"));

var _forEach2 = _interopRequireDefault(require("lodash/forEach"));

var customPropTypes = _interopRequireWildcard(require("@stardust-ui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _reactFela = require("react-fela");

var _lib = require("../../lib");

var _ProviderConsumer = _interopRequireDefault(require("./ProviderConsumer"));

var _mergeThemes = require("../../lib/mergeThemes");

var _ProviderBox = _interopRequireDefault(require("./ProviderBox"));

var _types = require("../../types");

var _mergeProviderContexts = _interopRequireDefault(require("../../lib/mergeProviderContexts"));

var _Telemetry = _interopRequireDefault(require("../../lib/Telemetry"));

// @ts-ignore

/**
 * The Provider passes the CSS-in-JS renderer, theme styles and other settings to Stardust components.
 */
var Provider =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(Provider, _React$Component);

  function Provider() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Provider);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Provider)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "outgoingContext", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "staticStylesRendered", false);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "telemetry", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderStaticStyles", function (renderer, mergedTheme) {
      var siteVariables = mergedTheme.siteVariables;
      var staticStyles = _this.props.theme.staticStyles;
      if (!staticStyles) return;

      var renderObject = function renderObject(object) {
        (0, _forEach2.default)(object, function (style, selector) {
          renderer.renderStatic(style, selector);
        });
      };

      staticStyles.forEach(function (staticStyle) {
        if (typeof staticStyle === 'string') {
          renderer.renderStatic(staticStyle);
        } else if ((0, _isPlainObject2.default)(staticStyle)) {
          renderObject(staticStyle);
        } else if ((0, _isFunction2.default)(staticStyle)) {
          var preparedSiteVariables = (0, _mergeThemes.mergeSiteVariables)(siteVariables);
          renderObject(staticStyle(preparedSiteVariables));
        } else {
          throw new Error("staticStyles array must contain CSS strings, style objects, or style functions, got: ".concat((0, _typeof2.default)(staticStyle)));
        }
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderFontFaces", function (renderer) {
      var fontFaces = _this.props.theme.fontFaces;
      if (!fontFaces) return;

      var renderFontObject = function renderFontObject(font) {
        if (!(0, _isPlainObject2.default)(font)) {
          throw new Error("fontFaces must be objects, got: ".concat((0, _typeof2.default)(font)));
        }

        renderer.renderFont(font.name, font.paths, font.props);
      };

      fontFaces.forEach(function (font) {
        renderFontObject(font);
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderStaticStylesOnce", function (mergedTheme) {
      var staticStyles = _this.props.theme.staticStyles;

      if (!_this.staticStylesRendered && staticStyles) {
        _this.renderStaticStyles(_this.outgoingContext.renderer, mergedTheme);

        _this.staticStylesRendered = true;
      }
    });
    return _this;
  }

  (0, _createClass2.default)(Provider, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.renderFontFaces(this.outgoingContext.renderer);

      if (this.props.target) {
        (0, _lib.setUpWhatInput)(this.props.target);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.props.target) {
        (0, _lib.tryCleanupWhatInput)(this.props.target);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          as = _this$props.as,
          children = _this$props.children,
          disableAnimations = _this$props.disableAnimations,
          overwrite = _this$props.overwrite,
          renderer = _this$props.renderer,
          rtl = _this$props.rtl,
          target = _this$props.target,
          theme = _this$props.theme,
          variables = _this$props.variables,
          telemetryRef = _this$props.telemetryRef,
          unhandledProps = (0, _objectWithoutProperties2.default)(_this$props, ["as", "children", "disableAnimations", "overwrite", "renderer", "rtl", "target", "theme", "variables", "telemetryRef"]);

      if (telemetryRef) {
        if (!this.telemetry) {
          this.telemetry = new _Telemetry.default();
        }

        telemetryRef['current'] = this.telemetry;
      } else if (this.telemetry) {
        delete this.telemetry;
      }

      var inputContext = {
        theme: theme,
        rtl: rtl,
        disableAnimations: disableAnimations,
        renderer: renderer,
        target: target,
        telemetry: this.telemetry
      };
      var incomingContext = overwrite ? {} : this.context; // rehydration disabled to avoid leaking styles between renderers
      // https://github.com/rofrischmann/fela/blob/master/docs/api/fela-dom/rehydrate.md

      this.outgoingContext = (0, _mergeProviderContexts.default)(incomingContext, inputContext);
      this.renderStaticStylesOnce(this.outgoingContext.theme);
      var rtlProps = {}; // only add dir attribute for top level provider or when direction changes from parent to child

      if (!this.context || this.context.rtl !== this.outgoingContext.rtl && (0, _isBoolean2.default)(this.outgoingContext.rtl)) {
        rtlProps.dir = this.outgoingContext.rtl ? 'rtl' : 'ltr';
      }

      return React.createElement(_reactFela.RendererProvider, (0, _extends2.default)({
        renderer: this.outgoingContext.renderer
      }, {
        rehydrate: false,
        targetDocument: this.outgoingContext.target
      }), React.createElement(_reactFela.ThemeProvider, {
        theme: this.outgoingContext,
        overwrite: true
      }, React.createElement(_ProviderBox.default, (0, _extends2.default)({
        as: as,
        variables: variables
      }, unhandledProps, rtlProps), children)));
    }
  }]);
  return Provider;
}(React.Component);

(0, _defineProperty2.default)(Provider, "displayName", 'Provider');
(0, _defineProperty2.default)(Provider, "propTypes", {
  as: PropTypes.elementType,
  variables: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),
  theme: PropTypes.shape({
    siteVariables: PropTypes.object,
    componentVariables: PropTypes.object,
    componentStyles: PropTypes.object,
    fontFaces: PropTypes.arrayOf(PropTypes.shape({
      name: PropTypes.string,
      paths: PropTypes.arrayOf(PropTypes.string),
      style: PropTypes.shape({
        fontStretch: PropTypes.string,
        fontStyle: PropTypes.string,
        fontVariant: PropTypes.string,
        fontWeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
        localAlias: PropTypes.string,
        unicodeRange: PropTypes.string
      })
    })),
    staticStyles: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.func])),
    animations: PropTypes.object
  }),
  renderer: PropTypes.object,
  rtl: PropTypes.bool,
  disableAnimations: PropTypes.bool,
  children: PropTypes.node.isRequired,
  target: PropTypes.object,
  telemetryRef: customPropTypes.ref
});
(0, _defineProperty2.default)(Provider, "defaultProps", {
  theme: {}
});
(0, _defineProperty2.default)(Provider, "Consumer", _ProviderConsumer.default);
(0, _defineProperty2.default)(Provider, "Box", _ProviderBox.default);
(0, _defineProperty2.default)(Provider, "contextType", _reactFela.ThemeContext);

var _default = (0, _types.withSafeTypeForAs)(Provider);

exports.default = _default;