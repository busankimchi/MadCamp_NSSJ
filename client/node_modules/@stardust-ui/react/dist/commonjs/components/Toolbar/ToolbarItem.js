"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _some2 = _interopRequireDefault(require("lodash/some"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var React = _interopRequireWildcard(require("react"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var customPropTypes = _interopRequireWildcard(require("@stardust-ui/react-proptypes"));

var _accessibility = require("@stardust-ui/accessibility");

var _classnames = _interopRequireDefault(require("classnames"));

var _reactComponentRef = require("@stardust-ui/react-component-ref");

var _reactComponentEventListener = require("@stardust-ui/react-component-event-listener");

var _lib = require("../../lib");

var _types = require("../../types");

var _positioner = require("../../lib/positioner");

var _ToolbarMenu = _interopRequireDefault(require("./ToolbarMenu"));

var _Icon = _interopRequireDefault(require("../Icon/Icon"));

var _Box = _interopRequireDefault(require("../Box/Box"));

var _Popup = _interopRequireDefault(require("../Popup/Popup"));

var _mergeThemes = require("../../lib/mergeThemes");

var _reactComponentNestingRegistry = require("@stardust-ui/react-component-nesting-registry");

var ToolbarItem =
/*#__PURE__*/
function (_UIComponent) {
  (0, _inherits2.default)(ToolbarItem, _UIComponent);

  function ToolbarItem() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, ToolbarItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ToolbarItem)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "actionHandlers", {
      performClick: function performClick(event) {
        event.preventDefault();

        _this.handleClick(event);
      },
      performWrapperClick: function performWrapperClick(event) {
        _this.handleWrapperClick(event);
      },
      closeMenuAndFocusTrigger: function closeMenuAndFocusTrigger(event) {
        _this.trySetMenuOpen(false, event);

        (0, _invoke2.default)(_this.itemRef.current, 'focus');
      },
      doNotNavigateNextToolbarItem: function doNotNavigateNextToolbarItem(event) {
        event.stopPropagation();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "itemRef", React.createRef());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "menuRef", React.createRef());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleMenuOverrides", function (getRefs, variables) {
      return function (predefinedProps) {
        return {
          onBlur: function onBlur(e) {
            var isInside = (0, _some2.default)(getRefs(), function (childRef) {
              return childRef.current.contains(e.relatedTarget);
            });

            if (!isInside) {
              _this.trySetMenuOpen(false, e);
            }
          },
          onItemClick: function onItemClick(e, itemProps) {
            var popup = itemProps.popup,
                menuOpen = itemProps.menuOpen;
            (0, _invoke2.default)(predefinedProps, 'onItemClick', e, itemProps);

            if (popup) {
              return;
            } // TODO: should we pass toolbarMenuItem to the user callback so he can decide if he wants to close the menu?


            _this.trySetMenuOpen(menuOpen, e);

            if (!menuOpen) {
              (0, _invoke2.default)(_this.itemRef.current, 'focus');
            }
          },
          variables: (0, _mergeThemes.mergeComponentVariables)(variables, predefinedProps.variables)
        };
      };
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleBlur", function (e) {
      (0, _invoke2.default)(_this.props, 'onBlur', e, _this.props);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleFocus", function (e) {
      (0, _invoke2.default)(_this.props, 'onFocus', e, _this.props);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleClick", function (e) {
      var _this$props = _this.props,
          disabled = _this$props.disabled,
          menu = _this$props.menu,
          menuOpen = _this$props.menuOpen;

      if (disabled) {
        e.preventDefault();
        return;
      }

      if (menu) {
        _this.trySetMenuOpen(!menuOpen, e);
      }

      (0, _invoke2.default)(_this.props, 'onClick', e, _this.props);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleWrapperClick", function (e) {
      var menu = _this.props.menu;

      if (menu) {
        if ((0, _lib.doesNodeContainClick)(_this.menuRef.current, e, _this.context.target)) {
          _this.trySetMenuOpen(false, e);

          (0, _invoke2.default)(_this.itemRef.current, 'focus');
        }
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleOutsideClick", function (getRefs) {
      return function (e) {
        var isItemClick = (0, _lib.doesNodeContainClick)(_this.itemRef.current, e, _this.context.target);
        var isNestedClick = (0, _some2.default)(getRefs(), function (childRef) {
          return (0, _lib.doesNodeContainClick)(childRef.current, e, _this.context.target);
        });
        var isInside = isItemClick || isNestedClick;

        if (!isInside) {
          _this.trySetMenuOpen(false, e);
        }
      };
    });
    return _this;
  }

  (0, _createClass2.default)(ToolbarItem, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var _this2 = this;

      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          unhandledProps = _ref.unhandledProps,
          accessibility = _ref.accessibility,
          variables = _ref.variables;
      var _this$props2 = this.props,
          icon = _this$props2.icon,
          children = _this$props2.children,
          disabled = _this$props2.disabled,
          popup = _this$props2.popup,
          menu = _this$props2.menu,
          menuOpen = _this$props2.menuOpen,
          wrapper = _this$props2.wrapper;
      var targetRef = (0, _reactComponentRef.toRefObject)(this.context.target);
      var itemElement = React.createElement(ElementType, (0, _extends2.default)({}, accessibility.attributes.root, unhandledProps, (0, _lib.applyAccessibilityKeyHandlers)(accessibility.keyHandlers.root, unhandledProps), {
        disabled: disabled,
        className: classes.root,
        onBlur: this.handleBlur,
        onFocus: this.handleFocus,
        onClick: this.handleClick
      }), (0, _lib.childrenExist)(children) ? children : _Icon.default.create(icon));
      var submenuElement = menuOpen ? React.createElement(_reactComponentNestingRegistry.Unstable_NestingAuto, null, function (getRefs, nestingRef) {
        return React.createElement(React.Fragment, null, React.createElement(_reactComponentRef.Ref, {
          innerRef: function innerRef(node) {
            nestingRef.current = node;
            _this2.menuRef.current = node;
          }
        }, React.createElement(_positioner.Popper, {
          align: "start",
          position: "above",
          modifiers: {
            preventOverflow: {
              escapeWithReference: false // escapeWithReference breaks positioning of ToolbarMenu in overflow mode because Popper components sets modifiers on scrollable container

            }
          },
          targetRef: _this2.itemRef
        }, _ToolbarMenu.default.create(menu, {
          overrideProps: _this2.handleMenuOverrides(getRefs, variables)
        }))), React.createElement(_reactComponentEventListener.EventListener, {
          listener: _this2.handleOutsideClick(getRefs),
          targetRef: targetRef,
          type: "click",
          capture: true
        }));
      }) : null;

      if (popup) {
        return _Popup.default.create(popup, {
          defaultProps: function defaultProps() {
            return {
              trapFocus: true
            };
          },
          overrideProps: {
            trigger: itemElement,
            children: undefined // force-reset `children` defined for `Popup` as it collides with the `trigger`

          }
        });
      } // wrap the item if it has menu (even if it is closed = not rendered)


      if (menu) {
        var contentElement = React.createElement(React.Fragment, null, React.createElement(_reactComponentRef.Ref, {
          innerRef: this.itemRef
        }, itemElement), submenuElement);

        if (wrapper) {
          return _Box.default.create(wrapper, {
            defaultProps: function defaultProps() {
              return Object.assign({
                className: (0, _classnames.default)(ToolbarItem.slotClassNames.wrapper, classes.wrapper)
              }, accessibility.attributes.wrapper, (0, _lib.applyAccessibilityKeyHandlers)(accessibility.keyHandlers.wrapper, wrapper));
            },
            overrideProps: function overrideProps(predefinedProps) {
              return {
                children: contentElement,
                onClick: function onClick(e) {
                  _this2.handleWrapperClick(e);

                  (0, _invoke2.default)(predefinedProps, 'onClick', e);
                }
              };
            }
          });
        }

        return contentElement;
      }

      return React.createElement(_reactComponentRef.Ref, {
        innerRef: this.itemRef
      }, itemElement);
    }
  }, {
    key: "trySetMenuOpen",
    value: function trySetMenuOpen(newValue, e) {
      (0, _invoke2.default)(this.props, 'onMenuOpenChange', e, Object.assign({}, this.props, {
        menuOpen: newValue
      }));
    }
  }]);
  return ToolbarItem;
}(_lib.UIComponent);

(0, _defineProperty2.default)(ToolbarItem, "displayName", 'ToolbarItem');
(0, _defineProperty2.default)(ToolbarItem, "className", 'ui-toolbar__item');
(0, _defineProperty2.default)(ToolbarItem, "slotClassNames", {
  wrapper: "".concat(ToolbarItem.className, "__wrapper")
});
(0, _defineProperty2.default)(ToolbarItem, "create", void 0);
(0, _defineProperty2.default)(ToolbarItem, "propTypes", Object.assign({}, _lib.commonPropTypes.createCommon(), {
  active: PropTypes.bool,
  disabled: PropTypes.bool,
  icon: customPropTypes.itemShorthandWithoutJSX,
  menu: PropTypes.oneOfType([customPropTypes.shorthandAllowingChildren, PropTypes.arrayOf(customPropTypes.shorthandAllowingChildren)]),
  menuOpen: PropTypes.bool,
  onMenuOpenChange: PropTypes.func,
  onClick: PropTypes.func,
  onFocus: PropTypes.func,
  onBlur: PropTypes.func,
  popup: PropTypes.oneOfType([PropTypes.shape(Object.assign({}, _Popup.default.propTypes, {
    trigger: customPropTypes.never,
    children: customPropTypes.never
  })), PropTypes.string]),
  wrapper: customPropTypes.shorthandAllowingChildren
}));
(0, _defineProperty2.default)(ToolbarItem, "defaultProps", {
  as: 'button',
  accessibility: _accessibility.toolbarItemBehavior,
  wrapper: {}
});
ToolbarItem.create = (0, _lib.createShorthandFactory)({
  Component: ToolbarItem,
  mappedProp: 'content'
});
/**
 * A ToolbarItem renders Toolbar item as a button with an icon.
 */

var _default = (0, _types.withSafeTypeForAs)(ToolbarItem);

exports.default = _default;