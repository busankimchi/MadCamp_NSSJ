"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _map2 = _interopRequireDefault(require("lodash/map"));

var _findIndex2 = _interopRequireDefault(require("lodash/findIndex"));

var _filter2 = _interopRequireDefault(require("lodash/filter"));

var React = _interopRequireWildcard(require("react"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var customPropTypes = _interopRequireWildcard(require("@stardust-ui/react-proptypes"));

var _reactComponentRef = require("@stardust-ui/react-component-ref");

var _lib = require("../../lib");

var _mergeThemes = require("../../lib/mergeThemes");

var _types = require("../../types");

var _accessibility = require("@stardust-ui/accessibility");

var _ToolbarDivider = _interopRequireDefault(require("./ToolbarDivider"));

var _ToolbarItem = _interopRequireDefault(require("./ToolbarItem"));

var ToolbarRadioGroup =
/*#__PURE__*/
function (_UIComponent) {
  (0, _inherits2.default)(ToolbarRadioGroup, _UIComponent);

  function ToolbarRadioGroup() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, ToolbarRadioGroup);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ToolbarRadioGroup)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "itemRefs", []);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "actionHandlers", {
      nextItem: function nextItem(event) {
        return _this.setFocusedItem(event, 1);
      },
      prevItem: function prevItem(event) {
        return _this.setFocusedItem(event, -1);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setFocusedItem", function (event, direction) {
      var items = _this.props.items; // filter items which are not disabled

      var filteredRadioItems = (0, _filter2.default)(_this.itemRefs, function (item, index) {
        var currentItem = items[index];
        return currentItem && !currentItem.disabled;
      }); // get the index of currently focused element (w/ tabindex = 0) or the first one as default

      var currentFocusedIndex = (0, _findIndex2.default)(filteredRadioItems, function (item) {
        return item.current.tabIndex === 0;
      }) || 0;
      var itemsLength = filteredRadioItems.length;
      var nextIndex = currentFocusedIndex + direction;

      if (nextIndex >= itemsLength) {
        nextIndex = 0;
      }

      if (nextIndex < 0) {
        nextIndex = itemsLength - 1;
      }

      var nextItemToFocus = filteredRadioItems[nextIndex].current;

      if (nextItemToFocus) {
        nextItemToFocus.focus();
      }

      if (_this.context.target.activeElement === nextItemToFocus) {
        event.stopPropagation();
      }

      event.preventDefault();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleItemOverrides", function (variables) {
      return function (predefinedProps) {
        return {
          variables: (0, _mergeThemes.mergeComponentVariables)(variables, predefinedProps.variables)
        };
      };
    });
    return _this;
  }

  (0, _createClass2.default)(ToolbarRadioGroup, [{
    key: "renderItems",
    value: function renderItems(variables) {
      var _this2 = this;

      var _this$props = this.props,
          activeIndex = _this$props.activeIndex,
          items = _this$props.items;
      var itemOverridesFn = this.handleItemOverrides(variables);
      this.itemRefs = [];
      return (0, _map2.default)(items, function (item, index) {
        var kind = (0, _get2.default)(item, 'kind', 'item');
        var ref = React.createRef();
        _this2.itemRefs[index] = ref;

        if (kind === 'divider') {
          return _ToolbarDivider.default.create(item, {
            overrideProps: itemOverridesFn
          });
        }

        var toolbarItem = _ToolbarItem.default.create(item, {
          defaultProps: function defaultProps() {
            return {
              accessibility: _accessibility.toolbarRadioGroupItemBehavior,
              active: activeIndex === index
            };
          },
          overrideProps: itemOverridesFn
        });

        return React.createElement(_reactComponentRef.Ref, {
          innerRef: ref,
          key: toolbarItem.key
        }, toolbarItem);
      });
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          variables = _ref.variables,
          accessibility = _ref.accessibility,
          unhandledProps = _ref.unhandledProps;
      var children = this.props.children;
      return React.createElement(ElementType, (0, _extends2.default)({}, accessibility.attributes.root, unhandledProps, (0, _lib.applyAccessibilityKeyHandlers)(accessibility.keyHandlers.root, unhandledProps), {
        className: classes.root
      }), (0, _lib.childrenExist)(children) ? children : this.renderItems(variables));
    }
  }]);
  return ToolbarRadioGroup;
}(_lib.UIComponent);

(0, _defineProperty2.default)(ToolbarRadioGroup, "displayName", 'ToolbarRadioGroup');
(0, _defineProperty2.default)(ToolbarRadioGroup, "className", 'ui-toolbars');
(0, _defineProperty2.default)(ToolbarRadioGroup, "create", void 0);
(0, _defineProperty2.default)(ToolbarRadioGroup, "propTypes", Object.assign({}, _lib.commonPropTypes.createCommon(), {
  activeIndex: PropTypes.number,
  items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item'])
}));
(0, _defineProperty2.default)(ToolbarRadioGroup, "defaultProps", {
  accessibility: _accessibility.toolbarRadioGroupBehavior
});
ToolbarRadioGroup.create = (0, _lib.createShorthandFactory)({
  Component: ToolbarRadioGroup,
  mappedProp: 'content'
});
/**
 * A ToolbarRadioGroup renders Toolbar item as a group of mutually exclusive options.
 * Component doesn't implement mutual exclusiveness, it just serves accessibility purposes.
 *
 * @accessibility
 * Implements [ARIA RadioGroup](https://www.w3.org/TR/wai-aria-practices/#radiobutton) design pattern.
 */

var _default = (0, _types.withSafeTypeForAs)(ToolbarRadioGroup);

exports.default = _default;