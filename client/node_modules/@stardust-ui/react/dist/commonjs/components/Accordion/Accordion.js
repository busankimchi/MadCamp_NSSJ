"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _each2 = _interopRequireDefault(require("lodash/each"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _without2 = _interopRequireDefault(require("lodash/without"));

var _includes2 = _interopRequireDefault(require("lodash/includes"));

var _uniqueId2 = _interopRequireDefault(require("lodash/uniqueId"));

var _accessibility = require("@stardust-ui/accessibility");

var customPropTypes = _interopRequireWildcard(require("@stardust-ui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _lib = require("../../lib");

var _AccordionTitle = _interopRequireDefault(require("./AccordionTitle"));

var _AccordionContent = _interopRequireDefault(require("./AccordionContent"));

var _types = require("../../types");

var _FocusContainer = require("../../lib/accessibility/FocusHandling/FocusContainer");

var Accordion =
/*#__PURE__*/
function (_AutoControlledCompon) {
  (0, _inherits2.default)(Accordion, _AutoControlledCompon);

  function Accordion(props, context) {
    var _this;

    (0, _classCallCheck2.default)(this, Accordion);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Accordion).call(this, props, context));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "focusHandler", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "itemRefs", []);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "defaultAccordionTitleId", (0, _uniqueId2.default)('accordion-title-'));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "defaultAccordionContentId", (0, _uniqueId2.default)('accordion-content-'));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "actionHandlers", {
      moveNext: function moveNext(e) {
        e.preventDefault();

        _this.focusHandler.moveNext();
      },
      movePrevious: function movePrevious(e) {
        e.preventDefault();

        _this.focusHandler.movePrevious();
      },
      moveFirst: function moveFirst(e) {
        e.preventDefault();

        _this.focusHandler.moveFirst();
      },
      moveLast: function moveLast(e) {
        e.preventDefault();

        _this.focusHandler.moveLast();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleNavigationFocus", function (index) {
      _this.setState({
        focusedIndex: index
      }, function () {
        var targetComponent = _this.itemRefs[index] && _this.itemRefs[index].current;
        targetComponent && targetComponent.focus();
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getNavigationItemsSize", function () {
      return _this.props.panels.length;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "computeNewIndex", function (index) {
      var activeIndex = _this.state.activeIndex;
      var exclusive = _this.props.exclusive;

      if (!_this.isIndexActionable(index)) {
        return activeIndex;
      }

      if (exclusive) return index === activeIndex ? -1 : index; // check to see if index is in array, and remove it, if not then add it

      return (0, _includes2.default)(activeIndex, index) ? (0, _without2.default)(activeIndex, index) : [].concat((0, _toConsumableArray2.default)(activeIndex), [index]);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleTitleOverrides", function (predefinedProps) {
      return {
        onClick: function onClick(e, titleProps) {
          var index = titleProps.index;

          var activeIndex = _this.computeNewIndex(index);

          _this.setState({
            activeIndex: activeIndex,
            focusedIndex: index
          });

          (0, _invoke2.default)(predefinedProps, 'onClick', e, titleProps);
          (0, _invoke2.default)(_this.props, 'onTitleClick', e, titleProps);
        },
        onFocus: function onFocus(e, titleProps) {
          (0, _invoke2.default)(predefinedProps, 'onFocus', e, titleProps);

          _this.setState({
            focusedIndex: predefinedProps.index
          });
        }
      };
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isIndexActive", function (index) {
      var exclusive = _this.props.exclusive;
      var activeIndex = _this.state.activeIndex;
      return exclusive ? activeIndex === index : (0, _includes2.default)(activeIndex, index);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isIndexActionable", function (index) {
      if (!_this.isIndexActive(index)) {
        return true;
      }

      var activeIndex = _this.state.activeIndex;
      var _this$props = _this.props,
          expanded = _this$props.expanded,
          exclusive = _this$props.exclusive;
      return !expanded || !exclusive && activeIndex.length > 1;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderPanels", function () {
      var children = [];
      var _this$props2 = _this.props,
          panels = _this$props2.panels,
          renderPanelContent = _this$props2.renderPanelContent,
          renderPanelTitle = _this$props2.renderPanelTitle;
      var focusedIndex = _this.state.focusedIndex;
      _this.itemRefs = [];

      _this.focusHandler.syncFocusedIndex(focusedIndex);

      (0, _each2.default)(panels, function (panel, index) {
        var content = panel.content,
            title = panel.title;

        var active = _this.isIndexActive(index);

        var canBeCollapsed = _this.isIndexActionable(index);

        var contentRef = React.createRef();
        var titleId = title['id'] || "".concat(_this.defaultAccordionTitleId).concat(index);
        var contentId = content['id'] || "".concat(_this.defaultAccordionContentId).concat(index);
        _this.itemRefs[index] = contentRef;
        children.push(_AccordionTitle.default.create(title, {
          defaultProps: function defaultProps() {
            return {
              className: Accordion.slotClassNames.title,
              active: active,
              index: index,
              contentRef: contentRef,
              canBeCollapsed: canBeCollapsed,
              id: titleId,
              accordionContentId: contentId
            };
          },
          overrideProps: _this.handleTitleOverrides,
          render: renderPanelTitle
        }));
        children.push(_AccordionContent.default.create(content, {
          defaultProps: function defaultProps() {
            return {
              className: Accordion.slotClassNames.content,
              active: active,
              id: contentId,
              accordionTitleId: titleId
            };
          },
          render: renderPanelContent
        }));
      });
      return children;
    });
    _this.focusHandler = new _FocusContainer.ContainerFocusHandler(_this.getNavigationItemsSize, _this.handleNavigationFocus, true);
    return _this;
  }

  (0, _createClass2.default)(Accordion, [{
    key: "getInitialAutoControlledState",
    value: function getInitialAutoControlledState(_ref) {
      var expanded = _ref.expanded,
          exclusive = _ref.exclusive;
      var alwaysActiveIndex = expanded ? 0 : -1;
      return {
        activeIndex: exclusive ? alwaysActiveIndex : [alwaysActiveIndex]
      };
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(_ref2) {
      var ElementType = _ref2.ElementType,
          classes = _ref2.classes,
          accessibility = _ref2.accessibility,
          unhandledProps = _ref2.unhandledProps;
      var children = this.props.children;
      return React.createElement(ElementType, (0, _extends2.default)({}, accessibility.attributes.root, _lib.rtlTextContainer.getAttributes({
        forElements: [children]
      }), unhandledProps, (0, _lib.applyAccessibilityKeyHandlers)(accessibility.keyHandlers.root, unhandledProps), {
        className: classes.root
      }), (0, _lib.childrenExist)(children) ? children : this.renderPanels());
    }
  }]);
  return Accordion;
}(_lib.AutoControlledComponent);
/**
 * An Accordion represents stacked set of content sections, with action elements to toggle the display of these sections.
 *
 * @accessibility
 * Implements [ARIA Accordion](https://www.w3.org/TR/wai-aria-practices-1.1/#accordion) design pattern (keyboard navigation not yet supported).
 */


(0, _defineProperty2.default)(Accordion, "displayName", 'Accordion');
(0, _defineProperty2.default)(Accordion, "className", 'ui-accordion');
(0, _defineProperty2.default)(Accordion, "slotClassNames", {
  content: "".concat(Accordion.className, "__content"),
  title: "".concat(Accordion.className, "__title")
});
(0, _defineProperty2.default)(Accordion, "propTypes", Object.assign({}, _lib.commonPropTypes.createCommon({
  content: false
}), {
  activeIndex: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number])]),
  defaultActiveIndex: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number])]),
  exclusive: PropTypes.bool,
  expanded: PropTypes.bool,
  onTitleClick: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.func]),
  panels: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.arrayOf(PropTypes.shape({
    content: customPropTypes.itemShorthand,
    title: customPropTypes.itemShorthand
  }))]),
  renderPanelTitle: PropTypes.func,
  renderPanelContent: PropTypes.func
}));
(0, _defineProperty2.default)(Accordion, "defaultProps", {
  accessibility: _accessibility.accordionBehavior,
  as: 'dl'
});
(0, _defineProperty2.default)(Accordion, "autoControlledProps", ['activeIndex']);
(0, _defineProperty2.default)(Accordion, "Title", _AccordionTitle.default);
(0, _defineProperty2.default)(Accordion, "Content", _AccordionContent.default);

var _default = (0, _types.withSafeTypeForAs)(Accordion);

exports.default = _default;