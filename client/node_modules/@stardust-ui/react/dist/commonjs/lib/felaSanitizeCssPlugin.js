"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

/**
 * Checks whether provided CSS property value is safe for being rendered by Fela engine.
 */
var isValidCssValue = function isValidCssValue(value) {
  if (typeof value !== 'string') {
    return true;
  }

  var openingBrackets = '({[';
  var closingBrackets = ')}]';
  var openingBracketsStack = [];
  /**
   * This loop logic checks whether braces sequence of input argument is valid.
   * Essentially, it ensures that each of the '(', '{', '[' braces
   * - is properly matched by its complementary closing character
   * - closing brace properly corresponds to the last opened one
   */

  for (var i = 0; i < value.length; ++i) {
    var currentCharacter = value[i];

    if (openingBrackets.includes(currentCharacter)) {
      openingBracketsStack.push(currentCharacter);
    } else if (closingBrackets.includes(currentCharacter)) {
      var lastOpeningBracket = openingBracketsStack.pop();

      if (lastOpeningBracket && openingBrackets.indexOf(lastOpeningBracket) !== closingBrackets.indexOf(currentCharacter)) {
        return false;
      }
    }
  }

  return openingBracketsStack.length === 0;
};

var _default = function _default(config) {
  var cssPropertiesToSkip = (0, _toConsumableArray2.default)(config && config.skip || []);

  var sanitizeCssStyleObject = function sanitizeCssStyleObject(styles) {
    var processedStyles = Array.isArray(styles) ? [] : {};
    Object.keys(styles).forEach(function (cssPropertyNameOrIndex) {
      var cssPropertyValue = styles[cssPropertyNameOrIndex];

      if ((0, _typeof2.default)(cssPropertyValue) === 'object') {
        processedStyles[cssPropertyNameOrIndex] = sanitizeCssStyleObject(cssPropertyValue);
        return;
      }

      var isPropertyToSkip = cssPropertiesToSkip.some(function (propToExclude) {
        return propToExclude === cssPropertyNameOrIndex;
      });

      if (isPropertyToSkip || isValidCssValue(cssPropertyValue)) {
        processedStyles[cssPropertyNameOrIndex] = cssPropertyValue;
      }
    });
    return processedStyles;
  };

  return sanitizeCssStyleObject;
};

exports.default = _default;