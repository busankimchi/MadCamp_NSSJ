"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _mapKeys2 = _interopRequireDefault(require("lodash/mapKeys"));

var _camelCase2 = _interopRequireDefault(require("lodash/camelCase"));

var _cssExpandShorthand = _interopRequireDefault(require("./cssExpandShorthand"));

var _memoize = _interopRequireWildcard(require("fast-memoize"));

// `fast-memoize` is a CJS library, there are known issues with them:
// https://github.com/rollup/rollup/issues/1267#issuecomment-446681320
var memoize = _memoize.default || _memoize; // _.camelCase is quite fast, but we are running it for the same values many times

var camelCase = memoize(_camelCase2.default);
var handledCssPropsMap = {
  font: 'font',
  padding: 'padding',
  margin: 'margin',
  border: 'border',
  borderWidth: 'border-width',
  borderStyle: 'border-style',
  borderColor: 'border-color',
  borderTop: 'border-top',
  borderRight: 'border-right',
  borderBottom: 'border-bottom',
  borderLeft: 'border-left',
  borderRadius: 'border-radius',
  background: 'background',
  outline: 'outline'
};

var _default = function _default() {
  var expandCssShorthands = function expandCssShorthands(styles) {
    return Object.keys(styles).reduce(function (acc, cssPropertyName) {
      var cssPropertyValue = styles[cssPropertyName];

      if ((0, _typeof2.default)(cssPropertyValue) === 'object') {
        return Object.assign({}, acc, (0, _defineProperty2.default)({}, cssPropertyName, expandCssShorthands(cssPropertyValue)));
      }

      if (handledCssPropsMap[cssPropertyName]) {
        var expandedProps = (0, _cssExpandShorthand.default)(handledCssPropsMap[cssPropertyName], "".concat(cssPropertyValue));

        if (expandedProps) {
          return Object.assign({}, acc, convertKeysToCamelCase(expandedProps));
        }
      }

      return Object.assign({}, acc, (0, _defineProperty2.default)({}, cssPropertyName, cssPropertyValue));
    }, {});
  };

  return expandCssShorthands;
};

exports.default = _default;

var convertKeysToCamelCase = function convertKeysToCamelCase(obj) {
  return (0, _mapKeys2.default)(obj, function (value, key) {
    return camelCase(key);
  });
};