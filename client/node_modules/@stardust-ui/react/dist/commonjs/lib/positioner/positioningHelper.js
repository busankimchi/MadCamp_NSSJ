"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.applyRtlToOffset = exports.getPlacement = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var PlacementParts;

(function (PlacementParts) {
  PlacementParts["top"] = "top";
  PlacementParts["bottom"] = "bottom";
  PlacementParts["start"] = "start";
  PlacementParts["end"] = "end";
  PlacementParts["left"] = "left";
  PlacementParts["right"] = "right";
  PlacementParts["center"] = "";
})(PlacementParts || (PlacementParts = {}));

var getPositionMap = function getPositionMap(rtl) {
  return {
    above: PlacementParts.top,
    below: PlacementParts.bottom,
    before: rtl ? PlacementParts.right : PlacementParts.left,
    after: rtl ? PlacementParts.left : PlacementParts.right
  };
};

var getAlignmentMap = function getAlignmentMap(rtl) {
  return {
    start: rtl ? PlacementParts.end : PlacementParts.start,
    end: rtl ? PlacementParts.start : PlacementParts.end,
    top: PlacementParts.start,
    bottom: PlacementParts.end,
    center: PlacementParts.center
  };
};

var shouldAlignToCenter = function shouldAlignToCenter(p, a) {
  var positionedVertically = p === 'above' || p === 'below';
  var alignedVertically = a === 'top' || a === 'bottom';
  return positionedVertically && alignedVertically || !positionedVertically && !alignedVertically;
};
/**
 * | position | alignment | placement       | placement RTL
 * -----------------------------------------------------------------
 * | above    | start     |  top-start      |  top-end
 * | above    | center    |  top            |  top
 * | above    | end       |  top-end        |  top-start
 * | below    | start     |  bottom-start   |  bottom-end
 * | below    | center    |  bottom         |  bottom
 * | below    | end       |  bottom-end     |  bottom-start
 * | before   | top       |  left-start     |  right-start
 * | before   | center    |  left           |  right
 * | before   | bottom    |  left-end       |  right-end
 * | after    | top       |  right-start    |  left-start
 * | after    | center    |  right          |  left
 * | after    | bottom    |  right-end      |  left-end
 */


var getPlacement = function getPlacement(_ref) {
  var align = _ref.align,
      position = _ref.position,
      rtl = _ref.rtl;
  var alignment = shouldAlignToCenter(position, align) ? 'center' : align;
  var computedPosition = getPositionMap(rtl)[position];
  var computedAlignmnent = getAlignmentMap(rtl)[alignment];
  var stringifiedAlignment = computedAlignmnent && "-".concat(computedAlignmnent);
  return "".concat(computedPosition).concat(stringifiedAlignment);
}; //
// OFFSET VALUES ADJUSTMENT
//


exports.getPlacement = getPlacement;

var flipPlusMinusSigns = function flipPlusMinusSigns(offset) {
  return offset.replace(/\-/g, '<plus>').replace(/^(\s*)(?=\d)/, '<minus>').replace(/\+/g, '<minus>').replace(/<plus>/g, '+').replace(/<minus>/g, '-').trimLeft().replace(/^\+/, '');
};

var applyRtlToOffset = function applyRtlToOffset(offset, position) {
  if (position === 'above' || position === 'below') {
    var _offset$split = offset.split(','),
        _offset$split2 = (0, _slicedToArray2.default)(_offset$split, 2),
        horizontal = _offset$split2[0],
        vertical = _offset$split2[1];

    return [flipPlusMinusSigns(horizontal), vertical].join(', ').replace(/, $/, '').trim();
  }

  return offset;
};

exports.applyRtlToOffset = applyRtlToOffset;