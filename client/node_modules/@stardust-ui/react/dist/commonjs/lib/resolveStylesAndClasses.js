"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debugEnabled = require("./debug/debugEnabled");

// Both resolvedStyles and classes are objects of getters with lazy evaluation
var resolveStylesAndClasses = function resolveStylesAndClasses(mergedStyles, styleParam, renderStyles) {
  var resolvedStyles = {};
  var resolvedStylesDebug = {};
  var classes = {};
  Object.keys(mergedStyles).forEach(function (slotName) {
    // resolve/render slot styles once and cache
    var cacheKey = "".concat(slotName, "__return");
    Object.defineProperty(resolvedStyles, slotName, {
      enumerable: false,
      configurable: false,
      set: function set(val) {
        resolvedStyles[cacheKey] = val;
        return true;
      },
      get: function get() {
        if (resolvedStyles[cacheKey]) {
          return resolvedStyles[cacheKey];
        } // resolve/render slot styles once and cache


        resolvedStyles[cacheKey] = mergedStyles[slotName](styleParam);

        if (process.env.NODE_ENV !== 'production' && _debugEnabled.isEnabled) {
          resolvedStylesDebug[slotName] = resolvedStyles[slotName]['_debug'];
          delete resolvedStyles[slotName]['_debug'];
        }

        return resolvedStyles[cacheKey];
      }
    });
    Object.defineProperty(classes, slotName, {
      enumerable: false,
      configurable: false,
      set: function set(val) {
        classes[cacheKey] = val;
        return true;
      },
      get: function get() {
        if (classes[cacheKey]) {
          return classes[cacheKey];
        } // this resolves the getter magic


        var styleObj = resolvedStyles[slotName];

        if (renderStyles && styleObj) {
          classes[cacheKey] = renderStyles(styleObj);
        }

        return classes[cacheKey];
      }
    });
  });
  return {
    resolvedStyles: resolvedStyles,
    resolvedStylesDebug: resolvedStylesDebug,
    classes: classes
  };
};

var _default = resolveStylesAndClasses;
exports.default = _default;