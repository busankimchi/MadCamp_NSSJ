"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _keys2 = _interopRequireDefault(require("lodash/keys"));

var _intersection2 = _interopRequireDefault(require("lodash/intersection"));

var _isEmpty2 = _interopRequireDefault(require("lodash/isEmpty"));

var _pickBy2 = _interopRequireDefault(require("lodash/pickBy"));

var keyboardKey = _interopRequireWildcard(require("keyboard-key"));

var _shouldHandleOnKeys = _interopRequireDefault(require("./shouldHandleOnKeys"));

var _rtlKeyMap;

var rtlKeyMap = (_rtlKeyMap = {}, (0, _defineProperty2.default)(_rtlKeyMap, keyboardKey.ArrowRight, keyboardKey.ArrowLeft), (0, _defineProperty2.default)(_rtlKeyMap, keyboardKey.ArrowLeft, keyboardKey.ArrowRight), _rtlKeyMap);
/**
 * Assigns onKeyDown handler to the slot element, based on Component's actions
 * and keys mappings defined in Accessibility behavior
 * @param {AccessibilityActionHandlers} componentActionHandlers Actions handlers defined in a component.
 * @param {KeyActions} behaviorKeyActions Mappings of actions and keys defined in Accessibility behavior.
 * @param {boolean} isRtlEnabled Indicates if Left and Right arrow keys should be swapped in RTL mode.
 */

var getKeyDownHandlers = function getKeyDownHandlers(componentActionHandlers, behaviorKeyActions, isRtlEnabled) {
  var keyHandlers = {};
  if (!componentActionHandlers || !behaviorKeyActions) return keyHandlers;

  var _loop = function _loop(componentPart) {
    var componentPartKeyAction = (0, _pickBy2.default)(behaviorKeyActions[componentPart], function (actions) {
      return !(0, _isEmpty2.default)(actions.keyCombinations);
    });
    var handledActions = (0, _intersection2.default)((0, _keys2.default)(componentPartKeyAction), (0, _keys2.default)(componentActionHandlers));
    if (!handledActions.length) return "continue";
    keyHandlers[componentPart] = {
      onKeyDown: function onKeyDown(event) {
        handledActions.forEach(function (actionName) {
          var keyCombinations = componentPartKeyAction[actionName].keyCombinations;

          if (isRtlEnabled) {
            keyCombinations = keyCombinations.map(function (keyCombination) {
              var keyToRtlKey = rtlKeyMap[keyCombination.keyCode];

              if (keyToRtlKey) {
                keyCombination.keyCode = keyToRtlKey;
              }

              return keyCombination;
            });
          }

          if ((0, _shouldHandleOnKeys.default)(event, keyCombinations)) {
            componentActionHandlers[actionName](event);
          }
        });
      }
    };
  };

  for (var componentPart in behaviorKeyActions) {
    var _ret = _loop(componentPart);

    if (_ret === "continue") continue;
  }

  return keyHandlers;
};

var _default = getKeyDownHandlers;
exports.default = _default;