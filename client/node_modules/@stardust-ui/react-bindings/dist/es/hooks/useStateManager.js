import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import * as React from 'react';

var getDefinedProps = function getDefinedProps(props) {
  var definedProps = {};
  Object.keys(props).forEach(function (propName) {
    if (props[propName] !== undefined) {
      definedProps[propName] = props[propName];
    }
  });
  return definedProps;
};

var useStateManager = function useStateManager(managerFactory) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$mapPropsToIn = options.mapPropsToInitialState,
      mapPropsToInitialState = _options$mapPropsToIn === void 0 ? function () {
    return {};
  } : _options$mapPropsToIn,
      _options$mapPropsToSt = options.mapPropsToState,
      mapPropsToState = _options$mapPropsToSt === void 0 ? function () {
    return {};
  } : _options$mapPropsToSt,
      _options$sideEffects = options.sideEffects,
      sideEffects = _options$sideEffects === void 0 ? [] : _options$sideEffects;
  var latestManager = React.useRef(null); // Heads up! forceUpdate() is used only for triggering rerenders stateManager is SSOT()

  var _React$useState = React.useState(),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      forceUpdate = _React$useState2[1];

  var syncState = React.useCallback(function (_prevState, nextState) {
    return forceUpdate(nextState);
  }, []); // If manager exists, the current state will be used

  var initialState = latestManager.current ? latestManager.current.state : getDefinedProps(mapPropsToInitialState());
  latestManager.current = managerFactory({
    // Factory has already configured actions
    actions: {},
    state: Object.assign({}, initialState, getDefinedProps(mapPropsToState())),
    sideEffects: [].concat(_toConsumableArray(sideEffects), [syncState])
  }); // We need to pass exactly `manager.state` to provide the same state object during the same render
  // frame.
  // It keeps behavior consistency between React state tools and our managers
  // https://github.com/facebook/react/issues/11527#issuecomment-360199710

  if (process.env.NODE_ENV === 'production') {
    return [latestManager.current.state, latestManager.current.actions];
  } // Object.freeze() is used only in dev-mode to avoid usage mistakes


  return [Object.freeze(latestManager.current.state), Object.freeze(latestManager.current.actions)];
};

export default useStateManager;