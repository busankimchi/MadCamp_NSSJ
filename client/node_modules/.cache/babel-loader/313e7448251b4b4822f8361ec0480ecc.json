{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspaces\\\\happy\\\\MadCamp_NSSJ\\\\client\\\\src\\\\containers\\\\Regi\\\\Regibooks.js\";\nimport React, { Component } from 'react';\nimport { Link, withRouter } from \"react-router-dom\";\nimport { RegiContent, InputWithLabel, RegiButton } from 'components/Regibooks';\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { Regibooks } from '.'; // import { registerUser } from \"../../actions/authActions\";\n\nclass Register extends Component {\n  constructor() {\n    super();\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.id]: e.target.value\n      });\n    };\n\n    this.state = {\n      qrid: \"\",\n      name: \"\",\n      author: \"\",\n      subject: \"\",\n      subject_category: \"\",\n      register_user: \"\",\n      errors: {}\n    };\n  }\n\n  componentDidMount() {// 실행되기전, register_user를 redux로 부터 받아와야 한다.\n  }\n\n  componentWillReceiveProps(nextProps) {// 컴포넌트가 prop 을 새로 받았을 때 실행됩니다.\n    // prop 에 따라 state 를 업데이트 해야 할 때 사용하면 유용합니다.\n  }\n\n  // onSubmit = e => {\n  //     e.preventDefault();\n  //     const newUser = {\n  //         username: this.state.username,\n  //         email: this.state.email,\n  //         password: this.state.password,\n  //         password2: this.state.password2\n  //     };\n  //     console.log(newUser);\n  //     this.props.registerUser(newUser, this.props.history);\n  // };\n  render() {\n    const errors = this.state.errors;\n    return React.createElement(RegiContent, {\n      title: \"Register your boo2ks!\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(InputWithLabel, {\n      label: \"\\uCC45 \\uC774\\uB984\",\n      name: \"name\",\n      placeholder: \"\\uCC45 \\uC774\\uB984\",\n      onChange: this.onChange,\n      value: this.state.name,\n      error: errors.name,\n      id: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(InputWithLabel, {\n      label: \"\\uC800\\uC790\",\n      name: \"author\",\n      placeholder: \"\\uC800\\uC790\",\n      onChange: this.onChange,\n      value: this.state.author,\n      error: errors.author,\n      id: \"author\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(InputWithLabel, {\n      label: \"\\uACFC\\uBAA9\",\n      name: \"subject\",\n      placeholder: \"\\uACFC\\uBAA9\",\n      onChange: this.onChange,\n      value: this.state.subject,\n      error: errors.subject,\n      id: \"subject\",\n      type: \"subject\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(RegiButton, {\n      onClick: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Register\")));\n  }\n\n}\n\nexport default Regibooks; // Register.propTypes = {\n//     registerUser: PropTypes.func.isRequired,\n//     auth: PropTypes.object.isRequired,\n//     errors: PropTypes.object.isRequired\n// };\n// const mapStateToProps = state => ({\n//     auth: state.auth,\n//     errors: state.errors\n// });\n// export default connect(\n//     mapStateToProps,\n//     { registerUser }\n// )(withRouter(Register));","map":{"version":3,"sources":["C:/workspaces/happy/MadCamp_NSSJ/client/src/containers/Regi/Regibooks.js"],"names":["React","Component","Link","withRouter","RegiContent","InputWithLabel","RegiButton","PropTypes","connect","Regibooks","Register","constructor","onChange","e","setState","target","id","value","state","qrid","name","author","subject","subject_category","register_user","errors","componentDidMount","componentWillReceiveProps","nextProps","render","onSubmit"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport { RegiContent, InputWithLabel, RegiButton } from 'components/Regibooks';\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Regibooks } from '.';\r\n// import { registerUser } from \"../../actions/authActions\";\r\n\r\n\r\n\r\nclass Register extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            qrid: \"\",\r\n            name: \"\",\r\n            author: \"\",\r\n            subject: \"\",\r\n            subject_category: \"\",\r\n            register_user: \"\",\r\n            errors: {}\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        // 실행되기전, register_user를 redux로 부터 받아와야 한다.\r\n    }\r\n\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        // 컴포넌트가 prop 을 새로 받았을 때 실행됩니다.\r\n        // prop 에 따라 state 를 업데이트 해야 할 때 사용하면 유용합니다.\r\n    }\r\n\r\n\r\n    onChange = e => {\r\n        this.setState({ [e.target.id]: e.target.value });\r\n    };\r\n    // onSubmit = e => {\r\n    //     e.preventDefault();\r\n    //     const newUser = {\r\n    //         username: this.state.username,\r\n    //         email: this.state.email,\r\n    //         password: this.state.password,\r\n    //         password2: this.state.password2\r\n    //     };\r\n    //     console.log(newUser);\r\n    //     this.props.registerUser(newUser, this.props.history);\r\n    // };\r\n\r\n\r\n    render() {\r\n        const { errors } = this.state;\r\n        return (\r\n            <RegiContent title=\"Register your boo2ks!\">\r\n                <form onSubmit={this.onSubmit}>\r\n                    <InputWithLabel\r\n                        label=\"책 이름\"\r\n                        name=\"name\"\r\n                        placeholder=\"책 이름\"\r\n                        onChange={this.onChange}\r\n                        value={this.state.name}\r\n                        error={errors.name}\r\n                        id=\"name\"\r\n                    />\r\n                    <InputWithLabel\r\n                        label=\"저자\"\r\n                        name=\"author\"\r\n                        placeholder=\"저자\"\r\n                        onChange={this.onChange}\r\n                        value={this.state.author}\r\n                        error={errors.author}\r\n                        id=\"author\"\r\n                    />\r\n                    <InputWithLabel\r\n                        label=\"과목\"\r\n                        name=\"subject\"\r\n                        placeholder=\"과목\"\r\n                        onChange={this.onChange}\r\n                        value={this.state.subject}\r\n                        error={errors.subject}\r\n                        id=\"subject\"\r\n                        type=\"subject\"\r\n                    />\r\n                    <RegiButton onClick={this.onSubmit}>Register</RegiButton>\r\n                </form>\r\n            </RegiContent>\r\n        );\r\n    }\r\n}\r\nexport default Regibooks;\r\n\r\n// Register.propTypes = {\r\n//     registerUser: PropTypes.func.isRequired,\r\n//     auth: PropTypes.object.isRequired,\r\n//     errors: PropTypes.object.isRequired\r\n// };\r\n// const mapStateToProps = state => ({\r\n//     auth: state.auth,\r\n//     errors: state.errors\r\n// });\r\n\r\n// export default connect(\r\n//     mapStateToProps,\r\n//     { registerUser }\r\n// )(withRouter(Register));"]},"metadata":{},"sourceType":"module"}